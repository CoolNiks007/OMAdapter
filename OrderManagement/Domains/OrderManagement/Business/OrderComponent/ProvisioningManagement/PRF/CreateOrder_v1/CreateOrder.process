<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx16="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/AddProducts/v1" xmlns:pfx15="http://vodafone.com.tr/EAI/Logging" xmlns:pfx14="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:ns="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" xmlns:pfx13="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd" xmlns:pfx12="http://vodafone.com.tr/EAI/ProvisioningDataModel/AttributeDM" xmlns:pfx11="http://vodafone.com.tr/EAI/ProvisioningDataModel/ProductDM" xmlns:pfx10="http://vodafone.com.tr/EAI/ProvisioningDataModel/SubscriberDM" xmlns:ns22="http://vodafone.com.tr/ServiceCatalog/ServiceReply" xmlns:pfx17="http://vodafone.com.tr/ServiceCatalog/Business/AssetInquiries/GetAssetList/v2" xmlns:pfx5="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" xmlns:pfx4="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx3="http://vodafone.com.tr/ServiceCatalog/Business/Billing/AddProducts/v1" xmlns:pfx2="http://vodafone.com.tr/EAI/Common/ResponseEAI" xmlns:pfx9="http://vodafone.com.tr/EAI/ProvisioningDataModel/ServiceOrderDM" xmlns:pfx8="http://vodafone.com.tr/EAI/ProvisioningDataModel/BillingAccountDM" xmlns:pfx7="http://vodafone.com.tr/EAI/ProvisioningDataModel/CustomerDM" xmlns:pfx6="http://vodafone.com.tr/ServiceCatalog/Business/ServiceProvisioning/CreateProvisioningOrder/v1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns14="http://vodafone.com.tr/ServiceCatalog/Business/PenaltyInquiries/CalculatePenalty/v1" xmlns:ns9="http://vodafone.com.tr/ServiceCatalog/Business/SharedDataBundleInquiries/GetMainLineSharedData/v1" xmlns:ns32="urn:com:metasolv:oms:xmlapi:1" xmlns:ns12="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentResponseInput/v1" xmlns:ns5="http://vodafone.com.tr/EAI/ProvisioningDataModel/ProvisioningOrderDM" xmlns:ns6="http://vodafone.com.tr/EAI/ProvisioningDataModel/PRFTransactionDM" xmlns:ns13="http://vodafone.com.tr/ServiceCatalog/Business/PenaltyInquiries/CalculatePenaltyType/v1" xmlns:ns10="http://vodafone.com.tr/EAI/ProvisioningDataModel/DataSharingDM" xmlns:ns7="http://vodafone.com.tr/ServiceCatalog/Business/InventoryManagement/GetICCIDDetails/v1" xmlns:pfx="http://vodafone.com.tr/EAI/Common/RequestEAI" xmlns:ns8="http://vodafone.com.tr/EAI/ProvisioningDataModel/MobileSignatureDM" xmlns:ns11="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberInquiries/GetDataSharingMainLine/v1" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns2="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns4="http://vodafone.com.tr/EAI/Common/ResponseCodes" xmlns:ns3="http://vodafone.com.tr/EAI/Common/Header" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/RequestEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/RequestEAI.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/ResponseEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/ResponseEAI.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OrderComponent/OrderComponentRequestInput.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/Billing/AddProducts/v1" schemaLocation="/Domains/ServiceCatalog/Business/Billing/AddProducts_v1/Schemas/AddProducts.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/ServiceProvisioning/CreateProvisioningOrder/v1" schemaLocation="/Domains/ServiceCatalog/Business/ServiceProvisioning/CreateProvisioningOrder_v1/Schemas/CreateProvisioningOrder.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/EAI/Logging" schemaLocation="/GlobalCommonResources/Schemas/Logging/LogMessage.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/InventoryManagement/GetICCIDDetails/v1" schemaLocation="/Domains/ServiceCatalog/Business/InventoryManagement/GetICCIDDetails_v1/Schemas/GetICCIDDetails.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberInquiries/GetDataSharingMainLine/v1" schemaLocation="/Domains/ServiceCatalog/Business/SubscriberInquiries/GetDataSharingMainLine_v1/Schemas/GetDataSharingMainLine.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/AddProducts/v1" schemaLocation="/Domains/ServiceCatalog/Business/ProductManagement/AddProducts_v1/Schemas/AddProducts.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/SharedDataBundleInquiries/GetMainLineSharedData/v1" schemaLocation="/Domains/ServiceCatalog/Business/SharedDataBundleInquiries/GetMainLineSharedData_v1/Schemas/GetMainLineSharedData.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceRequest.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceReply" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceReply.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/PenaltyInquiries/CalculatePenalty/v1" schemaLocation="/Domains/ServiceCatalog/Business/PenaltyInquiries/CalculatePenalty_v1/Schemas/CalculatePenalty.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/PenaltyInquiries/CalculatePenaltyType/v1" schemaLocation="/Domains/ServiceCatalog/Business/PenaltyInquiries/CalculatePenaltyType_v1/Schemas/CalculatePenaltyType.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/AssetInquiries/GetAssetList/v2" schemaLocation="/Domains/ServiceCatalog/Business/AssetInquiries/GetAssetList_v2/Schemas/GetAssetList.xsd"/>
    <pd:name>Domains/OrderManagement/Business/OrderComponent/ProvisioningManagement/PRF/CreateOrder_v1/CreateOrder.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="Input">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:RequestEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>27</pd:startX>
    <pd:startY>281</pd:startY>
    <pd:returnBindings>
        <Output>
            <pfx2:ResponseEAI>
                <pfx2:Header>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ancestor-or-self::*/namespace::node()"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/@*"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/node()"/>
                </pfx2:Header>
                <pfx2:ResponseCodes>
                    <ns4:ResponseCode>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ErrorCodes/Success"/>
                    </ns4:ResponseCode>
                </pfx2:ResponseCodes>
            </pfx2:ResponseEAI>
        </Output>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="Output">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx2:ResponseEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>1376</pd:endX>
    <pd:endY>279</pd:endY>
    <pd:errorSchemas>
        <LogMessage ref="pfx15:LogMessage"/>
    </pd:errorSchemas>
    <pd:processVariables>
        <MobileSignatureAction>
            <xsd:element name="MobileSignatureAction">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="MsAction" type="xsd:string"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </MobileSignatureAction>
    </pd:processVariables>
    <pd:targetNamespace>http://vodafone.com.tr/1407237293059</pd:targetNamespace>
    <pd:activity name="Calculate MSAction">
        <pd:type>com.tibco.pe.core.AssignActivity</pd:type>
        <pd:resourceType>ae.activities.assignActivity</pd:resourceType>
        <pd:x>255</pd:x>
        <pd:y>162</pd:y>
        <config>
            <variableName>MobileSignatureAction</variableName>
        </config>
        <pd:inputBindings>
            <xsl:variable name="MobileSignatureProduct" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ProductCatalogId = '9069' or ProductClass = 'MOBILE SIGNATURE CLASS']"/>
            <MobileSignatureAction>
                <xsl:choose>
                    <xsl:when test="$MobileSignatureProduct/Action=&quot;New&quot;&#xA;or&#xA;(&#xA;$MobileSignatureProduct/Action=&quot;Modified&quot;&#xA;and&#xA;$MobileSignatureProduct/ListOfChildItemAttribute/ChildItemAttribute[Name=&quot;Status&quot;]/Value=&quot;Active&quot;&#xA;and&#xA;$MobileSignatureProduct/ListOfChildItemAttribute/ChildItemAttribute[Name=&quot;Status&quot;]/PreviousValue=&quot;Active&quot;&#xA;)">
                        <MsAction>
                            <xsl:value-of select="'Activate'"/>
                        </MsAction>
                    </xsl:when>
                    <xsl:when test="(&#x9;$MobileSignatureProduct/Action=&quot;Modified&quot;&#xA;&#x9;and&#xA;&#x9;$MobileSignatureProduct/ListOfChildItemAttribute/ChildItemAttribute[Name=&quot;Status&quot;]/Value='Suspended'&#xA;&#x9;and&#xA;&#x9;$MobileSignatureProduct/ListOfChildItemAttribute/ChildItemAttribute[Name=&quot;Status&quot;]/PreviousValue='Active'&#xA;)&#xA;or&#xA;$MobileSignatureProduct/Action=&quot;Suspend&quot;">
                        <MsAction>
                            <xsl:value-of select="'Suspend'"/>
                        </MsAction>
                    </xsl:when>
                    <xsl:when test="(&#x9;$MobileSignatureProduct/Action=&quot;Modified&quot;&#xA;&#x9;and&#xA;&#x9;$MobileSignatureProduct/ListOfChildItemAttribute/ChildItemAttribute[Name=&quot;Status&quot;]/Value=&quot;Active&quot;&#xA;&#x9;and&#xA;&#x9;$MobileSignatureProduct/ListOfChildItemAttribute/ChildItemAttribute[Name=&quot;Status&quot;]/PreviousValue= &quot;Suspended&quot;&#xA;)&#xA;or&#xA;$MobileSignatureProduct/Action=&quot;Resume&quot;">
                        <MsAction>
                            <xsl:value-of select="&quot;ResumeFromSuspend&quot;"/>
                        </MsAction>
                    </xsl:when>
                    <xsl:when test="$MobileSignatureProduct/Action=&quot;Modified&quot;&#xA;and&#xA;$MobileSignatureProduct/ListOfChildItemAttribute/ChildItemAttribute[Name=&quot;Status&quot;]/Value=&quot;Cancel Waiting&quot;">
                        <MsAction>
                            <xsl:value-of select="&quot;Cancel&quot;"/>
                        </MsAction>
                    </xsl:when>
                    <xsl:when test="$MobileSignatureProduct/Action=&quot;Modified&quot;&#xA;and&#xA;$MobileSignatureProduct/ListOfChildItemAttribute/ChildItemAttribute[Name=&quot;Status&quot;]/PreviousValue=&quot;Cancel Waiting&quot;">
                        <MsAction>
                            <xsl:value-of select="&quot;CancelCancel&quot;"/>
                        </MsAction>
                    </xsl:when>
                    <xsl:when test="$MobileSignatureProduct/Action=&quot;Deleted&quot;">
                        <MsAction>
                            <xsl:value-of select="&quot;InstantCancel&quot;"/>
                        </MsAction>
                    </xsl:when>
                    <xsl:otherwise>
                        <MsAction>
                            <xsl:value-of select="''"/>
                        </MsAction>
                    </xsl:otherwise>
                </xsl:choose>
            </MobileSignatureAction>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Fail Order Component">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>346</pd:x>
        <pd:y>659</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/OrderComponent/OrderComponentResponse.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <ns12:Request>
                    <ns12:OcDetails>
                        <ns12:Id>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </ns12:Id>
                        <ns12:Name>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                        </ns12:Name>
                        <ns12:Scenario>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario"/>
                        </ns12:Scenario>
                        <ns12:OrderId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </ns12:OrderId>
                        <ns12:CorrelationID>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:CorrelationID"/>
                        </ns12:CorrelationID>
                        <xsl:for-each select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Cartridge">
                            <ns12:Cartridge>
                                <ns12:Name>
                                    <xsl:value-of select="ns:Name"/>
                                </ns12:Name>
                                <ns12:Version>
                                    <xsl:value-of select="ns:Version"/>
                                </ns12:Version>
                                <ns12:Source>
                                    <xsl:value-of select="ns:Source"/>
                                </ns12:Source>
                            </ns12:Cartridge>
                        </xsl:for-each>
                    </ns12:OcDetails>
                    <ns12:ServiceReply>
                        <ns22:Header>
                            <ns4:ResponseCode>
                                <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ErrorCodes/ReferenceDataNotFound"/>
                            </ns4:ResponseCode>
                        </ns22:Header>
                        <ns22:Body>
                            <ns32:TelcoOperationResponse>
                                <Id>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                                </Id>
                                <Name>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                                </Name>
                                <OrderId>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                                </OrderId>
                                <StatusCode>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ErrorCodes/ReferenceDataNotFound"/>
                                </StatusCode>
                                <StatusMessage>
                                    <xsl:value-of select="concat($_globalVariables/ns1:GlobalVariables/ErrorCodes/ReferenceDataNotFoundDescription, ' |', ' Bad Condition for PRF Transaction')"/>
                                </StatusMessage>
                            </ns32:TelcoOperationResponse>
                        </ns22:Body>
                    </ns12:ServiceReply>
                </ns12:Request>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Fail-Order-Component-1">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1113</pd:x>
        <pd:y>78</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/OrderComponent/OrderComponentResponse.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <ns12:Request>
                    <ns12:OcDetails>
                        <ns12:Id>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </ns12:Id>
                        <ns12:Name>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                        </ns12:Name>
                        <ns12:Scenario>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario"/>
                        </ns12:Scenario>
                        <ns12:OrderId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </ns12:OrderId>
                        <ns12:CorrelationID>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:CorrelationID"/>
                        </ns12:CorrelationID>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Cartridge">
                            <ns12:Cartridge>
                                <ns12:Name>
                                    <xsl:value-of select="ns:Name"/>
                                </ns12:Name>
                                <ns12:Version>
                                    <xsl:value-of select="ns:Version"/>
                                </ns12:Version>
                                <ns12:Source>
                                    <xsl:value-of select="ns:Source"/>
                                </ns12:Source>
                            </ns12:Cartridge>
                        </xsl:for-each>
                    </ns12:OcDetails>
                    <ns12:ServiceReply>
                        <xsl:choose>
                            <xsl:when test="count($GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header)>0">
                                <xsl:copy-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header"/>
                            </xsl:when>
                            <xsl:when test="count($GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header)>0">
                                <xsl:copy-of select="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <ns22:Header>
                                    <ns4:ResponseCode>
                                        <xsl:value-of select="$GetGlobalData/Output/ErrorCode"/>
                                    </ns4:ResponseCode>
                                    <xsl:if test="$GetGlobalData/Output/ErrorMessage">
                                        <ns4:ResponseMsg>
                                            <xsl:value-of select="$GetGlobalData/Output/ErrorMessage"/>
                                        </ns4:ResponseMsg>
                                    </xsl:if>
                                </ns22:Header>
                            </xsl:otherwise>
                        </xsl:choose>
                        <ns22:Body>
                            <ns32:TelcoOperationResponse>
                                <Id>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                                </Id>
                                <Name>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                                </Name>
                                <OrderId>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                                </OrderId>
                                <xsl:choose>
                                    <xsl:when test="string-length($GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode) > 0">
                                        <StatusCode>
                                            <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode"/>
                                        </StatusCode>
                                    </xsl:when>
                                    <xsl:when test="$GetGlobalData/Output/ErrorCode !=$_globalVariables/ns1:GlobalVariables/ErrorCodes/Success&#xA;and&#xA;$GetGlobalData/Output/ErrorCode !='-106'">
                                        <StatusCode>
                                            <xsl:value-of select="$GetGlobalData/Output/ErrorCode"/>
                                        </StatusCode>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <StatusCode>
                                            <xsl:value-of select="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode"/>
                                        </StatusCode>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="string-length($GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode) > 0">
                                        <xsl:choose>
                                            <xsl:when test="string-length($GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ErrorDescription) > 0">
                                                <StatusMessage>
                                                    <xsl:value-of select="tib:left(concat($GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseMsg,': ', $GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ErrorDescription), 1000)"/>
                                                </StatusMessage>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <StatusMessage>
                                                    <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseMsg"/>
                                                </StatusMessage>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:when>
                                    <xsl:when test="$GetGlobalData/Output/ErrorCode !=$_globalVariables/ns1:GlobalVariables/ErrorCodes/Success&#xA;and&#xA;$GetGlobalData/Output/ErrorCode !='-106'">
                                        <StatusMessage>
                                            <xsl:value-of select="tib:left($GetGlobalData/Output/ErrorMessage, 1000)"/>
                                        </StatusMessage>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:choose>
                                            <xsl:when test="string-length($GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ErrorDescription) > 0">
                                                <StatusMessage>
                                                    <xsl:value-of select="tib:left(concat($GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseMsg,': ', $GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ErrorDescription), 1000)"/>
                                                </StatusMessage>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <StatusMessage>
                                                    <xsl:value-of select="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseMsg"/>
                                                </StatusMessage>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </ns32:TelcoOperationResponse>
                        </ns22:Body>
                    </ns12:ServiceReply>
                </ns12:Request>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Fail-Order-Component-2">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1118</pd:x>
        <pd:y>565</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/OrderComponent/OrderComponentResponse.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <ns12:Request>
                    <ns12:OcDetails>
                        <ns12:Id>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </ns12:Id>
                        <ns12:Name>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                        </ns12:Name>
                        <ns12:Scenario>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario"/>
                        </ns12:Scenario>
                        <ns12:OrderId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </ns12:OrderId>
                        <ns12:CorrelationID>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:CorrelationID"/>
                        </ns12:CorrelationID>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Cartridge">
                            <ns12:Cartridge>
                                <ns12:Name>
                                    <xsl:value-of select="ns:Name"/>
                                </ns12:Name>
                                <ns12:Version>
                                    <xsl:value-of select="ns:Version"/>
                                </ns12:Version>
                                <ns12:Source>
                                    <xsl:value-of select="ns:Source"/>
                                </ns12:Source>
                            </ns12:Cartridge>
                        </xsl:for-each>
                    </ns12:OcDetails>
                    <ns12:ServiceReply>
                        <xsl:choose>
                            <xsl:when test="count($GetPenalty/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header)>0">
                                <xsl:copy-of select="$GetPenalty/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <ns22:Header>
                                    <ns4:ResponseCode>
                                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ErrorCodes/ReferenceDataNotFound"/>
                                    </ns4:ResponseCode>
                                    <ns4:ResponseMsg>
                                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ErrorCodes/ReferenceDataNotFoundDescription"/>
                                    </ns4:ResponseMsg>
                                </ns22:Header>
                            </xsl:otherwise>
                        </xsl:choose>
                        <ns22:Body>
                            <ns32:TelcoOperationResponse>
                                <Id>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                                </Id>
                                <Name>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                                </Name>
                                <OrderId>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                                </OrderId>
                                <xsl:choose>
                                    <xsl:when test="count($GetMainLineSharedData/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode)>0">
                                        <StatusCode>
                                            <xsl:value-of select="$GetMainLineSharedData/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode"/>
                                        </StatusCode>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <StatusCode>
                                            <xsl:value-of select="$GetPenalty/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode"/>
                                        </StatusCode>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="count($GetMainLineSharedData/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ErrorDescription)>0">
                                        <StatusMessage>
                                            <xsl:value-of select="tib:left(concat($GetMainLineSharedData/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseMsg,': ', $GetMainLineSharedData/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ErrorDescription), 1000)"/>
                                        </StatusMessage>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <StatusMessage>
                                            <xsl:value-of select="tib:left(concat($GetPenalty/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseMsg,': ', $GetPenalty/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ErrorDescription), 1000)"/>
                                        </StatusMessage>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </ns32:TelcoOperationResponse>
                        </ns22:Body>
                    </ns12:ServiceReply>
                </ns12:Request>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetGlobalData">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>961</pd:x>
        <pd:y>279</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/TO2FGlobalData/GetGlobalData.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <OrderId>
                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                </OrderId>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetICCIDDetails">
        <pd:type>com.tibco.plugin.jms.JMSQueueRequestReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueRequestReplyActivity</pd:resourceType>
        <pd:x>662</pd:x>
        <pd:y>167</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>%%Domains/OrderManagement/OrderComponent/Constants/AuxQueues/GetICCIDDetails%%</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx5:ServiceRequest"/>
            <OutDataxsdString ref="ns22:ServiceReply"/>
        </config>
        <pd:inputBindings>
            <xsl:variable name="RootItem" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[CustAcctCode = ../../ListOfCustomerAccount/CustomerAccount[CustAcctType = '102']/CustAcctCode and (ComponentSubType = 'MOBILE'  or ProductCatalogId = '18400')][1]"/>
            <ns2:ActivityInput>
                <JMSExpiration>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestJMSMsgExpiration"/>
                </JMSExpiration>
                <requestTimeout>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestTimeout"/>
                </requestTimeout>
                <Body>
                    <pfx5:ServiceRequest>
                        <xsl:for-each select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx5:Header>
                                <xsl:if test="ns3:RequestId">
                                    <ns3:RequestId>
                                        <xsl:value-of select="ns3:RequestId"/>
                                    </ns3:RequestId>
                                </xsl:if>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/Reply/Now"/>
                                </ns3:ReplyExpected>
                                <ns3:QoS>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/QOS/Reliable"/>
                                </ns3:QoS>
                                <xsl:if test="ns3:Schedule">
                                    <ns3:Schedule>
                                        <xsl:value-of select="ns3:Schedule"/>
                                    </ns3:Schedule>
                                </xsl:if>
                                <xsl:if test="ns3:CorrelationId">
                                    <ns3:CorrelationId>
                                        <xsl:value-of select="ns3:CorrelationId"/>
                                    </ns3:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns3:Priority">
                                    <ns3:Priority>
                                        <xsl:value-of select="ns3:Priority"/>
                                    </ns3:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <xsl:if test="ns3:Password">
                                            <ns3:Password>
                                                <xsl:value-of select="ns3:Password"/>
                                            </ns3:Password>
                                        </xsl:if>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns3:ProxySystem">
                                    <ns3:ProxySystem>
                                        <xsl:value-of select="ns3:ProxySystem"/>
                                    </ns3:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns3:ForceSimulate">
                                    <ns3:ForceSimulate>
                                        <xsl:value-of select="ns3:ForceSimulate"/>
                                    </ns3:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx5:Header>
                        </xsl:for-each>
                        <pfx5:Body>
                            <ns7:Request>
                                <ns7:ICCID>
                                    <xsl:value-of select="$RootItem/ICCID"/>
                                </ns7:ICCID>
                                <ns7:MSISDN>
                                    <xsl:value-of select="$RootItem/MSISDN"/>
                                </ns7:MSISDN>
                                <ns7:UserName>
                                    <xsl:value-of select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/OrderCreator"/>
                                </ns7:UserName>
                                <ns7:ShopCode>
                                    <xsl:value-of select="''"/>
                                </ns7:ShopCode>
                                <ns7:ProcessType>
                                    <xsl:value-of select="'T'"/>
                                </ns7:ProcessType>
                                <ns7:MSISDNSecondary>
                                    <xsl:value-of select="''"/>
                                </ns7:MSISDNSecondary>
                                <ns7:CardType>
                                    <xsl:value-of select="$RootItem/SIMCardType"/>
                                </ns7:CardType>
                                <xsl:choose>
                                    <xsl:when test="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfBillingAccount/BillingAccount[$RootItem/BillAcctCode = BillAcctCode]/BillAcctType = 'Prepaid'">
                                        <ns7:Brand>
                                            <xsl:value-of select="'MC'"/>
                                        </ns7:Brand>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <ns7:Brand>
                                            <xsl:value-of select="'PO'"/>
                                        </ns7:Brand>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </ns7:Request>
                        </pfx5:Body>
                    </pfx5:ServiceRequest>
                </Body>
            </ns2:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetICCIDDetails-Old">
        <pd:type>com.tibco.plugin.jms.JMSQueueRequestReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueRequestReplyActivity</pd:resourceType>
        <pd:x>961</pd:x>
        <pd:y>171</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>%%Domains/OrderManagement/OrderComponent/Constants/AuxQueues/GetICCIDDetails%%</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx5:ServiceRequest"/>
            <OutDataxsdString ref="ns22:ServiceReply"/>
        </config>
        <pd:inputBindings>
            <xsl:variable name="RootItem" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[CustAcctCode = ../../ListOfCustomerAccount/CustomerAccount[CustAcctType = '102']/CustAcctCode and (ComponentSubType = 'MOBILE'  or ProductCatalogId = '18400')][1]"/>
            <ns2:ActivityInput>
                <JMSExpiration>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestJMSMsgExpiration"/>
                </JMSExpiration>
                <requestTimeout>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestTimeout"/>
                </requestTimeout>
                <Body>
                    <pfx5:ServiceRequest>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx5:Header>
                                <xsl:if test="ns3:RequestId">
                                    <ns3:RequestId>
                                        <xsl:value-of select="ns3:RequestId"/>
                                    </ns3:RequestId>
                                </xsl:if>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/Reply/Now"/>
                                </ns3:ReplyExpected>
                                <ns3:QoS>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/QOS/Reliable"/>
                                </ns3:QoS>
                                <xsl:if test="ns3:Schedule">
                                    <ns3:Schedule>
                                        <xsl:value-of select="ns3:Schedule"/>
                                    </ns3:Schedule>
                                </xsl:if>
                                <xsl:if test="ns3:CorrelationId">
                                    <ns3:CorrelationId>
                                        <xsl:value-of select="ns3:CorrelationId"/>
                                    </ns3:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns3:Priority">
                                    <ns3:Priority>
                                        <xsl:value-of select="ns3:Priority"/>
                                    </ns3:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <xsl:if test="ns3:Password">
                                            <ns3:Password>
                                                <xsl:value-of select="ns3:Password"/>
                                            </ns3:Password>
                                        </xsl:if>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns3:ProxySystem">
                                    <ns3:ProxySystem>
                                        <xsl:value-of select="ns3:ProxySystem"/>
                                    </ns3:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns3:ForceSimulate">
                                    <ns3:ForceSimulate>
                                        <xsl:value-of select="ns3:ForceSimulate"/>
                                    </ns3:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx5:Header>
                        </xsl:for-each>
                        <pfx5:Body>
                            <ns7:Request>
                                <ns7:ICCID>
                                    <xsl:value-of select="$RootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'ICCI']/PreviousValue"/>
                                </ns7:ICCID>
                                <ns7:MSISDN>
                                    <xsl:value-of select="$RootItem/MSISDN"/>
                                </ns7:MSISDN>
                                <ns7:UserName>
                                    <xsl:value-of select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/OrderCreator"/>
                                </ns7:UserName>
                                <ns7:ShopCode>
                                    <xsl:value-of select="''"/>
                                </ns7:ShopCode>
                                <ns7:ProcessType>
                                    <xsl:value-of select="'T'"/>
                                </ns7:ProcessType>
                                <ns7:MSISDNSecondary>
                                    <xsl:value-of select="''"/>
                                </ns7:MSISDNSecondary>
                                <ns7:CardType>
                                    <xsl:value-of select="$RootItem/SIMCardType"/>
                                </ns7:CardType>
                                <xsl:choose xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                                    <xsl:when test="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfBillingAccount/BillingAccount[$RootItem/BillAcctCode = BillAcctCode]/BillAcctType = 'Prepaid'">
                                        <ns7:Brand>
                                            <xsl:value-of select="'MC'"/>
                                        </ns7:Brand>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <ns7:Brand>
                                            <xsl:value-of select="'PO'"/>
                                        </ns7:Brand>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </ns7:Request>
                        </pfx5:Body>
                    </pfx5:ServiceRequest>
                </Body>
            </ns2:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetMainLineSharedData">
        <pd:type>com.tibco.plugin.jms.JMSQueueRequestReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueRequestReplyActivity</pd:resourceType>
        <pd:x>428</pd:x>
        <pd:y>390</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>VFTR.Billing.ServiceCatalog.BILLINGADAPTER.Business.R.Request.GetMainLineSharedData_v1</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx5:ServiceRequest"/>
            <OutDataxsdString ref="ns22:ServiceReply"/>
        </config>
        <pd:inputBindings>
            <ns2:ActivityInput>
                <JMSExpiration>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestJMSMsgExpiration"/>
                </JMSExpiration>
                <requestTimeout>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestTimeout"/>
                </requestTimeout>
                <Body>
                    <pfx5:ServiceRequest>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx5:Header>
                                <xsl:if test="ns3:RequestId">
                                    <ns3:RequestId>
                                        <xsl:value-of select="ns3:RequestId"/>
                                    </ns3:RequestId>
                                </xsl:if>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/Reply/Now"/>
                                </ns3:ReplyExpected>
                                <ns3:QoS>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/QOS/Reliable"/>
                                </ns3:QoS>
                                <xsl:if test="ns3:Schedule">
                                    <ns3:Schedule>
                                        <xsl:value-of select="ns3:Schedule"/>
                                    </ns3:Schedule>
                                </xsl:if>
                                <xsl:if test="ns3:CorrelationId">
                                    <ns3:CorrelationId>
                                        <xsl:value-of select="ns3:CorrelationId"/>
                                    </ns3:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns3:Priority">
                                    <ns3:Priority>
                                        <xsl:value-of select="ns3:Priority"/>
                                    </ns3:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <xsl:if test="ns3:Password">
                                            <ns3:Password>
                                                <xsl:value-of select="ns3:Password"/>
                                            </ns3:Password>
                                        </xsl:if>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns3:ProxySystem">
                                    <ns3:ProxySystem>
                                        <xsl:value-of select="ns3:ProxySystem"/>
                                    </ns3:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns3:ForceSimulate">
                                    <ns3:ForceSimulate>
                                        <xsl:value-of select="ns3:ForceSimulate"/>
                                    </ns3:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx5:Header>
                        </xsl:for-each>
                        <pfx5:Body>
                            <ns9:Request>
                                <ns9:MainLine>
                                    <xsl:value-of select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[ 1]/ServiceId"/>
                                </ns9:MainLine>
                                <ns9:QueryType>
                                    <xsl:value-of select="'NextPeriod'"/>
                                </ns9:QueryType>
                                <ns9:PageNumber>
                                    <xsl:value-of select="1"/>
                                </ns9:PageNumber>
                                <ns9:PageSize>
                                    <xsl:value-of select="1"/>
                                </ns9:PageSize>
                            </ns9:Request>
                        </pfx5:Body>
                    </pfx5:ServiceRequest>
                </Body>
            </ns2:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetPenalty">
        <pd:type>com.tibco.plugin.jms.JMSQueueRequestReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueRequestReplyActivity</pd:resourceType>
        <pd:x>1118</pd:x>
        <pd:y>446</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>%%Domains/OrderManagement/OrderComponent/Constants/AuxQueues/GetPenaltyType%%</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx5:ServiceRequest"/>
            <OutDataxsdString ref="ns22:ServiceReply"/>
        </config>
        <pd:inputBindings>
            <ns2:ActivityInput>
                <JMSExpiration>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestJMSMsgExpiration"/>
                </JMSExpiration>
                <requestTimeout>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestTimeout"/>
                </requestTimeout>
                <Body>
                    <pfx5:ServiceRequest>
                        <xsl:for-each select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx5:Header>
                                <xsl:if test="ns3:RequestId">
                                    <ns3:RequestId>
                                        <xsl:value-of select="ns3:RequestId"/>
                                    </ns3:RequestId>
                                </xsl:if>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/Reply/Now"/>
                                </ns3:ReplyExpected>
                                <ns3:QoS>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/QOS/Reliable"/>
                                </ns3:QoS>
                                <xsl:if test="ns3:Schedule">
                                    <ns3:Schedule>
                                        <xsl:value-of select="ns3:Schedule"/>
                                    </ns3:Schedule>
                                </xsl:if>
                                <xsl:if test="ns3:CorrelationId">
                                    <ns3:CorrelationId>
                                        <xsl:value-of select="ns3:CorrelationId"/>
                                    </ns3:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns3:Priority">
                                    <ns3:Priority>
                                        <xsl:value-of select="ns3:Priority"/>
                                    </ns3:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <xsl:if test="ns3:Password">
                                            <ns3:Password>
                                                <xsl:value-of select="ns3:Password"/>
                                            </ns3:Password>
                                        </xsl:if>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns3:ProxySystem">
                                    <ns3:ProxySystem>
                                        <xsl:value-of select="ns3:ProxySystem"/>
                                    </ns3:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns3:ForceSimulate">
                                    <ns3:ForceSimulate>
                                        <xsl:value-of select="ns3:ForceSimulate"/>
                                    </ns3:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx5:Header>
                        </xsl:for-each>
                        <pfx5:Body>
                            <ns13:Request>
                                <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="RootItem" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[Action=('Deleted','Suspend')&#xA;and ComponentGroup=('CAMP')&#xA;and not(ProductCatalogId = ('5000','5005','11001','60007'))]"/>
                                <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="ChildItem" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[Action=('Deleted','Suspend')&#xA;and ComponentGroup='CAMP'&#xA;and not(ComponentType='HANDSET')&#xA;and not(ProductCatalogId = ('5000','5005','11001','60007'))&#xA;]"/>
                                <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="BundlePromotionItem" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[Action=('Deleted','Suspend')&#xA;and ComponentGroup='CAMP PROMO'&#xA;]"/>
                                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                                    <ns13:ExternalId>
                                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                                    </ns13:ExternalId>
                                </xsl:if>
                                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                                    <ns13:ExternalComponentId>
                                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                                    </ns13:ExternalComponentId>
                                </xsl:if>
                                <ns13:BillingAccount>
                                    <xsl:value-of select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[string-length(BillAcctCode)>0]/BillAcctCode"/>
                                </ns13:BillingAccount>
                                <ns13:MSISDN>
                                    <xsl:value-of select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[string-length(ServiceId)>0]/ServiceId"/>
                                </ns13:MSISDN>
                                <xsl:if test="count($ChildItem)>0">
                                    <xsl:for-each select="$ChildItem">
                                        <ns13:Campaign>
                                            <ns13:CampaignCode>
                                                <xsl:value-of select="IntegrationId"/>
                                            </ns13:CampaignCode>
                                            <ns13:CampaignReasonCode>
                                                <xsl:value-of select="ProductCatalogId"/>
                                            </ns13:CampaignReasonCode>
                                            <ns13:MethodType>
                                                <xsl:value-of select="'0'"/>
                                            </ns13:MethodType>
                                        </ns13:Campaign>
                                    </xsl:for-each>
                                </xsl:if>
                                <xsl:if test="count($RootItem)>0">
                                    <xsl:for-each select="$RootItem">
                                        <ns13:Campaign>
                                            <ns13:CampaignCode>
                                                <xsl:value-of select="IntegrationId"/>
                                            </ns13:CampaignCode>
                                            <ns13:CampaignReasonCode>
                                                <xsl:value-of select="ProductCatalogId"/>
                                            </ns13:CampaignReasonCode>
                                            <ns13:MethodType>
                                                <xsl:value-of select="'0'"/>
                                            </ns13:MethodType>
                                        </ns13:Campaign>
                                    </xsl:for-each>
                                </xsl:if>
                                <xsl:if test="count($BundlePromotionItem)>0">
                                    <xsl:for-each select="$BundlePromotionItem">
                                        <ns13:Campaign>
                                            <ns13:CampaignCode>
                                                <xsl:value-of select="IntegrationId"/>
                                            </ns13:CampaignCode>
                                            <ns13:CampaignReasonCode>
                                                <xsl:value-of select="ProductCatalogId"/>
                                            </ns13:CampaignReasonCode>
                                            <ns13:MethodType>
                                                <xsl:value-of select="'0'"/>
                                            </ns13:MethodType>
                                        </ns13:Campaign>
                                    </xsl:for-each>
                                </xsl:if>
                            </ns13:Request>
                        </pfx5:Body>
                    </pfx5:ServiceRequest>
                </Body>
            </ns2:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetPRFTransactionCodes">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>346</pd:x>
        <pd:y>280</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/ConfigurationVariables/PRF/GetPRFTransactionCodes.process</processName>
        </config>
        <pd:inputBindings>
            <xsl:choose>
                <xsl:when test="'ProvisioningManagement.PRF.CreateOrderCallForward' = $Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name='Name']/ns3:Value">
                    <GetPRFTransactionCodesInput>
                        <xsl:if test="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem/ProductCatalogId[.=('71062','1105','71043')]">
                            <ProductCatalogId>
                                <xsl:value-of select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem/ProductCatalogId[.=('71062','1105','71043')]"/>
                            </ProductCatalogId>
                        </xsl:if>
                        <ActionCode>
                            <xsl:value-of select="''"/>
                        </ActionCode>
                    </GetPRFTransactionCodesInput>
                </xsl:when>
                <xsl:when test="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name='Name']/ns3:Value =('ProvisioningManagement.PRF.CreateOrderGRP','ProvisioningManagement.PRF.CreateOrderGRPDeactivation') and count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem)!=0">
                    <GetPRFTransactionCodesInput>
                        <xsl:variable name="Child" select="if ($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ComponentType='GROUP_CHILD']/Action=('New', 'Deleted')) then&#xA;$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ComponentType='GROUP_CHILD' and Action=('New', 'Deleted')]&#xA;else if (contains($Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name='Scenario']/ns3:Value,'Service.Mobile.Deactivate.Base.CreateProvisioningOrderGRP') or contains($Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name='Scenario']/ns3:Value,'Service.Mobile.ModifyOptions.PRF.CreateOrderGRP')) then&#xA;$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ProductCatalogId=('2210','3326') and Action='Deleted']&#xA;else&#xA;$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ProductCatalogId=('2210','3326') and Action='New']"/>
                        <xsl:choose>
                            <xsl:when test="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ComponentType='GROUP_CHILD']/Action=('New', 'Deleted')">
                                <ProductCatalogId>
                                    <xsl:value-of select="'GROUP_CHILD'"/>
                                </ProductCatalogId>
                            </xsl:when>
                            <xsl:otherwise>
                                <ProductCatalogId>
                                    <xsl:value-of select="$Child[1]/ProductCatalogId"/>
                                </ProductCatalogId>
                            </xsl:otherwise>
                        </xsl:choose>
                        <ActionCode>
                            <xsl:value-of select="$Child[1]/Action"/>
                        </ActionCode>
                    </GetPRFTransactionCodesInput>
                </xsl:when>
                <xsl:when test="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name='Name']/ns3:Value =('ProvisioningManagement.PRF.CreateOrderGRP') and count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem)=0">
                    <xsl:variable name="Order" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]"/>
                    <GetPRFTransactionCodesInput>
                        <xsl:variable name="rootItem" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[1]"/>
                        <xsl:if test="$rootItem/ProductCatalogId">
                            <ProductCatalogId>
                                <xsl:value-of select="$rootItem/ProductCatalogId"/>
                            </ProductCatalogId>
                        </xsl:if>
                        <xsl:if test="$rootItem/Action">
                            <ActionCode>
                                <xsl:value-of select="$rootItem/Action"/>
                            </ActionCode>
                        </xsl:if>
                    </GetPRFTransactionCodesInput>
                </xsl:when>
                <xsl:when test="'ProvisioningManagement.PRF.CreateMSOrder' = $Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name='Name']/ns3:Value">
                    <GetPRFTransactionCodesInput>
                        <xsl:variable name="Child" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ProductCatalogId='9069' or ProductClass = 'MOBILE SIGNATURE CLASS']"/>
                        <ProductCatalogId>
                            <xsl:value-of select="$Child[1]/ProductCatalogId"/>
                        </ProductCatalogId>
                        <ActionCode>
                            <xsl:value-of select="$MobileSignatureAction/MobileSignatureAction/MsAction"/>
                        </ActionCode>
                    </GetPRFTransactionCodesInput>
                </xsl:when>
                <xsl:when test="'Update VPN Barring Status' = $Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/OrderType">
                    <GetPRFTransactionCodesInput>
                        <xsl:variable name="Order" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]"/>
                        <xsl:if test="$Order/OrderType">
                            <OrderTypeCode>
                                <xsl:value-of select="$Order/OrderType"/>
                            </OrderTypeCode>
                        </xsl:if>
                        <xsl:choose>
                            <xsl:when test="contains($Order/ListOfRootItem/RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='Commands']/Value, 'close to send') or&#xA;contains($Order/ListOfRootItem/RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='Commands']/Value, '1103.Network Status=No')">
                                <ActionCode>
                                    <xsl:value-of select="'Barring'"/>
                                </ActionCode>
                            </xsl:when>
                            <xsl:when test="contains($Order/ListOfRootItem/RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='Commands']/Value, 'send/receive') or&#xA;contains($Order/ListOfRootItem/RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='Commands']/Value, '1103.Network Status=Yes')">
                                <ActionCode>
                                    <xsl:value-of select="'Unbarring'"/>
                                </ActionCode>
                            </xsl:when>
                            <xsl:otherwise>
                                <ActionCode>
                                    <xsl:value-of select="''"/>
                                </ActionCode>
                            </xsl:otherwise>
                        </xsl:choose>
                    </GetPRFTransactionCodesInput>
                </xsl:when>
                <xsl:when test="'ProvisioningManagement.PRF.CreateOrderCampaign' = $Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name='Name']/ns3:Value">
                    <GetPRFTransactionCodesInput>
                        <xsl:variable name="Order" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]"/>
                        <xsl:variable name="campaign" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ProductCatalogId = ('52062', '10920', '14631')]"/>
                        <xsl:if test="$Order/OrderType">
                            <OrderTypeCode>
                                <xsl:value-of select="$Order/OrderType"/>
                            </OrderTypeCode>
                        </xsl:if>
                        <ProductCatalogId>
                            <xsl:value-of select="$campaign//ProductCatalogId"/>
                        </ProductCatalogId>
                        <xsl:if test="$campaign/Action">
                            <ActionCode>
                                <xsl:value-of select="$campaign/Action"/>
                            </ActionCode>
                        </xsl:if>
                    </GetPRFTransactionCodesInput>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="Order" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]"/>
                    <GetPRFTransactionCodesInput>
                        <xsl:if test="$Order/OrderType">
                            <OrderTypeCode>
                                <xsl:value-of select="$Order/OrderType"/>
                            </OrderTypeCode>
                        </xsl:if>
                        <xsl:if test="$Order/ListOfRootItem/RootItem[1]/ActionType">
                            <ActionType>
                                <xsl:value-of select="$Order/ListOfRootItem/RootItem[1]/ActionType"/>
                            </ActionType>
                        </xsl:if>
                        <xsl:if test="$Order/ListOfRootItem/RootItem[1]/ActionReason">
                            <ActionReason>
                                <xsl:value-of select="$Order/ListOfRootItem/RootItem[1]/ActionReason"/>
                            </ActionReason>
                        </xsl:if>
                        <xsl:choose>
                            <xsl:when test="count($Order/ListOfRootItem/RootItem)>1">
                                <xsl:choose>
                                    <xsl:when test="contains($Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name='Name']/ns3:Value, 'Deactivation')">
                                        <ActionCode>
                                            <xsl:value-of select="'Deleted'"/>
                                        </ActionCode>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <ActionCode>
                                            <xsl:value-of select="'New'"/>
                                        </ActionCode>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <ActionCode>
                                    <xsl:value-of select="$Order/ListOfRootItem/RootItem[1]/Action"/>
                                </ActionCode>
                            </xsl:otherwise>
                        </xsl:choose>
                    </GetPRFTransactionCodesInput>
                </xsl:otherwise>
            </xsl:choose>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="JMS Queue Sender">
        <pd:type>com.tibco.plugin.jms.JMSQueueSendActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueSendActivity</pd:resourceType>
        <pd:x>1263</pd:x>
        <pd:y>279</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx5:ServiceRequest"/>
        </config>
        <pd:inputBindings>
            <ns2:ActivityInput>
                <destinationQueue>
                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:ServiceCatalogQueue"/>
                </destinationQueue>
                <xsl:choose>
                    <xsl:when test="contains($Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario, &quot;PortIN&quot;)">
                        <replyToQueue>
                            <xsl:value-of select="tib:concat-sequence-format(($_globalVariables/ns1:GlobalVariables/Constants/Company,$_globalVariables/ns1:GlobalVariables/Constants/ProjectName,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/Name,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Name,$_globalVariables/ns1:GlobalVariables/Constants/Layer/Business,$_globalVariables/ns1:GlobalVariables/Constants/QOS/Guarantee,$_globalVariables/ns1:GlobalVariables/Constants/RequestType/Reply),&quot;.&quot;)"/>
                        </replyToQueue>
                    </xsl:when>
                    <xsl:otherwise>
                        <replyToQueue>
                            <xsl:value-of select="tib:concat-sequence-format(($_globalVariables/ns1:GlobalVariables/Constants/Company,$_globalVariables/ns1:GlobalVariables/Constants/ProjectName,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/Name,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Name,$_globalVariables/ns1:GlobalVariables/Constants/Layer/Business,$_globalVariables/ns1:GlobalVariables/Constants/QOS/Guarantee,$_globalVariables/ns1:GlobalVariables/Constants/RequestType/Reply, 'ACK'),&quot;.&quot;)"/>
                        </replyToQueue>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Priority">
                    <JMSPriority>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Priority"/>
                    </JMSPriority>
                </xsl:if>
                <Body>
                    <pfx5:ServiceRequest>
                        <xsl:for-each select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx5:Header>
                                <xsl:if test="ns3:RequestId">
                                    <ns3:RequestId>
                                        <xsl:value-of select="ns3:RequestId"/>
                                    </ns3:RequestId>
                                </xsl:if>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="ns3:ReplyExpected"/>
                                </ns3:ReplyExpected>
                                <xsl:if test="ns3:QoS">
                                    <ns3:QoS>
                                        <xsl:value-of select="ns3:QoS"/>
                                    </ns3:QoS>
                                </xsl:if>
                                <xsl:if test="ns3:Schedule">
                                    <ns3:Schedule>
                                        <xsl:value-of select="ns3:Schedule"/>
                                    </ns3:Schedule>
                                </xsl:if>
                                <xsl:if test="ns3:CorrelationId">
                                    <ns3:CorrelationId>
                                        <xsl:value-of select="ns3:CorrelationId"/>
                                    </ns3:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns3:Priority">
                                    <ns3:Priority>
                                        <xsl:value-of select="ns3:Priority"/>
                                    </ns3:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <xsl:if test="ns3:Password">
                                            <ns3:Password>
                                                <xsl:value-of select="ns3:Password"/>
                                            </ns3:Password>
                                        </xsl:if>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns3:ProxySystem">
                                    <ns3:ProxySystem>
                                        <xsl:value-of select="ns3:ProxySystem"/>
                                    </ns3:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns3:ForceSimulate">
                                    <ns3:ForceSimulate>
                                        <xsl:value-of select="ns3:ForceSimulate"/>
                                    </ns3:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                        <ns3:Attribute>
                                            <ns3:Name>
                                                <xsl:value-of select="'RootId'"/>
                                            </ns3:Name>
                                            <ns3:Value>
                                                <xsl:value-of select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[1]/RootItemId"/>
                                            </ns3:Value>
                                        </ns3:Attribute>
                                        <xsl:choose>
                                            <xsl:when test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name = 'ProvisioningManagement.PRF.CreateMSOrder'">
                                                <ns3:Attribute>
                                                    <ns3:Name>
                                                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/AsyncControl/BusinessOperationName"/>
                                                    </ns3:Name>
                                                    <ns3:Value>
                                                        <xsl:value-of select="'ProvResultOrderMSCallback'"/>
                                                    </ns3:Value>
                                                </ns3:Attribute>
                                            </xsl:when>
                                            <xsl:when test="contains($Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario, &quot;PortIN&quot;)"/>
                                            <xsl:otherwise>
                                                <ns3:Attribute>
                                                    <ns3:Name>
                                                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/AsyncControl/BusinessOperationName"/>
                                                    </ns3:Name>
                                                    <ns3:Value>
                                                        <xsl:value-of select="'ProvResultGenericCallback'"/>
                                                    </ns3:Value>
                                                </ns3:Attribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx5:Header>
                        </xsl:for-each>
                        <pfx5:Body>
                            <xsl:copy-of select="$Map-Data/pfx6:Request"/>
                        </pfx5:Body>
                    </pfx5:ServiceRequest>
                </Body>
            </ns2:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1118</pd:x>
        <pd:y>279</pd:y>
        <config>
            <element ref="pfx6:Request"/>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*" element="ns7:Response"/>
            <pd:coercion xpath="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*" element="ns7:Response"/>
            <pd:coercion xpath="$GetMainLineSharedData/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*" element="ns9:Response"/>
            <pd:coercion xpath="$GetParentProductCatalogId/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*" element="pfx17:Response"/>
        </pd:coercions>
        <pd:inputBindings>
            <xsl:variable name="Order" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]"/>
            <xsl:variable name="RootItem" select="{--'1º if -> ProvisioningManagement.PRF.CreateOrderDeactivation' used for TransferCross Customer in deactivation, only rootitem deleted should be used--}&#xA;{--2º if -> Check if TransferCrossCustomer activation PRF OC to send only New RootItem--}&#xA;if($Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name = 'ProvisioningManagement.PRF.CreateOrderDeactivation')&#xA;then $Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[Action='Deleted'  and (ComponentSubType = 'MOBILE' or ProductCatalogId = '18400')]&#xA;else if (exists($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[ActionType = '128' and (ComponentSubType = 'MOBILE' or ProductCatalogId = '18400')]))&#xA;then $Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[Action='New' and (ComponentSubType = 'MOBILE' or ProductCatalogId = '18400')]&#xA;else if (exists($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[(ComponentSubType = 'MOBILE' or ProductCatalogId = '18400')]))&#xA;then $Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[(ComponentSubType = 'MOBILE' or ProductCatalogId = '18400')]&#xA;else $Order/ListOfRootItem/RootItem&#xA;&#xA;{--BULK SMS: ProductCatalogId = '18400'--}"/>
            <xsl:variable name="RootCampaignItem" select="$Order/ListOfRootItem/RootItem[ComponentGroup = 'CAMP PROMO' and not(ComponentType = 'PERMANENCY') and Action = ('New','Deleted')]"/>
            <pfx6:Request>
                <pfx6:ProvisioningOrder>
                    <xsl:choose>
                        <xsl:when test="'ProvisioningManagement.PRF.CreateOrderMNP' = $Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name='Name']/ns3:Value">
                            <ns5:PRFTransaction>
                                <ns6:TransactionType>
                                    <xsl:value-of select="'MNP'"/>
                                </ns6:TransactionType>
                                <xsl:choose>
                                    <xsl:when test="{--MNP Voluntarily--}&#xA;$Order/OrderType='Disconnect' and&#xA;($RootItem/ActionReason='2020' or $RootItem/ActionReason='1017') and&#xA;$RootItem/ActionType='123' and&#xA;string-length($RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='Donor Operator']/Value)>0 and&#xA;$RootItem/CustAcctType =('101','102')">
                                        <ns6:TransactionCode>
                                            <xsl:value-of select="'516'"/>
                                        </ns6:TransactionCode>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <ns6:TransactionCode>
                                            <xsl:value-of select="$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionCode"/>
                                        </ns6:TransactionCode>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:if test="string-length($GetPRFTransactionCodes/GetPRFTransactionCodesOutput/Priority)>0">
                                    <ns6:Priority>
                                        <xsl:value-of select="$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/Priority"/>
                                    </ns6:Priority>
                                </xsl:if>
                                <xsl:choose>
                                    <xsl:when test="contains($Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario, &quot;PortIN&quot;)">
                                        <ns6:ActivationDate>
                                            <xsl:value-of select="tib:create-dateTime(&quot;2099&quot;, &quot;12&quot;, &quot;31&quot;, &quot;23&quot;, &quot;59&quot;, &quot;59&quot;)"/>
                                        </ns6:ActivationDate>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Order/OrderPortOutDate)">
                                            <ns6:ActivationDate>
                                                <xsl:value-of select="tib:add-to-dateTime(tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Order/OrderPortOutDate), 0, 0, 0, 0, $_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/AuxVariables/CreateOrder/MNPOUTActDelayInterval, 0)"/>
                                            </ns6:ActivationDate>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </ns5:PRFTransaction>
                        </xsl:when>
                        <xsl:when test="'ProvisioningManagement.PRF.CreateOrderMNPBar' = $Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name='Name']/ns3:Value">
                            <ns5:PRFTransaction>
                                <ns6:TransactionType>
                                    <xsl:value-of select="'MNPBAR'"/>
                                </ns6:TransactionType>
                                <ns6:TransactionCode>
                                    <xsl:value-of select="'989'"/>
                                </ns6:TransactionCode>
                                <xsl:if test="string-length($GetPRFTransactionCodes/GetPRFTransactionCodesOutput/Priority)>0">
                                    <ns6:Priority>
                                        <xsl:value-of select="$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/Priority"/>
                                    </ns6:Priority>
                                </xsl:if>
                                <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Order/OrderPortOutDate)">
                                    <ns6:ActivationDate>
                                        <xsl:value-of select="tib:add-to-dateTime(tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Order/OrderPortOutDate), 0, 0, 0, 0, $_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/AuxVariables/CreateOrder/MNPOUTActDelayInterval, 0)"/>
                                    </ns6:ActivationDate>
                                </xsl:if>
                            </ns5:PRFTransaction>
                        </xsl:when>
                        <xsl:when test="'ProvisioningManagement.PRF.CreateOrderError' = $Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name='Name']/ns3:Value">
                            <ns5:PRFTransaction>
                                <ns6:TransactionType>
                                    <xsl:value-of select="'DELPOOL'"/>
                                </ns6:TransactionType>
                                <ns6:TransactionCode>
                                    <xsl:value-of select="'993'"/>
                                </ns6:TransactionCode>
                                <xsl:if test="$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/Priority">
                                    <ns6:Priority>
                                        <xsl:value-of select="$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/Priority"/>
                                    </ns6:Priority>
                                </xsl:if>
                                <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootItem/StartDate)">
                                    <ns6:ActivationDate>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootItem/StartDate)"/>
                                    </ns6:ActivationDate>
                                </xsl:if>
                            </ns5:PRFTransaction>
                        </xsl:when>
                        <xsl:otherwise>
                            <ns5:PRFTransaction>
                                <ns6:TransactionType>
                                    <xsl:value-of select="$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionType"/>
                                </ns6:TransactionType>
                                <ns6:TransactionCode>
                                    <xsl:value-of select="$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionCode"/>
                                </ns6:TransactionCode>
                                <xsl:if test="string-length($GetPRFTransactionCodes/GetPRFTransactionCodesOutput/Priority)>0">
                                    <ns6:Priority>
                                        <xsl:value-of select="$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/Priority"/>
                                    </ns6:Priority>
                                </xsl:if>
                                <xsl:choose>
                                    <xsl:when test="$RootItem/ActionReason='1020'">
                                        <ns6:ActivationDate>
                                            <xsl:value-of select="tib:add-to-dateTime(tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Order/OrderPortOutDate), 0, 0, 0, 0, $_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/AuxVariables/CreateOrder/MNPOUTActDelayInterval, 0)"/>
                                        </ns6:ActivationDate>
                                    </xsl:when>
                                    <xsl:when test="contains($Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario, &quot;PortIN&quot;)">
                                        <ns6:ActivationDate>
                                            <xsl:value-of select="tib:create-dateTime(&quot;2099&quot;, &quot;12&quot;, &quot;31&quot;, &quot;23&quot;, &quot;59&quot;, &quot;59&quot;)"/>
                                        </ns6:ActivationDate>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootItem/StartDate)">
                                            <ns6:ActivationDate>
                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootItem/StartDate)"/>
                                            </ns6:ActivationDate>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </ns5:PRFTransaction>
                        </xsl:otherwise>
                    </xsl:choose>
                    <ns5:ServiceOrder>
                        <pfx9:OrderId>
                            <xsl:value-of select="$Order/OrderId"/>
                        </pfx9:OrderId>
                        <pfx9:OrderTypeCode>
                            <xsl:value-of select="$Order/OrderType"/>
                        </pfx9:OrderTypeCode>
                        <xsl:if test="$RootItem/ActionType">
                            <pfx9:SubTypeCode>
                                <xsl:value-of select="$RootItem/ActionType"/>
                            </pfx9:SubTypeCode>
                        </xsl:if>
                        <xsl:if test="$RootItem/ActionReason">
                            <pfx9:ActionReason>
                                <xsl:value-of select="$RootItem/ActionReason"/>
                            </pfx9:ActionReason>
                        </xsl:if>
                        <pfx9:CategoryAction>
                            <xsl:value-of select="$Parse-XML-OSMOrder/OSMOrder/CategoryAction"/>
                        </pfx9:CategoryAction>
                        <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Order/OrderCreationDate)">
                            <pfx9:CreationDate>
                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Order/OrderCreationDate)"/>
                            </pfx9:CreationDate>
                        </xsl:if>
                    </ns5:ServiceOrder>
                    <ns5:Customer>
                        <pfx7:CustomerCode>
                            <xsl:value-of select="$RootItem/CustAcctCode"/>
                        </pfx7:CustomerCode>
                        <xsl:choose>
                            <xsl:when test="$Order/ListOfCustomerAccount/CustomerAccount[CustAcctCode = $RootItem/CustAcctCode]/CustAcctType = &quot;101&quot;">
                                <pfx7:CustomerType>
                                    <xsl:value-of select="&quot;EBU&quot;"/>
                                </pfx7:CustomerType>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx7:CustomerType>
                                    <xsl:value-of select="&quot;CBU&quot;"/>
                                </pfx7:CustomerType>
                            </xsl:otherwise>
                        </xsl:choose>
                        <pfx7:TaxType>
                            <xsl:value-of select="$Order/ListOfBillingAccount/BillingAccount[$RootItem/BillAcctCode = BillAcctCode]/BillAcctTaxType"/>
                        </pfx7:TaxType>
                    </ns5:Customer>
                    <ns5:Subscriber>
                        <xsl:if test="$RootItem/ServiceId">
                            <pfx10:MSISDN>
                                <xsl:value-of select="$RootItem/ServiceId"/>
                            </pfx10:MSISDN>
                        </xsl:if>
                        <pfx10:IMSI>
                            <xsl:value-of select="$RootItem/IMSI"/>
                        </pfx10:IMSI>
                        <xsl:if test="$RootItem/ServiceType">
                            <pfx10:ServiceType>
                                <xsl:value-of select="$RootItem/ServiceType"/>
                            </pfx10:ServiceType>
                        </xsl:if>
                    </ns5:Subscriber>
                    <ns5:BillingAccount>
                        <pfx8:BillingAccountCode>
                            <xsl:value-of select="$RootItem/BillAcctCode"/>
                        </pfx8:BillingAccountCode>
                        <pfx8:BillCycle>
                            <xsl:value-of select="$Order/ListOfBillingAccount/BillingAccount[$RootItem/BillAcctCode = BillAcctCode]/ListOfInvoiceProfile/InvoiceProfile[1]/BillCycle"/>
                        </pfx8:BillCycle>
                    </ns5:BillingAccount>
                    <ns5:ListOfProduct>
                        <!--Mobile Line-->
                        <xsl:for-each select="$RootItem">
                            <ns5:Product>
                                <xsl:if test="Action">
                                    <pfx11:ActionCode>
                                        <xsl:value-of select="Action"/>
                                    </pfx11:ActionCode>
                                </xsl:if>
                                <xsl:if test="ProductCatalogId">
                                    <pfx11:ProductCatalogId>
                                        <xsl:value-of select="ProductCatalogId"/>
                                    </pfx11:ProductCatalogId>
                                </xsl:if>
                                <xsl:if test="ItemId">
                                    <pfx11:OrderItemId>
                                        <xsl:value-of select="ItemId"/>
                                    </pfx11:OrderItemId>
                                </xsl:if>
                                <xsl:if test="IntegrationId">
                                    <pfx11:IntegrationId>
                                        <xsl:value-of select="IntegrationId"/>
                                    </pfx11:IntegrationId>
                                </xsl:if>
                                <xsl:if test="ParentIntegrationId">
                                    <pfx11:ParentIntegrationId>
                                        <xsl:value-of select="ParentIntegrationId"/>
                                    </pfx11:ParentIntegrationId>
                                </xsl:if>
                                <xsl:if test="ComponentType">
                                    <pfx11:ComponentType>
                                        <xsl:value-of select="ComponentType"/>
                                    </pfx11:ComponentType>
                                </xsl:if>
                                <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,StartDate)">
                                    <pfx11:StartDate>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,StartDate)"/>
                                    </pfx11:StartDate>
                                </xsl:if>
                                <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,EndDate)">
                                    <pfx11:EndDate>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,EndDate)"/>
                                    </pfx11:EndDate>
                                </xsl:if>
                                <pfx11:ListOfProperties>
                                    <pfx11:Property>
                                        <pfx11:Name>
                                            <xsl:value-of select="'IMSI'"/>
                                        </pfx11:Name>
                                        <xsl:choose>
                                            <xsl:when test="$Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102'">
                                                <xsl:choose>
                                                    <xsl:when test="contains($Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario, 'SIMCardCoupling.SecondOrder')">
                                                        <xsl:if test="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSISecondary">
                                                            <pfx11:Value>
                                                                <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSISecondary"/>
                                                            </pfx11:Value>
                                                        </xsl:if>
                                                    </xsl:when>
                                                    <xsl:when test="string-length($GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSI) > 0">
                                                        <xsl:if test="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSI">
                                                            <pfx11:Value>
                                                                <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSI"/>
                                                            </pfx11:Value>
                                                        </xsl:if>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:if test="IMSI">
                                                            <pfx11:Value>
                                                                <xsl:value-of select="IMSI"/>
                                                            </pfx11:Value>
                                                        </xsl:if>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="IMSI">
                                                    <pfx11:Value>
                                                        <xsl:value-of select="IMSI"/>
                                                    </pfx11:Value>
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx11:Property>
                                    <pfx11:Property>
                                        <pfx11:Name>
                                            <xsl:value-of select="'PreviousImsi'"/>
                                        </pfx11:Name>
                                        <xsl:choose>
                                            <xsl:when test="string-length(PreviousIMSI) > 0&#xA;and  $RootItem/ActionType = '103'">
                                                <xsl:if test="PreviousIMSI">
                                                    <pfx11:Value>
                                                        <xsl:value-of select="PreviousIMSI"/>
                                                    </pfx11:Value>
                                                </xsl:if>
                                            </xsl:when>
                                            <xsl:when test="string-length(PreviousIMSI) = 0 and &#xA;string-length($GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSI) > 0 and&#xA; $RootItem/ActionType = '103'">
                                                <pfx11:Value>
                                                    <xsl:value-of select="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSI"/>
                                                </pfx11:Value>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:choose>
                                                    <xsl:when test="string-length(IMSI) >0">
                                                        <xsl:if test="IMSI">
                                                            <pfx11:Value>
                                                                <xsl:value-of select="IMSI"/>
                                                            </pfx11:Value>
                                                        </xsl:if>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx11:Value>
                                                            <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSI"/>
                                                        </pfx11:Value>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx11:Property>
                                </pfx11:ListOfProperties>
                                <pfx11:ListOfProduct>
                                    <xsl:for-each select="ListOfChildItem/ChildItem[not(ListOfChildItemAttribute/ChildItemAttribute/Name = 'Parent Group Id')]">
                                        <pfx11:Product>
                                            <xsl:variable name="CosbyMember" select=".[ComponentGroup = 'TARIFF'][ListOfKeyFeature/KeyFeature[Feature = 'Sharable Bundle']/FeatureValue = 'Y'] |&#xA;.[ComponentGroup = 'SRV' and ComponentType = 'SHARING' and ComponentSubType = ('SUBLINE','DATALINE')]"/>
                                            <xsl:if test="Action">
                                                <pfx11:ActionCode>
                                                    <xsl:value-of select="Action"/>
                                                </pfx11:ActionCode>
                                            </xsl:if>
                                            <xsl:if test="ProductCatalogId">
                                                <pfx11:ProductCatalogId>
                                                    <xsl:value-of select="ProductCatalogId"/>
                                                </pfx11:ProductCatalogId>
                                            </xsl:if>
                                            <xsl:if test="ItemId">
                                                <pfx11:OrderItemId>
                                                    <xsl:value-of select="ItemId"/>
                                                </pfx11:OrderItemId>
                                            </xsl:if>
                                            <xsl:if test="IntegrationId">
                                                <pfx11:IntegrationId>
                                                    <xsl:value-of select="IntegrationId"/>
                                                </pfx11:IntegrationId>
                                            </xsl:if>
                                            <xsl:if test="ParentIntegrationId">
                                                <pfx11:ParentIntegrationId>
                                                    <xsl:value-of select="ParentIntegrationId"/>
                                                </pfx11:ParentIntegrationId>
                                            </xsl:if>
                                            <xsl:if test="ComponentType">
                                                <pfx11:ComponentType>
                                                    <xsl:value-of select="ComponentType"/>
                                                </pfx11:ComponentType>
                                            </xsl:if>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,StartDate)">
                                                <pfx11:StartDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,StartDate)"/>
                                                </pfx11:StartDate>
                                            </xsl:if>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,EndDate)">
                                                <pfx11:EndDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,EndDate)"/>
                                                </pfx11:EndDate>
                                            </xsl:if>
                                            <pfx11:ListOfProperties>
                                                <pfx11:Property>
                                                    <pfx11:Name>
                                                        <xsl:value-of select="'TariffFlag'"/>
                                                    </pfx11:Name>
                                                    <xsl:if test="TariffFlag">
                                                        <pfx11:Value>
                                                            <xsl:value-of select="TariffFlag"/>
                                                        </pfx11:Value>
                                                    </xsl:if>
                                                </pfx11:Property>
                                                <pfx11:Property>
                                                    <pfx11:Name>
                                                        <xsl:value-of select="'VoiceFlag'"/>
                                                    </pfx11:Name>
                                                    <xsl:if test="VoiceFlag">
                                                        <pfx11:Value>
                                                            <xsl:value-of select="VoiceFlag"/>
                                                        </pfx11:Value>
                                                    </xsl:if>
                                                </pfx11:Property>
                                                <pfx11:Property>
                                                    <pfx11:Name>
                                                        <xsl:value-of select="'SMSFlag'"/>
                                                    </pfx11:Name>
                                                    <xsl:if test="SMSFlag">
                                                        <pfx11:Value>
                                                            <xsl:value-of select="SMSFlag"/>
                                                        </pfx11:Value>
                                                    </xsl:if>
                                                </pfx11:Property>
                                                <pfx11:Property>
                                                    <pfx11:Name>
                                                        <xsl:value-of select="'DataFlag'"/>
                                                    </pfx11:Name>
                                                    <xsl:if test="DataFlag">
                                                        <pfx11:Value>
                                                            <xsl:value-of select="DataFlag"/>
                                                        </pfx11:Value>
                                                    </xsl:if>
                                                </pfx11:Property>
                                                <pfx11:Property>
                                                    <pfx11:Name>
                                                        <xsl:value-of select="'RoamDataFlag'"/>
                                                    </pfx11:Name>
                                                    <xsl:if test="RoamDataFlag">
                                                        <pfx11:Value>
                                                            <xsl:value-of select="RoamDataFlag"/>
                                                        </pfx11:Value>
                                                    </xsl:if>
                                                </pfx11:Property>
                                                <xsl:if test="string-length(AgreementNum)>0 and AgreementNum !='0'">
                                                    <pfx11:Property>
                                                        <pfx11:Name>
                                                            <xsl:value-of select="'AgreementNum'"/>
                                                        </pfx11:Name>
                                                        <xsl:if test="AgreementNum">
                                                            <pfx11:Value>
                                                                <xsl:value-of select="AgreementNum"/>
                                                            </pfx11:Value>
                                                        </xsl:if>
                                                    </pfx11:Property>
                                                </xsl:if>
                                                <xsl:if test="exists($CosbyMember)">
                                                    <pfx11:Property>
                                                        <pfx11:Name>
                                                            <xsl:value-of select="'GroupId'"/>
                                                        </pfx11:Name>
                                                        <xsl:choose>
                                                            <xsl:when test="string-length($CosbyMember/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Group ID']/Value)=0">
                                                                <xsl:choose>
                                                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/CustomerCare/GetAssetList_CosbyGroupId]/Value)>0">
                                                                        <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/CustomerCare/GetAssetList_CosbyGroupId]/Value">
                                                                            <pfx11:Value>
                                                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/CustomerCare/GetAssetList_CosbyGroupId]/Value"/>
                                                                            </pfx11:Value>
                                                                        </xsl:if>
                                                                    </xsl:when>
                                                                    <xsl:when test="string-length($GetParentProductCatalogId/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/pfx17:Response/pfx17:ListOfAsset/pfx17:Asset[pfx17:ProductGroup = 'TARIFF']/pfx17:ListOfAttribute/pfx17:Attribute[pfx17:Name = 'Group ID']/pfx17:Value)>0">
                                                                        <xsl:if test="$GetParentProductCatalogId/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/pfx17:Response/pfx17:ListOfAsset/pfx17:Asset[pfx17:ProductGroup = 'TARIFF']/pfx17:ListOfAttribute/pfx17:Attribute[pfx17:Name = 'Group ID']/pfx17:Value">
                                                                            <pfx11:Value>
                                                                                <xsl:value-of select="$GetParentProductCatalogId/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/pfx17:Response/pfx17:ListOfAsset/pfx17:Asset[pfx17:ProductGroup = 'TARIFF']/pfx17:ListOfAttribute/pfx17:Attribute[pfx17:Name = 'Group ID']/pfx17:Value"/>
                                                                            </pfx11:Value>
                                                                        </xsl:if>
                                                                    </xsl:when>
                                                                </xsl:choose>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <xsl:if test="$CosbyMember/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Group ID']/Value">
                                                                    <pfx11:Value>
                                                                        <xsl:value-of select="$CosbyMember/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Group ID']/Value"/>
                                                                    </pfx11:Value>
                                                                </xsl:if>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </pfx11:Property>
                                                </xsl:if>
                                            </pfx11:ListOfProperties>
                                            <pfx11:ListOfAttribute>
                                                <xsl:for-each select="ListOfChildItemAttribute/ChildItemAttribute">
                                                    <pfx11:Attribute>
                                                        <xsl:if test="Action">
                                                            <pfx12:ActionCode>
                                                                <xsl:value-of select="Action"/>
                                                            </pfx12:ActionCode>
                                                        </xsl:if>
                                                        <xsl:if test="Name">
                                                            <pfx12:Name>
                                                                <xsl:value-of select="Name"/>
                                                            </pfx12:Name>
                                                        </xsl:if>
                                                        <xsl:if test="Value">
                                                            <pfx12:Value>
                                                                <xsl:value-of select="Value"/>
                                                            </pfx12:Value>
                                                        </xsl:if>
                                                        <xsl:if test="PreviousValue">
                                                            <pfx12:OldValue>
                                                                <xsl:value-of select="PreviousValue"/>
                                                            </pfx12:OldValue>
                                                        </xsl:if>
                                                    </pfx11:Attribute>
                                                </xsl:for-each>
                                            </pfx11:ListOfAttribute>
                                        </pfx11:Product>
                                    </xsl:for-each>
                                </pfx11:ListOfProduct>
                                <pfx11:ListOfAttribute>
                                    <xsl:for-each select="ListOfRootItemAttribute/RootItemAttribute[not(Name=$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/Order/Attributes/NumberInventory/IMSI)]">
                                        <pfx11:Attribute>
                                            <xsl:if test="Action">
                                                <pfx12:ActionCode>
                                                    <xsl:value-of select="Action"/>
                                                </pfx12:ActionCode>
                                            </xsl:if>
                                            <xsl:if test="Name">
                                                <pfx12:Name>
                                                    <xsl:value-of select="Name"/>
                                                </pfx12:Name>
                                            </xsl:if>
                                            <xsl:if test="Value">
                                                <pfx12:Value>
                                                    <xsl:value-of select="Value"/>
                                                </pfx12:Value>
                                            </xsl:if>
                                            <xsl:if test="PreviousValue">
                                                <pfx12:OldValue>
                                                    <xsl:value-of select="PreviousValue"/>
                                                </pfx12:OldValue>
                                            </xsl:if>
                                        </pfx11:Attribute>
                                    </xsl:for-each>
                                    <xsl:for-each select="ListOfRootItemAttribute/RootItemAttribute[Name=$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/Order/Attributes/NumberInventory/IMSI]">
                                        <pfx11:Attribute>
                                            <xsl:if test="Action">
                                                <pfx12:ActionCode>
                                                    <xsl:value-of select="Action"/>
                                                </pfx12:ActionCode>
                                            </xsl:if>
                                            <xsl:if test="Name">
                                                <pfx12:Name>
                                                    <xsl:value-of select="Name"/>
                                                </pfx12:Name>
                                            </xsl:if>
                                            <xsl:choose>
                                                <xsl:when test="contains($Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario, 'SIMCardCoupling.SecondOrder')&#xA;and&#xA;$Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101'">
                                                    <xsl:if test="../../ListOfRootItemAttribute/RootItemAttribute[Name=$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/Order/Attributes/NumberInventory/IMSI2]/Value">
                                                        <pfx12:Value>
                                                            <xsl:value-of select="../../ListOfRootItemAttribute/RootItemAttribute[Name=$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/Order/Attributes/NumberInventory/IMSI2]/Value"/>
                                                        </pfx12:Value>
                                                    </xsl:if>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:if test="Value">
                                                        <pfx12:Value>
                                                            <xsl:value-of select="Value"/>
                                                        </pfx12:Value>
                                                    </xsl:if>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:if test="PreviousValue">
                                                <pfx12:OldValue>
                                                    <xsl:value-of select="PreviousValue"/>
                                                </pfx12:OldValue>
                                            </xsl:if>
                                        </pfx11:Attribute>
                                    </xsl:for-each>
                                    <xsl:if test="string-length(DonorOperator2) > 0&#xA;and $Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = $_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/Order/CustomerType/CBU">
                                        <pfx11:Attribute>
                                            <pfx12:ActionCode>
                                                <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/Order/ActionNew"/>
                                            </pfx12:ActionCode>
                                            <pfx12:Name>
                                                <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/Order/Attributes/MNP/DonorOperator"/>
                                            </pfx12:Name>
                                            <xsl:if test="$RootItem/DonorOperator2">
                                                <pfx12:Value>
                                                    <xsl:value-of select="$RootItem/DonorOperator2"/>
                                                </pfx12:Value>
                                            </xsl:if>
                                            <xsl:if test="$RootItem/DonorOperator2">
                                                <pfx12:OldValue>
                                                    <xsl:value-of select="$RootItem/DonorOperator2"/>
                                                </pfx12:OldValue>
                                            </xsl:if>
                                        </pfx11:Attribute>
                                    </xsl:if>
                                    <xsl:if test="string-length(RecipientOperator) > 0&#xA;and $Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = $_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/Order/CustomerType/CBU">
                                        <pfx11:Attribute>
                                            <pfx12:ActionCode>
                                                <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/Order/ActionNew"/>
                                            </pfx12:ActionCode>
                                            <pfx12:Name>
                                                <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/Order/Attributes/MNP/RecipientOperator"/>
                                            </pfx12:Name>
                                            <xsl:if test="$RootItem/RecipientOperator">
                                                <pfx12:Value>
                                                    <xsl:value-of select="$RootItem/RecipientOperator"/>
                                                </pfx12:Value>
                                            </xsl:if>
                                            <xsl:if test="$RootItem/RecipientOperator">
                                                <pfx12:OldValue>
                                                    <xsl:value-of select="$RootItem/RecipientOperator"/>
                                                </pfx12:OldValue>
                                            </xsl:if>
                                        </pfx11:Attribute>
                                    </xsl:if>
                                    <xsl:if test="string-length($GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*) > 0">
                                        <pfx11:Attribute>
                                            <pfx12:Name>
                                                <xsl:value-of select="'Algorithm'"/>
                                            </pfx12:Name>
                                            <pfx12:Value>
                                                <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Algorithm"/>
                                            </pfx12:Value>
                                            <xsl:if test="string-length($GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*) > 0">
                                                <xsl:if test="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Algorithm">
                                                    <pfx12:OldValue>
                                                        <xsl:value-of select="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Algorithm"/>
                                                    </pfx12:OldValue>
                                                </xsl:if>
                                            </xsl:if>
                                        </pfx11:Attribute>
                                        <pfx11:Attribute>
                                            <pfx12:Name>
                                                <xsl:value-of select="'Security Key For GSM'"/>
                                            </pfx12:Name>
                                            <pfx12:Value>
                                                <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Key"/>
                                            </pfx12:Value>
                                            <xsl:choose>
                                                <xsl:when test="string-length($GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*) > 0">
                                                    <xsl:if test="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Key">
                                                        <pfx12:OldValue>
                                                            <xsl:value-of select="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Key"/>
                                                        </pfx12:OldValue>
                                                    </xsl:if>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:if test="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Key">
                                                        <pfx12:OldValue>
                                                            <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Key"/>
                                                        </pfx12:OldValue>
                                                    </xsl:if>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </pfx11:Attribute>
                                        <pfx11:Attribute>
                                            <pfx12:Name>
                                                <xsl:value-of select="'SIM Card Profile'"/>
                                            </pfx12:Name>
                                            <pfx12:Value>
                                                <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:SIMCardProfile"/>
                                            </pfx12:Value>
                                            <xsl:if test="string-length($GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*) > 0">
                                                <xsl:if test="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:SIMCardProfile">
                                                    <pfx12:OldValue>
                                                        <xsl:value-of select="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:SIMCardProfile"/>
                                                    </pfx12:OldValue>
                                                </xsl:if>
                                            </xsl:if>
                                        </pfx11:Attribute>
                                    </xsl:if>
                                </pfx11:ListOfAttribute>
                            </ns5:Product>
                        </xsl:for-each>
                        <!--Campaign Line-->
                        <xsl:for-each select="$RootCampaignItem">
                            <ns5:Product>
                                <xsl:if test="Action">
                                    <pfx11:ActionCode>
                                        <xsl:value-of select="Action"/>
                                    </pfx11:ActionCode>
                                </xsl:if>
                                <xsl:if test="ProductCatalogId">
                                    <pfx11:ProductCatalogId>
                                        <xsl:value-of select="ProductCatalogId"/>
                                    </pfx11:ProductCatalogId>
                                </xsl:if>
                                <xsl:if test="ItemId">
                                    <pfx11:OrderItemId>
                                        <xsl:value-of select="ItemId"/>
                                    </pfx11:OrderItemId>
                                </xsl:if>
                                <xsl:if test="IntegrationId">
                                    <pfx11:IntegrationId>
                                        <xsl:value-of select="IntegrationId"/>
                                    </pfx11:IntegrationId>
                                </xsl:if>
                                <xsl:if test="ParentIntegrationId">
                                    <pfx11:ParentIntegrationId>
                                        <xsl:value-of select="ParentIntegrationId"/>
                                    </pfx11:ParentIntegrationId>
                                </xsl:if>
                                <xsl:if test="ComponentType">
                                    <pfx11:ComponentType>
                                        <xsl:value-of select="ComponentType"/>
                                    </pfx11:ComponentType>
                                </xsl:if>
                                <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,StartDate)">
                                    <pfx11:StartDate>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,StartDate)"/>
                                    </pfx11:StartDate>
                                </xsl:if>
                                <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,EndDate)">
                                    <pfx11:EndDate>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,EndDate)"/>
                                    </pfx11:EndDate>
                                </xsl:if>
                                <pfx11:ListOfProperties>
                                    <pfx11:Property>
                                        <pfx11:Name>
                                            <xsl:value-of select="'IMSI'"/>
                                        </pfx11:Name>
                                        <xsl:choose>
                                            <xsl:when test="$Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102'">
                                                <xsl:choose>
                                                    <xsl:when test="contains($Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario, 'SIMCardCoupling.SecondOrder')">
                                                        <xsl:if test="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSISecondary">
                                                            <pfx11:Value>
                                                                <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSISecondary"/>
                                                            </pfx11:Value>
                                                        </xsl:if>
                                                    </xsl:when>
                                                    <xsl:when test="string-length($GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSI) > 0">
                                                        <xsl:if test="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSI">
                                                            <pfx11:Value>
                                                                <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSI"/>
                                                            </pfx11:Value>
                                                        </xsl:if>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:if test="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSISecondary">
                                                            <pfx11:Value>
                                                                <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSISecondary"/>
                                                            </pfx11:Value>
                                                        </xsl:if>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="IMSI">
                                                    <pfx11:Value>
                                                        <xsl:value-of select="IMSI"/>
                                                    </pfx11:Value>
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx11:Property>
                                    <pfx11:Property>
                                        <pfx11:Name>
                                            <xsl:value-of select="'PreviousImsi'"/>
                                        </pfx11:Name>
                                        <xsl:choose>
                                            <xsl:when test="string-length(PreviousIMSI) > 0&#xA;{-- $RootItem/ActionType = '103' --}">
                                                <xsl:if test="PreviousIMSI">
                                                    <pfx11:Value>
                                                        <xsl:value-of select="PreviousIMSI"/>
                                                    </pfx11:Value>
                                                </xsl:if>
                                            </xsl:when>
                                            <xsl:when test="string-length(PreviousIMSI) = 0 and &#xA;string-length($GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSI) > 0">
                                                <pfx11:Value>
                                                    <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns7:Response/ns7:IMSI"/>
                                                </pfx11:Value>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="IMSI">
                                                    <pfx11:Value>
                                                        <xsl:value-of select="IMSI"/>
                                                    </pfx11:Value>
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx11:Property>
                                </pfx11:ListOfProperties>
                                <pfx11:ListOfProduct>
                                    <xsl:for-each select="ListOfChildItem/ChildItem">
                                        <pfx11:Product>
                                            <xsl:if test="Action">
                                                <pfx11:ActionCode>
                                                    <xsl:value-of select="Action"/>
                                                </pfx11:ActionCode>
                                            </xsl:if>
                                            <xsl:if test="ProductCatalogId">
                                                <pfx11:ProductCatalogId>
                                                    <xsl:value-of select="ProductCatalogId"/>
                                                </pfx11:ProductCatalogId>
                                            </xsl:if>
                                            <xsl:if test="ItemId">
                                                <pfx11:OrderItemId>
                                                    <xsl:value-of select="ItemId"/>
                                                </pfx11:OrderItemId>
                                            </xsl:if>
                                            <xsl:if test="IntegrationId">
                                                <pfx11:IntegrationId>
                                                    <xsl:value-of select="IntegrationId"/>
                                                </pfx11:IntegrationId>
                                            </xsl:if>
                                            <xsl:if test="ParentIntegrationId">
                                                <pfx11:ParentIntegrationId>
                                                    <xsl:value-of select="ParentIntegrationId"/>
                                                </pfx11:ParentIntegrationId>
                                            </xsl:if>
                                            <xsl:if test="ComponentType">
                                                <pfx11:ComponentType>
                                                    <xsl:value-of select="ComponentType"/>
                                                </pfx11:ComponentType>
                                            </xsl:if>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,StartDate)">
                                                <pfx11:StartDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,StartDate)"/>
                                                </pfx11:StartDate>
                                            </xsl:if>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,EndDate)">
                                                <pfx11:EndDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,EndDate)"/>
                                                </pfx11:EndDate>
                                            </xsl:if>
                                        </pfx11:Product>
                                    </xsl:for-each>
                                </pfx11:ListOfProduct>
                                <pfx11:ListOfAttribute>
                                    <xsl:if test="string-length($GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*) > 0">
                                        <pfx11:Attribute>
                                            <pfx12:Name>
                                                <xsl:value-of select="'Algorithm'"/>
                                            </pfx12:Name>
                                            <pfx12:Value>
                                                <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Algorithm"/>
                                            </pfx12:Value>
                                            <xsl:if test="string-length($GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*) > 0">
                                                <xsl:if test="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Algorithm">
                                                    <pfx12:OldValue>
                                                        <xsl:value-of select="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Algorithm"/>
                                                    </pfx12:OldValue>
                                                </xsl:if>
                                            </xsl:if>
                                        </pfx11:Attribute>
                                        <pfx11:Attribute>
                                            <pfx12:Name>
                                                <xsl:value-of select="'Security Key For GSM'"/>
                                            </pfx12:Name>
                                            <pfx12:Value>
                                                <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Key"/>
                                            </pfx12:Value>
                                            <xsl:choose>
                                                <xsl:when test="string-length($GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*) > 0">
                                                    <xsl:if test="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Key">
                                                        <pfx12:OldValue>
                                                            <xsl:value-of select="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Key"/>
                                                        </pfx12:OldValue>
                                                    </xsl:if>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:if test="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Key">
                                                        <pfx12:OldValue>
                                                            <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:Key"/>
                                                        </pfx12:OldValue>
                                                    </xsl:if>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </pfx11:Attribute>
                                        <pfx11:Attribute>
                                            <pfx12:Name>
                                                <xsl:value-of select="'SIM Card Profile'"/>
                                            </pfx12:Name>
                                            <pfx12:Value>
                                                <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:SIMCardProfile"/>
                                            </pfx12:Value>
                                            <xsl:if test="string-length($GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*) > 0">
                                                <xsl:if test="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:SIMCardProfile">
                                                    <pfx12:OldValue>
                                                        <xsl:value-of select="$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:SIMCardProfile"/>
                                                    </pfx12:OldValue>
                                                </xsl:if>
                                            </xsl:if>
                                        </pfx11:Attribute>
                                    </xsl:if>
                                </pfx11:ListOfAttribute>
                            </ns5:Product>
                        </xsl:for-each>
                    </ns5:ListOfProduct>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name = 'ProvisioningManagement.PRF.CreateMSOrder'">
                        <xsl:variable name="MobileSignatureProduct" select="$RootItem/ListOfChildItem/ChildItem[ProductCatalogId = '9069' or ProductClass = 'MOBILE SIGNATURE CLASS']"/>
                        <ns5:MobileSignature>
                            <xsl:variable name="PrimaryAddressId" select="$Order/ListOfBillingAccount/BillingAccount[1]/BillAcctAddressId"/>
                            <ns8:MobileSignatureData>
                                <ns8:MsAction>
                                    <xsl:value-of select="$MobileSignatureAction/MobileSignatureAction/MsAction"/>
                                </ns8:MsAction>
                                <xsl:for-each select="$RootItem">
                                    <ns8:ListOfMsisdn>
                                        <xsl:if test="MSISDN">
                                            <ns8:Msisdn>
                                                <xsl:value-of select="MSISDN"/>
                                            </ns8:Msisdn>
                                        </xsl:if>
                                        <xsl:if test="IMSI">
                                            <ns8:Imsi>
                                                <xsl:value-of select="IMSI"/>
                                            </ns8:Imsi>
                                        </xsl:if>
                                        <xsl:if test="ICCID">
                                            <ns8:Icci>
                                                <xsl:value-of select="ICCID"/>
                                            </ns8:Icci>
                                        </xsl:if>
                                        <xsl:choose>
                                            <xsl:when test="string-length(ListOfRootItemAttribute/RootItemAttribute[Name='DLKEY1']/Value)>0">
                                                <xsl:if test="ListOfRootItemAttribute/RootItemAttribute[Name='DLKEY1']/Value">
                                                    <ns8:OtaKey>
                                                        <xsl:value-of select="ListOfRootItemAttribute/RootItemAttribute[Name='DLKEY1']/Value"/>
                                                    </ns8:OtaKey>
                                                </xsl:if>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:DLKey1">
                                                    <ns8:OtaKey>
                                                        <xsl:value-of select="$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns7:DLKey1"/>
                                                    </ns8:OtaKey>
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                        <ns8:TraffCode>
                                            <xsl:value-of select="substring($Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[$PrimaryAddressId=AddressId]/AddressZIP, 1, 2)"/>
                                        </ns8:TraffCode>
                                        <xsl:if test="ServiceType">
                                            <ns8:VfService>
                                                <xsl:value-of select="ServiceType"/>
                                            </ns8:VfService>
                                        </xsl:if>
                                        <xsl:if test="ServiceType">
                                            <ns8:ServiceType>
                                                <xsl:value-of select="ServiceType"/>
                                            </ns8:ServiceType>
                                        </xsl:if>
                                        <xsl:if test="current()/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot;]/ProductCatalogId">
                                            <ns8:TariffProductID>
                                                <xsl:value-of select="current()/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot;]/ProductCatalogId"/>
                                            </ns8:TariffProductID>
                                        </xsl:if>
                                        <xsl:if test="CustAcctCode">
                                            <ns8:FirmId>
                                                <xsl:value-of select="CustAcctCode"/>
                                            </ns8:FirmId>
                                        </xsl:if>
                                        <xsl:choose>
                                            <xsl:when test="current()/ListOfRootItemAttribute/RootItemAttribute[Name='FirmNameFlag ']/Value ='Y'">
                                                <xsl:if test="$Order/ListOfCustomerAccount/CustomerAccount[1]/CustAcctLastName">
                                                    <ns8:FirmName>
                                                        <xsl:value-of select="$Order/ListOfCustomerAccount/CustomerAccount[1]/CustAcctLastName"/>
                                                    </ns8:FirmName>
                                                </xsl:if>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <ns8:FirmName>
                                                    <xsl:value-of select="'NULL'"/>
                                                </ns8:FirmName>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                        <xsl:choose>
                                            <xsl:when test="$Order/ListOfCustomerAccount/CustomerAccount[1]/CustAcctType=&quot;101&quot;">
                                                <ns8:CustomerType>
                                                    <xsl:value-of select="&quot;EBU&quot;"/>
                                                </ns8:CustomerType>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <ns8:CustomerType>
                                                    <xsl:value-of select="&quot;CBU&quot;"/>
                                                </ns8:CustomerType>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </ns8:ListOfMsisdn>
                                </xsl:for-each>
                            </ns8:MobileSignatureData>
                            <ns8:MobileSignatureContact>
                                <xsl:if test="$RootItem/ListOfRootItemContact/RootItemContact[1]/ContactPersonalId">
                                    <ns8:Tckn>
                                        <xsl:value-of select="$RootItem/ListOfRootItemContact/RootItemContact[1]/ContactPersonalId"/>
                                    </ns8:Tckn>
                                </xsl:if>
                                <ns8:Name>
                                    <xsl:value-of select="$RootItem/ListOfRootItemContact/RootItemContact[1]/ContactFirstName"/>
                                </ns8:Name>
                                <ns8:LastName>
                                    <xsl:value-of select="$RootItem/ListOfRootItemContact/RootItemContact[1]/ContactLastname"/>
                                </ns8:LastName>
                                <xsl:if test="string-length($RootItem/ListOfRootItemContact/RootItemContact[1]/ContactBirthDate)>0">
                                    <ns8:BirthDate>
                                        <xsl:value-of select="tib:parse-date($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/Date,$RootItem/ListOfRootItemContact/RootItemContact[1]/ContactBirthDate)"/>
                                    </ns8:BirthDate>
                                </xsl:if>
                                <ns8:BirthPlace>
                                    <xsl:value-of select="$RootItem/ListOfRootItemContact/RootItemContact[1]/ContactBirthPlace"/>
                                </ns8:BirthPlace>
                                <ns8:Gender>
                                    <xsl:value-of select="$RootItem/ListOfRootItemContact/RootItemContact[1]/ContactGender"/>
                                </ns8:Gender>
                                <ns8:FatherName>
                                    <xsl:value-of select="$RootItem/ListOfRootItemContact/RootItemContact[1]/ContactFatherName"/>
                                </ns8:FatherName>
                                <ns8:MotherName>
                                    <xsl:value-of select="$RootItem/ListOfRootItemContact/RootItemContact[1]/ContactMotherName"/>
                                </ns8:MotherName>
                                <xsl:if test="$Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[$PrimaryAddressId=AddressId]/AddressFullAddress">
                                    <ns8:Address>
                                        <xsl:value-of select="$Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[$PrimaryAddressId=AddressId]/AddressFullAddress"/>
                                    </ns8:Address>
                                </xsl:if>
                                <xsl:if test="$Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[$PrimaryAddressId=AddressId]/AddressZIP">
                                    <ns8:PostalCode>
                                        <xsl:value-of select="$Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[$PrimaryAddressId=AddressId]/AddressZIP"/>
                                    </ns8:PostalCode>
                                </xsl:if>
                                <ns8:Email>
                                    <xsl:value-of select="$MobileSignatureProduct/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Email Address']/Value"/>
                                </ns8:Email>
                                <ns8:HomePhone>
                                    <xsl:value-of select="$RootItem/ListOfRootItemContact/RootItemContact[1]/ContactPhone"/>
                                </ns8:HomePhone>
                                <ns8:WorkPhone>
                                    <xsl:value-of select="$RootItem/ListOfRootItemContact/RootItemContact[1]/ContactWorkPhone"/>
                                </ns8:WorkPhone>
                            </ns8:MobileSignatureContact>
                        </ns5:MobileSignature>
                    </xsl:if>
                    <ns5:DataSharing>
                        <xsl:if test="string-length($RootItem/DataBundlePartNumML)>0">
                            <xsl:if test="$RootItem/DataBundlePartNumML">
                                <ns10:MainLineDataBundle>
                                    <xsl:value-of select="$RootItem/DataBundlePartNumML"/>
                                </ns10:MainLineDataBundle>
                            </xsl:if>
                        </xsl:if>
                        <xsl:if test="string-length($RootItem/MSISDNML)>0">
                            <ns10:MainLineMsisdn>
                                <xsl:value-of select="$RootItem/MSISDNML"/>
                            </ns10:MainLineMsisdn>
                        </xsl:if>
                        <xsl:if test="string-length($RootItem/ActionML)>0">
                            <ns10:MainLineAction>
                                <xsl:value-of select="$RootItem/ActionML"/>
                            </ns10:MainLineAction>
                        </xsl:if>
                        <xsl:choose>
                            <xsl:when test="count($RootItem/ListOfChildItem/ChildItem/ListOfDataSharingDetail/DataSharingDetail)>0">
                                <xsl:for-each select="$RootItem/ListOfChildItem/ChildItem/ListOfDataSharingDetail/DataSharingDetail">
                                    <ns10:ListOfSublines>
                                        <xsl:if test="current()/MSISDN">
                                            <ns10:SubLineMsisdn>
                                                <xsl:value-of select="current()/MSISDN"/>
                                            </ns10:SubLineMsisdn>
                                        </xsl:if>
                                        <xsl:if test="current()/SharedDataValue">
                                            <ns10:SubLineSharedAmount>
                                                <xsl:value-of select="current()/SharedDataValue"/>
                                            </ns10:SubLineSharedAmount>
                                        </xsl:if>
                                    </ns10:ListOfSublines>
                                </xsl:for-each>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:for-each select="$GetMainLineSharedData/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/ns9:Response/ns9:SharedDataBundleList/ns9:ShareDataBundle">
                                    <ns10:ListOfSublines>
                                        <xsl:if test="current()/ns9:SubLine">
                                            <ns10:SubLineMsisdn>
                                                <xsl:value-of select="current()/ns9:SubLine"/>
                                            </ns10:SubLineMsisdn>
                                        </xsl:if>
                                        <xsl:choose>
                                            <xsl:when test="$RootItem/ListOfChildItem/ChildItem[ProductCatalogId='1113']/Action=('Deleted','Suspend')">
                                                <ns10:SubLineSharedAmount>
                                                    <xsl:value-of select="0"/>
                                                </ns10:SubLineSharedAmount>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="current()/ns9:SharingLimit">
                                                    <ns10:SubLineSharedAmount>
                                                        <xsl:value-of select="current()/ns9:SharingLimit"/>
                                                    </ns10:SubLineSharedAmount>
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </ns10:ListOfSublines>
                                </xsl:for-each>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns5:DataSharing>
                    <ns5:ListOfAttribute>
                        <ns5:Attribute>
                            <pfx12:Name>
                                <xsl:value-of select="'MediaType'"/>
                            </pfx12:Name>
                            <pfx12:Value>
                                <xsl:value-of select="$Order/ListOfBillingAccount/BillingAccount[$RootItem/BillAcctCode = BillAcctCode]/ListOfInvoiceProfile/InvoiceProfile[1]/MediaType"/>
                            </pfx12:Value>
                        </ns5:Attribute>
                        <ns5:Attribute>
                            <pfx12:Name>
                                <xsl:value-of select="'OrderOMSourceSystem'"/>
                            </pfx12:Name>
                            <pfx12:Value>
                                <xsl:value-of select="$Order/OrderOMSourceSystem"/>
                            </pfx12:Value>
                        </ns5:Attribute>
                        <ns5:Attribute>
                            <pfx12:Name>
                                <xsl:value-of select="'BillingAccountCode'"/>
                            </pfx12:Name>
                            <xsl:if test="$RootItem/BillAcctCode">
                                <pfx12:Value>
                                    <xsl:value-of select="$RootItem/BillAcctCode"/>
                                </pfx12:Value>
                            </xsl:if>
                            <xsl:if test="$Order/ListOfRootItem/RootItem[Action = 'Deleted' and ComponentSubType = 'MOBILE' and MSISDN = $RootItem/MSISDN]/BillAcctCode">
                                <pfx12:OldValue>
                                    <xsl:value-of select="$Order/ListOfRootItem/RootItem[Action = 'Deleted' and ComponentSubType = 'MOBILE' and MSISDN = $RootItem/MSISDN]/BillAcctCode"/>
                                </pfx12:OldValue>
                            </xsl:if>
                        </ns5:Attribute>
                        <ns5:Attribute>
                            <pfx12:Name>
                                <xsl:value-of select="'AutomaticOrder'"/>
                            </pfx12:Name>
                            <xsl:choose>
                                <xsl:when test="$Order/BatchOrderCreation='Y'">
                                    <pfx12:Value>
                                        <xsl:value-of select="true()"/>
                                    </pfx12:Value>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx12:Value>
                                        <xsl:value-of select="false()"/>
                                    </pfx12:Value>
                                </xsl:otherwise>
                            </xsl:choose>
                        </ns5:Attribute>
                        <xsl:variable name="var3" select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/CBPID"/>
                        <xsl:variable name="var4" select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/CBPID"/>
                        <xsl:if test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/CBPID]/Value) > 0">
                            <ns5:Attribute>
                                <pfx12:ActionCode>
                                    <xsl:value-of select="&quot;New&quot;"/>
                                </pfx12:ActionCode>
                                <pfx12:Name>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/CBPID"/>
                                </pfx12:Name>
                                <xsl:variable name="var" select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/CBPID"/>
                                <xsl:variable name="var2" select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/CBPID"/>
                                <pfx12:Value>
                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/CBPID]/Value"/>
                                </pfx12:Value>
                            </ns5:Attribute>
                        </xsl:if>
                        <xsl:for-each select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key, $_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/Billing/GetCUGMembers_MSISDNList)]">
                            <ns5:Attribute>
                                <pfx12:Name>
                                    <xsl:value-of select="'CosbyMemberMSISDN'"/>
                                </pfx12:Name>
                                <pfx12:Value>
                                    <xsl:value-of select="Value"/>
                                </pfx12:Value>
                            </ns5:Attribute>
                        </xsl:for-each>
                    </ns5:ListOfAttribute>
                </pfx6:ProvisioningOrder>
            </pfx6:Request>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>554</pd:x>
        <pd:y>279</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Null-1">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>815</pd:x>
        <pd:y>78</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Null-2">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>428</pd:x>
        <pd:y>565</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Parse-XML-OSMOrder">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>116</pd:x>
        <pd:y>145</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>false</validateOutput>
            <term ref="pfx13:OSMOrder"/>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Start/Input/pfx:RequestEAI/pfx:Body/*" element="ns:Request"/>
        </pd:coercions>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:XMLMessage/*[1]"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="UpsertGlobalData">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1263</pd:x>
        <pd:y>448</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/TO2FGlobalData/UpsertGlobalData.process</processName>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$GetPenalty/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*" type="ns13:Response"/>
        </pd:coercions>
        <pd:inputBindings>
            <Input>
                <OrderId>
                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                </OrderId>
                <ListOfKeyValue>
                    <xsl:for-each select="$GetPenalty/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns13:Campaign">
                        <KeyValue>
                            <Key>
                                <xsl:value-of select="concat(&quot;Amount&quot;, &quot;_&quot;, current()/ns13:CampaignCode)"/>
                            </Key>
                            <Value>
                                <xsl:value-of select="current()/ns13:Amount"/>
                            </Value>
                        </KeyValue>
                        <KeyValue>
                            <Key>
                                <xsl:value-of select="concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/ns13:CampaignCode)"/>
                            </Key>
                            <Value>
                                <xsl:value-of select="current()/ns13:PenaltyMethod"/>
                            </Value>
                        </KeyValue>
                        <KeyValue>
                            <Key>
                                <xsl:value-of select="concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/ns13:CampaignCode)"/>
                            </Key>
                            <Value>
                                <xsl:value-of select="current()/ns13:PenaltyCalculationMode"/>
                            </Value>
                        </KeyValue>
                        <xsl:if test="count(current()/ns13:PenaltyItems)>0">
                            <KeyValue>
                                <Key>
                                    <xsl:value-of select="concat(&quot;PenaltySource&quot;, &quot;_&quot;, current()/ns13:CampaignCode)"/>
                                </Key>
                                <Value>
                                    <xsl:value-of select="'PTSM'"/>
                                </Value>
                            </KeyValue>
                        </xsl:if>
                    </xsl:for-each>
                </ListOfKeyValue>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetParentProductCatalogId">
        <pd:type>com.tibco.plugin.jms.JMSQueueRequestReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueRequestReplyActivity</pd:resourceType>
        <pd:x>960</pd:x>
        <pd:y>402</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>%%Domains/OrderManagement/OrderComponent/Constants/AuxQueues/GetAssetList_v2%%</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx5:ServiceRequest"/>
            <OutDataxsdString ref="ns22:ServiceReply"/>
        </config>
        <pd:inputBindings>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="RootItem" select="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem"/>
            <ns2:ActivityInput>
                <JMSExpiration>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestJMSMsgExpiration"/>
                </JMSExpiration>
                <requestTimeout>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestTimeout"/>
                </requestTimeout>
                <Body>
                    <pfx5:ServiceRequest>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx5:Header>
                                <xsl:if test="ns3:RequestId">
                                    <ns3:RequestId>
                                        <xsl:value-of select="ns3:RequestId"/>
                                    </ns3:RequestId>
                                </xsl:if>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/Reply/Now"/>
                                </ns3:ReplyExpected>
                                <ns3:QoS>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/QOS/Reliable"/>
                                </ns3:QoS>
                                <xsl:if test="ns3:Schedule">
                                    <ns3:Schedule>
                                        <xsl:value-of select="ns3:Schedule"/>
                                    </ns3:Schedule>
                                </xsl:if>
                                <xsl:if test="ns3:CorrelationId">
                                    <ns3:CorrelationId>
                                        <xsl:value-of select="ns3:CorrelationId"/>
                                    </ns3:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns3:Priority">
                                    <ns3:Priority>
                                        <xsl:value-of select="ns3:Priority"/>
                                    </ns3:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <xsl:if test="ns3:Password">
                                            <ns3:Password>
                                                <xsl:value-of select="ns3:Password"/>
                                            </ns3:Password>
                                        </xsl:if>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns3:ProxySystem">
                                    <ns3:ProxySystem>
                                        <xsl:value-of select="ns3:ProxySystem"/>
                                    </ns3:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns3:ForceSimulate">
                                    <ns3:ForceSimulate>
                                        <xsl:value-of select="ns3:ForceSimulate"/>
                                    </ns3:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx5:Header>
                        </xsl:for-each>
                        <pfx5:Body>
                            <pfx17:Request>
                                <pfx17:MSISDN>
                                    <xsl:value-of select="$RootItem/ListOfChildItem/ChildItem/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Leader MSISDN']/Value"/>
                                </pfx17:MSISDN>
                            </pfx17:Request>
                        </pfx5:Body>
                    </pfx5:ServiceRequest>
                </Body>
            </ns2:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Coercion">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>169</pd:x>
        <pd:y>281</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence/>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*" element="pfx4:Order"/>
        </pd:coercions>
        <pd:inputBindings>
            <root/>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS Queue Sender</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPRFTransactionCodes</pd:from>
        <pd:to>Null</pd:to>
        <pd:xpathDescription>RefDataFound</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionCode)&gt;0 and
string-length($GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionType)&gt;0 and
not(
($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem[1]/ListOfChildItem/ChildItem[ProductCatalogId='1113']/ActionML='RedTariffUpgrade'
or
string-length($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem[1]/ListOfChildItem/ChildItem[ProductCatalogId='1113' and Action=('Deleted','Suspend')]/Action)!=0
)
and
count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem[1]/ListOfChildItem/ChildItem/ListOfDataSharingDetail/DataSharingDetail)=0
)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse-XML-OSMOrder</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPRFTransactionCodes</pd:from>
        <pd:to>Fail Order Component</pd:to>
        <pd:xpathDescription>RefDataNotFound</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Fail Order Component</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>GetICCIDDetails</pd:to>
        <pd:xpathDescription>Needs to retrive ICCID Info</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfCustomerAccount/CustomerAccount[../../ListOfRootItem/RootItem/CustAcctCode = CustAcctCode and CustAcctType = '102'])&gt;0
and
(
	(
		$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionType = 'CRE'
		and
		$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionCode = ('402','500','504','099','404')
	)
	or
	(
		$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionType = 'DEL'
		and
		$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionCode = ('150','900','901','098')
	)
	or
	(
		$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionType = 'DELPOOL'
		and
		$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionCode = '993'
	)
	or
	(
		$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionType = 'MOD'
		and
		$GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionCode = ('110','202','220','230','301','351','54','741')
	)
)
and
not(contains($Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name,'UpdateBillCycle'))</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>GetGlobalData</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetICCIDDetails</pd:from>
        <pd:to>GetGlobalData</pd:to>
        <pd:xpathDescription>Success and no OLD</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode = $_globalVariables/ns1:GlobalVariables/ErrorCodes/Success
and
($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[ComponentSubType = 'MOBILE'  or ProductCatalogId = '18400']/ICCID = $Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'ICCI']/PreviousValue
or count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'ICCI' and string-length(PreviousValue) =0]) &gt; 0
)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetICCIDDetails</pd:from>
        <pd:to>Null-1</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Fail-Order-Component-1</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Calculate MSAction</pd:from>
        <pd:to>GetPRFTransactionCodes</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetICCIDDetails</pd:from>
        <pd:to>GetICCIDDetails-Old</pd:to>
        <pd:xpathDescription>Success need OLD</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$GetICCIDDetails/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode = $_globalVariables/ns1:GlobalVariables/ErrorCodes/Success
and
$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[CustAcctCode = ../../ListOfCustomerAccount/CustomerAccount[CustAcctType = '102']/CustAcctCode and (ComponentSubType = 'MOBILE'  or ProductCatalogId = '18400')][1]/ICCID !=$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'ICCI']/PreviousValue
and
count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*[1]/ListOfRootItem/RootItem[CustAcctCode = ../../ListOfCustomerAccount/CustomerAccount[CustAcctType = '102']/CustAcctCode and (ComponentSubType = 'MOBILE'  or ProductCatalogId = '18400')][1]/ListOfRootItemAttribute/RootItemAttribute[Name = 'ICCI' and string-length(PreviousValue)!=0]) &gt; 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetICCIDDetails-Old</pd:from>
        <pd:to>GetGlobalData</pd:to>
        <pd:xpathDescription>Success</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$GetICCIDDetails-Old/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode = $_globalVariables/ns1:GlobalVariables/ErrorCodes/Success</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPRFTransactionCodes</pd:from>
        <pd:to>GetMainLineSharedData</pd:to>
        <pd:xpathDescription>Get main Line Share</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionCode)&gt;0 and
string-length($GetPRFTransactionCodes/GetPRFTransactionCodesOutput/TransactionType)&gt;0 and
($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem[1]/ListOfChildItem/ChildItem[ProductCatalogId='1113']/ActionML='RedTariffUpgrade'
or
string-length($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem[1]/ListOfChildItem/ChildItem[ProductCatalogId='1113' and Action=('Deleted','Suspend')]/Action)!=0
)
and
count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem[1]/ListOfChildItem/ChildItem/ListOfDataSharingDetail/DataSharingDetail)=0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetMainLineSharedData</pd:from>
        <pd:to>Null</pd:to>
        <pd:xpathDescription>Success</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$GetMainLineSharedData/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode = $_globalVariables/ns1:GlobalVariables/ErrorCodes/Success</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetMainLineSharedData</pd:from>
        <pd:to>Null-2</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetICCIDDetails-Old</pd:from>
        <pd:to>Fail-Order-Component-1</pd:to>
        <pd:xpathDescription>Otherwise</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Fail-Order-Component-2</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetGlobalData</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:xpathDescription>Success</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$GetGlobalData/Output/ErrorCode = $_globalVariables/ns1:GlobalVariables/ErrorCodes/Success
or
$GetGlobalData/Output/ErrorCode ='-106'</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetGlobalData</pd:from>
        <pd:to>Fail-Order-Component-1</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>GetPenalty</pd:to>
        <pd:xpathDescription>GetPenalty</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$Parse-XML-OSMOrder/OSMOrder/CategoryAction=('ACT_FRO','CLO_FRO','LIM_FRO','ACT_CAN','ACT_TER','CLO_CAN','CLO_FRO_LSB','LIM_CAN','MOD_OPT','MOD_PLIST')
and
(
	({-- Campaigns --}
	count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[not(ProductCatalogId = ('5000','5005','11001','60007')) and not(ComponentType='HANDSET') and Action=('Deleted','Suspend') and ComponentGroup='CAMP']) &gt; 0
	or
	count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[not(ProductCatalogId = ('5000','5005','11001','60007')) and Action=('Deleted','Suspend') and ComponentGroup=('CAMP')]) &gt; 0
	)
or
	({-- Bundle Promotions --}
	count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[Action=('Deleted','Suspend') and ComponentGroup='CAMP PROMO']) &gt; 0
	)
)
and
(
$Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101'
)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPenalty</pd:from>
        <pd:to>UpsertGlobalData</pd:to>
        <pd:xpathDescription>With Penalty</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$GetPenalty/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode = $_globalVariables/ns1:GlobalVariables/ErrorCodes/Success
and
string-length($GetPenalty/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns13:Campaign[1]/ns13:CampaignCode) &gt; 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>UpsertGlobalData</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPenalty</pd:from>
        <pd:to>Fail-Order-Component-2</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPenalty</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:xpathDescription>No Penalty</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$GetPenalty/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Header/ns4:ResponseCode = $_globalVariables/ns1:GlobalVariables/ErrorCodes/Success
and
string-length($GetPenalty/ns2:ActivityOutput/Body/ns22:ServiceReply/ns22:Body/*/ns13:Campaign[1]/ns13:CampaignCode) = 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-1</pd:from>
        <pd:to>Fail-Order-Component-1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-2</pd:from>
        <pd:to>Fail-Order-Component-2</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetGlobalData</pd:from>
        <pd:to>GetParentProductCatalogId</pd:to>
        <pd:xpathDescription>Cosby</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/CustomerCare/GetAssetList_CosbyGroupId]/Value)=0
and
(
	(
		count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ComponentGroup = 'TARIFF' ]/ListOfKeyFeature/KeyFeature[Feature = 'Sharable Bundle' and FeatureValue = 'Y'])&gt;0
		or
		count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ComponentGroup = 'SRV' and ComponentType = 'SHARING' and ComponentSubType = ('SUBLINE','DATALINE')])&gt;0
	)
	and 
	count($Parse-XML-OSMOrder/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ComponentGroup = 'TARIFF' and ListOfKeyFeature/KeyFeature/Feature = 'Sharable Bundle']/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Group ID']/Value) = 0
)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetParentProductCatalogId</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse-XML-OSMOrder</pd:from>
        <pd:to>Coercion</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Coercion</pd:from>
        <pd:to>GetPRFTransactionCodes</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Coercion</pd:from>
        <pd:to>Calculate MSAction</pd:to>
        <pd:xpathDescription>MobileSignature</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($Parse-XML-OSMOrder/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ProductCatalogId = '9069' or ProductClass='MOBILE SIGNATURE CLASS' ]/Action)&gt;0</pd:xpath>
    </pd:transition>
</pd:ProcessDefinition>