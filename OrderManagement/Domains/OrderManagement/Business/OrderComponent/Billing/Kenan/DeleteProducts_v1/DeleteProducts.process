<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:ns="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" xmlns:pfx5="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" xmlns:pfx31="http://vodafone.com.tr/ServiceCatalog/Business/Billing/AddProducts/v1" xmlns:pfx4="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" xmlns:pfx2="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/DeleteProducts/v1" xmlns:pfx9="http://vodafone.com.tr/ServiceCatalog/Business/CDRManagement/ManageGroup/v1" xmlns:pfx8="http://vodafone.com.tr/ServiceCatalog/ServiceReply" xmlns:pfx7="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberInquiries/GetRemainingBalance/v1" xmlns:pfx6="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/AddProducts/v1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns32="urn:com:metasolv:oms:xmlapi:1" xmlns:ns12="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:ns5="http://vodafone.com.tr/ServiceCatalog/Business/PenaltyInquiries/GetPenalties/v1" xmlns:ns13="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentResponseInput/v1" xmlns:eai="java://com.telco.eai.EAIFunctions" xmlns:pfx="http://vodafone.com.tr/EAI/Common/RequestEAI" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns2="http://vodafone.com.tr/EAI/Common/Header" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns4="http://vodafone.com.tr/EAI/Common/ResponseCodes" xmlns:ns3="http://vodafone.com.tr/ServiceCatalog/Business/PenaltyInquiries/CalculatePenaltyType/v1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx21="http://vodafone.com.tr/EAI/Common/ResponseEAI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <xsd:import namespace="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OrderComponent/OrderComponentRequestInput.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/RequestEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/RequestEAI.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/DeleteProducts/v1" schemaLocation="/Domains/ServiceCatalog/Business/ProductManagement/DeleteProducts_v1/Schemas/DeleteProducts.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceRequest.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceReply" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceReply.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/PenaltyInquiries/GetPenalties/v1" schemaLocation="/Domains/ServiceCatalog/Business/PenaltyInquiries/GetPenalties_v1/Schemas/GetPenalties.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/PenaltyInquiries/CalculatePenaltyType/v1" schemaLocation="/Domains/ServiceCatalog/Business/PenaltyInquiries/CalculatePenaltyType_v1/Schemas/CalculatePenaltyType.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd"/>
    <pd:name>Domains/OrderManagement/Business/OrderComponent/Billing/Kenan/DeleteProducts_v1/DeleteProducts.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="Input">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:RequestEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>56</pd:startX>
    <pd:startY>423</pd:startY>
    <pd:returnBindings/>
    <pd:endName>End</pd:endName>
    <pd:endX>1010</pd:endX>
    <pd:endY>423</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1413207003780</pd:targetNamespace>
    <pd:activity name="Fail-Order-Component">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>364</pd:x>
        <pd:y>890</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/OrderComponent/OrderComponentResponse.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <ns13:Request>
                    <ns13:OcDetails>
                        <ns13:Id>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </ns13:Id>
                        <ns13:Name>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                        </ns13:Name>
                        <ns13:Scenario>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario"/>
                        </ns13:Scenario>
                        <ns13:OrderId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </ns13:OrderId>
                        <ns13:CorrelationID>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:CorrelationID"/>
                        </ns13:CorrelationID>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Cartridge">
                            <ns13:Cartridge>
                                <ns13:Name>
                                    <xsl:value-of select="ns:Name"/>
                                </ns13:Name>
                                <ns13:Version>
                                    <xsl:value-of select="ns:Version"/>
                                </ns13:Version>
                                <ns13:Source>
                                    <xsl:value-of select="ns:Source"/>
                                </ns13:Source>
                            </ns13:Cartridge>
                        </xsl:for-each>
                    </ns13:OcDetails>
                    <ns13:ServiceReply>
                        <xsl:copy-of select="$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Header"/>
                        <pfx8:Body>
                            <ns32:TelcoOperationResponse>
                                <Id>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                                </Id>
                                <Name>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                                </Name>
                                <OrderId>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                                </OrderId>
                                <StatusCode>
                                    <xsl:value-of select="$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Header/ns4:ErrorCode"/>
                                </StatusCode>
                                <StatusMessage>
                                    <xsl:value-of select="$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Header/ns4:ErrorDescription"/>
                                </StatusMessage>
                            </ns32:TelcoOperationResponse>
                        </pfx8:Body>
                    </ns13:ServiceReply>
                </ns13:Request>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetAttributesByProductCategory">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>513</pd:x>
        <pd:y>426</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/ProductManagement/GetAttributesByProductCategory.process</processName>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/*" element="ns3:Response"/>
            <pd:coercion xpath="$Parse-XML/OSMOrder/XMLMessage/*" element="pfx3:Order" cardinality=""/>
        </pd:coercions>
        <pd:inputBindings>
            <Input>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/EBUProductCategory">
                    <ProductCategory>
                        <xsl:value-of select="."/>
                    </ProductCategory>
                </xsl:for-each>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem/EBUProductCategory">
                    <ProductCategory>
                        <xsl:value-of select="."/>
                    </ProductCategory>
                </xsl:for-each>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetPenaltyType">
        <pd:type>com.tibco.plugin.jms.JMSQueueRequestReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueRequestReplyActivity</pd:resourceType>
        <pd:x>367</pd:x>
        <pd:y>691</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>%%Domains/OrderManagement/OrderComponent/Constants/AuxQueues/GetPenaltyType%%</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx5:ServiceRequest"/>
            <OutDataxsdString ref="pfx8:ServiceReply"/>
        </config>
        <pd:inputBindings>
            <ns12:ActivityInput>
                <JMSExpiration>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestJMSMsgExpiration"/>
                </JMSExpiration>
                <requestTimeout>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestTimeout"/>
                </requestTimeout>
                <Body>
                    <pfx5:ServiceRequest>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx5:Header>
                                <ns2:RequestId>
                                    <xsl:value-of select="ns2:RequestId"/>
                                </ns2:RequestId>
                                <ns2:SourceSystem>
                                    <xsl:value-of select="ns2:SourceSystem"/>
                                </ns2:SourceSystem>
                                <ns2:ReplyExpected>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/Reply/Now"/>
                                </ns2:ReplyExpected>
                                <ns2:QoS>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/QOS/Reliable"/>
                                </ns2:QoS>
                                <ns2:CorrelationId>
                                    <xsl:value-of select="ns2:CorrelationId"/>
                                </ns2:CorrelationId>
                                <ns2:Priority>
                                    <xsl:value-of select="ns2:Priority"/>
                                </ns2:Priority>
                                <xsl:for-each select="ns2:Credentials">
                                    <ns2:Credentials>
                                        <ns2:ApplicationId>
                                            <xsl:value-of select="ns2:ApplicationId"/>
                                        </ns2:ApplicationId>
                                        <ns2:User>
                                            <xsl:value-of select="ns2:User"/>
                                        </ns2:User>
                                        <ns2:Password>
                                            <xsl:value-of select="ns2:Password"/>
                                        </ns2:Password>
                                    </ns2:Credentials>
                                </xsl:for-each>
                                <ns2:ProxySystem>
                                    <xsl:value-of select="ns2:ProxySystem"/>
                                </ns2:ProxySystem>
                                <xsl:for-each select="ns2:Attributes">
                                    <ns2:Attributes>
                                        <xsl:for-each select="ns2:Attribute">
                                            <ns2:Attribute>
                                                <ns2:Name>
                                                    <xsl:value-of select="ns2:Name"/>
                                                </ns2:Name>
                                                <ns2:Value>
                                                    <xsl:value-of select="ns2:Value"/>
                                                </ns2:Value>
                                            </ns2:Attribute>
                                        </xsl:for-each>
                                    </ns2:Attributes>
                                </xsl:for-each>
                            </pfx5:Header>
                        </xsl:for-each>
                        <pfx5:Body>
                            <xsl:choose>
                                <!--Vodapara-->
                                <xsl:when test="count($Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[Action=('Deleted','Suspend') &#xA;and ComponentGroup='CAMP' &#xA;and not(ProductCatalogId = ('5000','5005','11001','60007'))&#xA;]) > 0">
                                    <ns3:Request>
                                        <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="RootItem" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[Action=('Deleted','Suspend') &#xA;and ComponentGroup='CAMP' &#xA;and not(ProductCatalogId = ('5000','5005','11001','60007'))&#xA;]"/>
                                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                                            <ns3:ExternalId>
                                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                                            </ns3:ExternalId>
                                        </xsl:if>
                                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                                            <ns3:ExternalComponentId>
                                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                                            </ns3:ExternalComponentId>
                                        </xsl:if>
                                        <ns3:BillingAccount>
                                            <xsl:value-of select="$RootItem/BillAcctCode"/>
                                        </ns3:BillingAccount>
                                        <ns3:MSISDN>
                                            <xsl:value-of select="$RootItem/ServiceId"/>
                                        </ns3:MSISDN>
                                        <xsl:for-each select="$RootItem">
                                            <ns3:Campaign>
                                                <ns3:CampaignCode>
                                                    <xsl:value-of select="IntegrationId"/>
                                                </ns3:CampaignCode>
                                                <ns3:CampaignReasonCode>
                                                    <xsl:value-of select="ProductCatalogId"/>
                                                </ns3:CampaignReasonCode>
                                                <ns3:MethodType>
                                                    <xsl:value-of select="'0'"/>
                                                </ns3:MethodType>
                                            </ns3:Campaign>
                                        </xsl:for-each>
                                    </ns3:Request>
                                </xsl:when>
                                <xsl:otherwise>
                                    <ns3:Request>
                                        <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="ChildItem" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[&#xA;Action=('Deleted','Suspend') &#xA;and ComponentGroup='CAMP'&#xA;and ComponentType!='HANDSET'&#xA;and not(ProductCatalogId = ('5000','5005','11001','60007')) &#xA;]"/>
                                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                                            <ns3:ExternalId>
                                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                                            </ns3:ExternalId>
                                        </xsl:if>
                                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                                            <ns3:ExternalComponentId>
                                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                                            </ns3:ExternalComponentId>
                                        </xsl:if>
                                        <xsl:if test="$ChildItem/BillAcctCode">
                                            <ns3:BillingAccount>
                                                <xsl:value-of select="$ChildItem/BillAcctCode"/>
                                            </ns3:BillingAccount>
                                        </xsl:if>
                                        <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem[ListOfChildItem/ChildItem[ComponentGroup='CAMP' and Action='Deleted']]/ServiceId">
                                            <ns3:MSISDN>
                                                <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem[ListOfChildItem/ChildItem[ComponentGroup='CAMP' and Action='Deleted']]/ServiceId"/>
                                            </ns3:MSISDN>
                                        </xsl:if>
                                        <xsl:for-each select="$ChildItem">
                                            <ns3:Campaign>
                                                <ns3:CampaignCode>
                                                    <xsl:value-of select="IntegrationId"/>
                                                </ns3:CampaignCode>
                                                <ns3:CampaignReasonCode>
                                                    <xsl:value-of select="ProductCatalogId"/>
                                                </ns3:CampaignReasonCode>
                                                <ns3:MethodType>
                                                    <xsl:value-of select="'0'"/>
                                                </ns3:MethodType>
                                            </ns3:Campaign>
                                        </xsl:for-each>
                                    </ns3:Request>
                                </xsl:otherwise>
                            </xsl:choose>
                        </pfx5:Body>
                    </pfx5:ServiceRequest>
                </Body>
            </ns12:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="JMS Queue Sender">
        <pd:type>com.tibco.plugin.jms.JMSQueueSendActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueSendActivity</pd:resourceType>
        <pd:x>864</pd:x>
        <pd:y>423</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>VFTR.Network.ServiceCatalog.IN.Business.G.Request. AddMultipleVPNAccount_v1</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx5:ServiceRequest"/>
        </config>
        <pd:inputBindings>
            <ns12:ActivityInput>
                <destinationQueue>
                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:ServiceCatalogQueue"/>
                </destinationQueue>
                <replyToQueue>
                    <xsl:value-of select="tib:concat-sequence-format(($_globalVariables/ns1:GlobalVariables/Constants/Company,$_globalVariables/ns1:GlobalVariables/Constants/ProjectName,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/Name,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Name,$_globalVariables/ns1:GlobalVariables/Constants/Layer/Business,$_globalVariables/ns1:GlobalVariables/Constants/QOS/Guarantee,$_globalVariables/ns1:GlobalVariables/Constants/RequestType/Reply),&quot;.&quot;)"/>
                </replyToQueue>
                <JMSPriority>
                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ns2:Priority"/>
                </JMSPriority>
                <Body>
                    <pfx5:ServiceRequest>
                        <xsl:for-each select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx5:Header>
                                <xsl:if test="ns2:RequestId">
                                    <ns2:RequestId>
                                        <xsl:value-of select="ns2:RequestId"/>
                                    </ns2:RequestId>
                                </xsl:if>
                                <ns2:SourceSystem>
                                    <xsl:value-of select="ns2:SourceSystem"/>
                                </ns2:SourceSystem>
                                <ns2:ReplyExpected>
                                    <xsl:value-of select="ns2:ReplyExpected"/>
                                </ns2:ReplyExpected>
                                <xsl:if test="ns2:QoS">
                                    <ns2:QoS>
                                        <xsl:value-of select="ns2:QoS"/>
                                    </ns2:QoS>
                                </xsl:if>
                                <xsl:if test="ns2:Schedule">
                                    <ns2:Schedule>
                                        <xsl:value-of select="ns2:Schedule"/>
                                    </ns2:Schedule>
                                </xsl:if>
                                <xsl:if test="ns2:CorrelationId">
                                    <ns2:CorrelationId>
                                        <xsl:value-of select="ns2:CorrelationId"/>
                                    </ns2:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns2:Priority">
                                    <ns2:Priority>
                                        <xsl:value-of select="ns2:Priority"/>
                                    </ns2:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns2:Credentials">
                                    <ns2:Credentials>
                                        <ns2:ApplicationId>
                                            <xsl:value-of select="ns2:ApplicationId"/>
                                        </ns2:ApplicationId>
                                        <ns2:User>
                                            <xsl:value-of select="ns2:User"/>
                                        </ns2:User>
                                        <xsl:if test="ns2:Password">
                                            <ns2:Password>
                                                <xsl:value-of select="ns2:Password"/>
                                            </ns2:Password>
                                        </xsl:if>
                                    </ns2:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns2:ProxySystem">
                                    <ns2:ProxySystem>
                                        <xsl:value-of select="ns2:ProxySystem"/>
                                    </ns2:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns2:ForceSimulate">
                                    <ns2:ForceSimulate>
                                        <xsl:value-of select="ns2:ForceSimulate"/>
                                    </ns2:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns2:Attributes">
                                    <ns2:Attributes>
                                        <xsl:for-each select="ns2:Attribute">
                                            <ns2:Attribute>
                                                <ns2:Name>
                                                    <xsl:value-of select="ns2:Name"/>
                                                </ns2:Name>
                                                <ns2:Value>
                                                    <xsl:value-of select="ns2:Value"/>
                                                </ns2:Value>
                                            </ns2:Attribute>
                                        </xsl:for-each>
                                    </ns2:Attributes>
                                </xsl:for-each>
                            </pfx5:Header>
                        </xsl:for-each>
                        <pfx5:Body>
                            <xsl:choose>
                                <xsl:when test="string-length($Map-Data-M2M/pfx2:DeleteProductsRequest/pfx2:Request/pfx2:ExternalId)!=0">
                                    <xsl:copy-of select="$Map-Data-M2M/pfx2:DeleteProductsRequest/pfx2:Request"/>
                                </xsl:when>
                                <xsl:when test="string-length($Map-Data-MPBX/pfx2:DeleteProductsRequest/pfx2:Request/pfx2:ExternalId)!=0">
                                    <xsl:copy-of select="$Map-Data-MPBX/pfx2:DeleteProductsRequest/pfx2:Request"/>
                                </xsl:when>
                                <xsl:when test="string-length($Map-Data-MTT/pfx2:DeleteProductsRequest/pfx2:Request/pfx2:ExternalId)!=0">
                                    <xsl:copy-of select="$Map-Data-MTT/pfx2:DeleteProductsRequest/pfx2:Request"/>
                                </xsl:when>
                                <xsl:when test="string-length($Map-Data-VPN/pfx2:DeleteProductsRequest/pfx2:Request/pfx2:ExternalId)!=0">
                                    <xsl:copy-of select="$Map-Data-VPN/pfx2:DeleteProductsRequest/pfx2:Request"/>
                                </xsl:when>
                                <xsl:when test="string-length($Map-Data-VSMM-Consultancy-SVB/pfx2:DeleteProductsRequest/pfx2:Request/pfx2:ExternalId)!=0">
                                    <xsl:copy-of select="$Map-Data-VSMM-Consultancy-SVB/pfx2:DeleteProductsRequest/pfx2:Request"/>
                                </xsl:when>
                                <xsl:when test="string-length($Map-Data-Discount/pfx2:DeleteProductsRequest/pfx2:Request/pfx2:ExternalId)!=0">
                                    <xsl:copy-of select="$Map-Data-Discount/pfx2:DeleteProductsRequest/pfx2:Request"/>
                                </xsl:when>
                                <xsl:when test="string-length($Map-Data-EnterpriseIQ/pfx2:DeleteProductsRequest/pfx2:Request/pfx2:ExternalId)!=0">
                                    <xsl:copy-of select="$Map-Data-EnterpriseIQ/pfx2:DeleteProductsRequest/pfx2:Request"/>
                                </xsl:when>
                                <xsl:when test="string-length($Map-Data-MAF/pfx2:DeleteProductsRequest/pfx2:Request/pfx2:ExternalId)!=0">
                                    <xsl:copy-of select="$Map-Data-MAF/pfx2:DeleteProductsRequest/pfx2:Request"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:copy-of select="$Map-Data/pfx2:DeleteProductsRequest/pfx2:Request"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </pfx5:Body>
                    </pfx5:ServiceRequest>
                </Body>
            </ns12:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>683</pd:x>
        <pd:y>803</pd:y>
        <config>
            <element ref="pfx2:DeleteProductsRequest"/>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/*" element="ns3:Response"/>
        </pd:coercions>
        <pd:inputBindings>
            <xsl:variable name="Segment" select="if(count($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount)>1)&#xA;then (&#xA;&#x9;&#x9; if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount[CustAcctCode =$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[Action = 'Deleted']/CustAcctCode]/CustAcctType = '101')&#xA;&#x9;&#x9;then 'EBU'&#xA;&#x9;&#x9;else 'CBU'&#xA;&#x9;)&#xA;else if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101')&#xA;then 'EBU'&#xA;else if ($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102')&#xA;then 'CBU'&#xA;else ''"/>
            <xsl:choose>
                <xsl:when test="$Parse-XML/OSMOrder/XMLMessage/Order/OrderType='Campaign Management'">
                    <xsl:variable name="rootItem" select="if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ComponentSubType = 'MOBILE' and   ComponentType='MAIN'])&#xA;then $Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ComponentSubType = 'MOBILE' and   ComponentType='MAIN'][1]&#xA;else $Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]"/>
                    <pfx2:DeleteProductsRequest>
                        <pfx2:Request>
                            <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                                <pfx2:ExternalId>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                                </pfx2:ExternalId>
                            </xsl:if>
                            <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                                <pfx2:ExternalComponentId>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                                </pfx2:ExternalComponentId>
                            </xsl:if>
                            <pfx2:ProductList>
                                <pfx2:Product>
                                    <xsl:variable name="_product" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]"/>
                                    <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason">
                                        <pfx2:ActionReason>
                                            <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason"/>
                                        </pfx2:ActionReason>
                                    </xsl:if>
                                    <pfx2:ProductDuration>
                                        <xsl:choose>
                                            <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                                <pfx2:EndDate>
                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                                </pfx2:EndDate>
                                            </xsl:when>
                                            <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                <pfx2:EndDate>
                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                </pfx2:EndDate>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="$rootItem/EndDate">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="$rootItem/EndDate"/>
                                                    </pfx2:EndDate>
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx2:ProductDuration>
                                    <pfx2:ListAttributes>
                                        <xsl:choose>
                                            <xsl:when test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101'">
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="'Segment'"/>
                                                    </pfx2:Name>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="'EBU'"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                            </xsl:when>
                                            <xsl:when test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102'">
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="'Segment'"/>
                                                    </pfx2:Name>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="'CBU'"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="'Segment'"/>
                                                    </pfx2:Name>
                                                </pfx2:Atribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                        <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                            <xsl:variable name="_attributeName" select="."/>
                                            <xsl:variable name="_attribute" select="$_product/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                            <xsl:choose>
                                                <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                    <pfx2:Atribute>
                                                        <pfx2:Name>
                                                            <xsl:value-of select="$_attribute/Name"/>
                                                        </pfx2:Name>
                                                        <pfx2:Value>
                                                            <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                        </pfx2:Value>
                                                        <pfx2:OldValue>
                                                            <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                        </pfx2:OldValue>
                                                    </pfx2:Atribute>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:Atribute>
                                                        <pfx2:Name>
                                                            <xsl:value-of select="$_attribute/Name"/>
                                                        </pfx2:Name>
                                                        <xsl:if test="$_attribute/Value">
                                                            <pfx2:Value>
                                                                <xsl:value-of select="$_attribute/Value"/>
                                                            </pfx2:Value>
                                                        </xsl:if>
                                                        <pfx2:OldValue>
                                                            <xsl:value-of select="$_attribute/PreviousValue"/>
                                                        </pfx2:OldValue>
                                                    </pfx2:Atribute>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </xsl:for-each>
                                    </pfx2:ListAttributes>
                                    <pfx2:ProductId>
                                        <pfx2:Id>
                                            <xsl:value-of select="$_product/ProductCatalogId"/>
                                        </pfx2:Id>
                                        <xsl:if test="$_product/IntegrationId">
                                            <pfx2:InstanceId>
                                                <xsl:value-of select="$_product/IntegrationId"/>
                                            </pfx2:InstanceId>
                                        </xsl:if>
                                    </pfx2:ProductId>
                                    <pfx2:ProductCustomerData>
                                        <pfx2:ExternalBillingAccountId>
                                            <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/BillAcctCode"/>
                                        </pfx2:ExternalBillingAccountId>
                                        <pfx2:MSISDN>
                                            <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/MSISDN"/>
                                        </pfx2:MSISDN>
                                    </pfx2:ProductCustomerData>
                                    <xsl:variable name="_productPenalty" select="if (count($GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign)>0) then&#xA;$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode=current()/IntegrationId]&#xA;else&#xA;$GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)]"/>
                                    <xsl:choose>
                                        <xsl:when test="$_productPenalty">
                                            <xsl:choose>
                                                <xsl:when test="count($GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode =$_product/IntegrationId ])>0">
                                                    <pfx2:ProductPenalty>
                                                        <xsl:variable name="penalty" select="$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode = $_product/IntegrationId]"/>
                                                        <xsl:if test="string(number($penalty/ns3:Amount)) !='NaN'">
                                                            <xsl:if test="$penalty/ns3:Amount">
                                                                <pfx2:PenaltyAmount>
                                                                    <xsl:value-of select="$penalty/ns3:Amount"/>
                                                                </pfx2:PenaltyAmount>
                                                            </xsl:if>
                                                        </xsl:if>
                                                        <xsl:if test="$penalty/ns3:PenaltyMethod">
                                                            <pfx2:PenaltyMethod>
                                                                <xsl:value-of select="$penalty/ns3:PenaltyMethod"/>
                                                            </pfx2:PenaltyMethod>
                                                        </xsl:if>
                                                        <xsl:if test="$penalty/ns3:PenaltyCalculationMode">
                                                            <pfx2:PenaltyCalculationMode>
                                                                <xsl:value-of select="$penalty/ns3:PenaltyCalculationMode"/>
                                                            </pfx2:PenaltyCalculationMode>
                                                        </xsl:if>
                                                        <pfx2:SkipPenalty>
                                                            <xsl:value-of select="$_product/SkipPenalty='Y'"/>
                                                        </pfx2:SkipPenalty>
                                                        <xsl:choose>
                                                            <xsl:when test="count($penalty/ns3:PenaltyItems)>0&#xA;and &#xA;(current()/ComponentGroup=&quot;CAMP&quot; and current()/Action=&quot;Deleted&quot;  and   current()/ProvisioningFlg=&quot;Y&quot; and current()/BillingFlg=&quot;Y&quot;)">
                                                                <pfx2:Source>
                                                                    <xsl:value-of select="'PTSM'"/>
                                                                </pfx2:Source>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <pfx2:Source>
                                                                    <xsl:value-of select="''"/>
                                                                </pfx2:Source>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </pfx2:ProductPenalty>
                                                </xsl:when>
                                                <xsl:when test="count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,$_product/IntegrationId)])>0">
                                                    <pfx2:ProductPenalty>
                                                        <xsl:if test="string(number($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;,$_product/IntegrationId)]/Value)) !='NaN'">
                                                            <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;,$_product)]/Value">
                                                                <pfx2:PenaltyAmount>
                                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;,$_product)]/Value"/>
                                                                </pfx2:PenaltyAmount>
                                                            </xsl:if>
                                                        </xsl:if>
                                                        <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;,$_product/IntegrationId)]/Value">
                                                            <pfx2:PenaltyMethod>
                                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;,$_product/IntegrationId)]/Value"/>
                                                            </pfx2:PenaltyMethod>
                                                        </xsl:if>
                                                        <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, $_product/IntegrationId)]/Value">
                                                            <pfx2:PenaltyCalculationMode>
                                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, $_product/IntegrationId)]/Value"/>
                                                            </pfx2:PenaltyCalculationMode>
                                                        </xsl:if>
                                                        <pfx2:SkipPenalty>
                                                            <xsl:value-of select="$_product/SkipPenalty='Y'"/>
                                                        </pfx2:SkipPenalty>
                                                        <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltySource&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                            <pfx2:Source>
                                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltySource&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                            </pfx2:Source>
                                                        </xsl:if>
                                                    </pfx2:ProductPenalty>
                                                </xsl:when>
                                            </xsl:choose>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:choose>
                                                <xsl:when test="$_product/SkipPenalty='N'">
                                                    <pfx2:ProductPenalty>
                                                        <xsl:if test="string-length($_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value)>0">
                                                            <pfx2:PenaltyType>
                                                                <xsl:value-of select="$_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value"/>
                                                            </pfx2:PenaltyType>
                                                        </xsl:if>
                                                        <pfx2:SkipPenalty>
                                                            <xsl:value-of select="false()"/>
                                                        </pfx2:SkipPenalty>
                                                        <pfx2:Source>
                                                            <xsl:value-of select="''"/>
                                                        </pfx2:Source>
                                                        <xsl:if test="string(number($_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'DiscountDuration']/Value)) !='NaN'">
                                                            <pfx2:DiscountDuration>
                                                                <xsl:value-of select="$_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'DiscountDuration']/Value"/>
                                                            </pfx2:DiscountDuration>
                                                        </xsl:if>
                                                        <xsl:if test="string(number($_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value)) !='NaN'">
                                                            <pfx2:TotalDeviceAmount>
                                                                <xsl:value-of select="$_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value"/>
                                                            </pfx2:TotalDeviceAmount>
                                                        </xsl:if>
                                                    </pfx2:ProductPenalty>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ProductPenalty>
                                                        <pfx2:SkipPenalty>
                                                            <xsl:value-of select="true()"/>
                                                        </pfx2:SkipPenalty>
                                                        <pfx2:Source>
                                                            <xsl:value-of select="''"/>
                                                        </pfx2:Source>
                                                    </pfx2:ProductPenalty>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </pfx2:Product>
                            </pfx2:ProductList>
                        </pfx2:Request>
                    </pfx2:DeleteProductsRequest>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="rootItem" select="if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ComponentSubType = 'MOBILE' and   ComponentType='MAIN'])&#xA;then $Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ComponentSubType = 'MOBILE' and   ComponentType='MAIN'][1]&#xA;else $Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]"/>
                    <pfx2:DeleteProductsRequest>
                        <pfx2:Request>
                            <pfx2:ExternalId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                            </pfx2:ExternalId>
                            <pfx2:ExternalComponentId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                            </pfx2:ExternalComponentId>
                            <pfx2:ProductList>
                                <xsl:for-each select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[Action = ('Deleted','Suspend') and &#xA;ProductCatalogId =('17006')]">
                                    <xsl:variable name="_product" select="."/>
                                    <pfx2:Product>
                                        <pfx2:ActionReason>
                                            <xsl:value-of select="$rootItem/ActionReason"/>
                                        </pfx2:ActionReason>
                                        <pfx2:ProductDuration>
                                            <xsl:choose>
                                                <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order/OrderSourceSystem)='kenan'">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="if (tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate))&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)&#xA;else&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate) and count(current()/EndDate) > 0&#xA;and&#xA;not(../../ActionType = ('127','128','131'))">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/DueDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                <pfx2:StartDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                </pfx2:StartDate>
                                            </xsl:if>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                <pfx2:Atribute>
                                                    <xsl:variable name="_attributeName" select="."/>
                                                    <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="$_attribute/Name"/>
                                                    </pfx2:Name>
                                                    <xsl:if test="$_attribute/Value">
                                                        <pfx2:Value>
                                                            <xsl:value-of select="$_attribute/Value"/>
                                                        </pfx2:Value>
                                                    </xsl:if>
                                                    <pfx2:OldValue>
                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                    </pfx2:OldValue>
                                                </pfx2:Atribute>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="BillAcctCode"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:MSISDN>
                                                </xsl:when>
                                                <xsl:when test="string-length($rootItem/ServiceId) >0">
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="$rootItem/ServiceId"/>
                                                    </pfx2:MSISDN>
                                                </xsl:when>
                                                <xsl:otherwise/>
                                            </xsl:choose>
                                            <pfx2:ListAttributes>
                                                <xsl:for-each select="current()/ListOfChildItemAttribute/ChildItemAttribute">
                                                    <xsl:choose>
                                                        <xsl:when test="$rootItem/ListOfChildItem/ChildItem/ProductClass = 'GROUP_CHILD_CLASS'&#xA;and&#xA;current()/Name = 'Discount End Date'&#xA;and&#xA;tib:validate-dateTime('dd/MM/yyyy', current()/Value)">
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="tib:parse-dateTime('dd/MM/yyyy', current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <xsl:if test="current()/Value">
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="current()/Value"/>
                                                                    </pfx2:Value>
                                                                </xsl:if>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </pfx2:ListAttributes>
                                        </pfx2:ProductCustomerData>
                                        <xsl:variable name="_productPenalty" select="count($GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode = current()/IntegrationId])>0&#xA;or&#xA;$GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)]"/>
                                        <xsl:choose>
                                            <xsl:when test="$_productPenalty">
                                                <xsl:choose>
                                                    <xsl:when test="count($GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode = current()/IntegrationId])>0">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:variable name="penalty" select="$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode = current()/IntegrationId]"/>
                                                            <xsl:if test="string(number($penalty/ns3:Amount)) !='NaN'">
                                                                <xsl:if test="$penalty/ns3:Amount">
                                                                    <pfx2:PenaltyAmount>
                                                                        <xsl:value-of select="$penalty/ns3:Amount"/>
                                                                    </pfx2:PenaltyAmount>
                                                                </xsl:if>
                                                            </xsl:if>
                                                            <xsl:if test="$penalty/ns3:PenaltyMethod">
                                                                <pfx2:PenaltyMethod>
                                                                    <xsl:value-of select="$penalty/ns3:PenaltyMethod"/>
                                                                </pfx2:PenaltyMethod>
                                                            </xsl:if>
                                                            <xsl:if test="$penalty/ns3:PenaltyCalculationMode">
                                                                <pfx2:PenaltyCalculationMode>
                                                                    <xsl:value-of select="$penalty/ns3:PenaltyCalculationMode"/>
                                                                </pfx2:PenaltyCalculationMode>
                                                            </xsl:if>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="current()/SkipPenalty='Y'"/>
                                                            </pfx2:SkipPenalty>
                                                            <xsl:choose>
                                                                <xsl:when test="count($penalty/ns3:PenaltyItems)>0&#xA;and &#xA;(ComponentGroup=&quot;CAMP&quot; and Action=&quot;Deleted&quot;  and   (ProvisioningFlg=&quot;Y&quot; or BillingFlg=&quot;Y&quot;))">
                                                                    <pfx2:Source>
                                                                        <xsl:value-of select="'PTSM'"/>
                                                                    </pfx2:Source>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <pfx2:Source>
                                                                        <xsl:value-of select="''"/>
                                                                    </pfx2:Source>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                    <xsl:when test="count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)])>0">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:if test="string(number($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value)) !='NaN'">
                                                                <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                    <pfx2:PenaltyAmount>
                                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                    </pfx2:PenaltyAmount>
                                                                </xsl:if>
                                                            </xsl:if>
                                                            <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                <pfx2:PenaltyMethod>
                                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                </pfx2:PenaltyMethod>
                                                            </xsl:if>
                                                            <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                <pfx2:PenaltyCalculationMode>
                                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                </pfx2:PenaltyCalculationMode>
                                                            </xsl:if>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="current()/SkipPenalty='Y'"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltySource&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                            </pfx2:Source>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                </xsl:choose>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:choose>
                                                    <xsl:when test="current()/SkipPenalty='N'">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:if test="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Type']/Value">
                                                                <pfx2:PenaltyType>
                                                                    <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Type']/Value"/>
                                                                </pfx2:PenaltyType>
                                                            </xsl:if>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="false()"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="''"/>
                                                            </pfx2:Source>
                                                            <xsl:if test="string(number(current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Duration']/Value)) !='NaN'">
                                                                <xsl:if test="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Duration']/Value">
                                                                    <pfx2:DiscountDuration>
                                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Duration']/Value"/>
                                                                    </pfx2:DiscountDuration>
                                                                </xsl:if>
                                                            </xsl:if>
                                                            <xsl:if test="string(number(current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Total Device Amount']/Value)) !='NaN'">
                                                                <xsl:if test="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Total Device Amount']/Value">
                                                                    <pfx2:TotalDeviceAmount>
                                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Total Device Amount']/Value"/>
                                                                    </pfx2:TotalDeviceAmount>
                                                                </xsl:if>
                                                            </xsl:if>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:ProductPenalty>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="true()"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="''"/>
                                                            </pfx2:Source>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx2:Product>
                                </xsl:for-each>
                                <xsl:for-each select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[Action = ('Deleted','Suspend') and &#xA;&#x9;(not(ProductCatalogId =('3001','1113','1103','17006')) or&#xA; &#x9;&#x9;(ProductCatalogId='3001' and ListOfChildItemAttribute/ChildItemAttribute[Name = 'VPN Account Discount']/Value='Y')) and &#xA;&#x9;not(ComponentType='HANDSET') &#xA;&#x9;and (not(ComponentType ='GROUP_CHILD')  or (ComponentType = 'GROUP_CHILD' and ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Percentage']/Value !=0))]">
                                    <xsl:variable name="_product" select="."/>
                                    <pfx2:Product>
                                        <pfx2:ActionReason>
                                            <xsl:value-of select="$rootItem/ActionReason"/>
                                        </pfx2:ActionReason>
                                        <pfx2:ProductDuration>
                                            <xsl:choose>
                                                <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order/OrderSourceSystem)='kenan'">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="if (tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate))&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)&#xA;else&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate) and count(current()/EndDate) > 0&#xA;and&#xA;not(../../ActionType = ('127','128','131'))">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/DueDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                <pfx2:StartDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                </pfx2:StartDate>
                                            </xsl:if>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                <pfx2:Atribute>
                                                    <xsl:variable name="_attributeName" select="."/>
                                                    <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="$_attribute/Name"/>
                                                    </pfx2:Name>
                                                    <xsl:if test="$_attribute/Value">
                                                        <pfx2:Value>
                                                            <xsl:value-of select="$_attribute/Value"/>
                                                        </pfx2:Value>
                                                    </xsl:if>
                                                    <pfx2:OldValue>
                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                    </pfx2:OldValue>
                                                </pfx2:Atribute>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="BillAcctCode"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:MSISDN>
                                                </xsl:when>
                                                <xsl:when test="string-length($rootItem/ServiceId) >0">
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="$rootItem/ServiceId"/>
                                                    </pfx2:MSISDN>
                                                </xsl:when>
                                                <xsl:otherwise/>
                                            </xsl:choose>
                                            <pfx2:ListAttributes>
                                                <xsl:for-each select="current()/ListOfChildItemAttribute/ChildItemAttribute">
                                                    <xsl:choose>
                                                        <xsl:when test="$rootItem/ListOfChildItem/ChildItem/ProductClass = 'GROUP_CHILD_CLASS'&#xA;and&#xA;current()/Name = 'Discount End Date'&#xA;and&#xA;tib:validate-dateTime('dd/MM/yyyy', current()/Value)">
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="tib:parse-dateTime('dd/MM/yyyy', current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <xsl:if test="current()/Value">
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="current()/Value"/>
                                                                    </pfx2:Value>
                                                                </xsl:if>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </pfx2:ListAttributes>
                                        </pfx2:ProductCustomerData>
                                        <xsl:variable name="_productPenalty" select="count($GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode = current()/IntegrationId])>0&#xA;or&#xA;$GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)]"/>
                                        <xsl:choose>
                                            <xsl:when test="$_productPenalty">
                                                <xsl:choose>
                                                    <xsl:when test="count($GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode = current()/IntegrationId])>0">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:variable name="penalty" select="$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode = current()/IntegrationId]"/>
                                                            <xsl:if test="string(number($penalty/ns3:Amount)) !='NaN'">
                                                                <xsl:if test="$penalty/ns3:Amount">
                                                                    <pfx2:PenaltyAmount>
                                                                        <xsl:value-of select="$penalty/ns3:Amount"/>
                                                                    </pfx2:PenaltyAmount>
                                                                </xsl:if>
                                                            </xsl:if>
                                                            <xsl:if test="$penalty/ns3:PenaltyMethod">
                                                                <pfx2:PenaltyMethod>
                                                                    <xsl:value-of select="$penalty/ns3:PenaltyMethod"/>
                                                                </pfx2:PenaltyMethod>
                                                            </xsl:if>
                                                            <xsl:if test="$penalty/ns3:PenaltyCalculationMode">
                                                                <pfx2:PenaltyCalculationMode>
                                                                    <xsl:value-of select="$penalty/ns3:PenaltyCalculationMode"/>
                                                                </pfx2:PenaltyCalculationMode>
                                                            </xsl:if>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="current()/SkipPenalty='Y'"/>
                                                            </pfx2:SkipPenalty>
                                                            <xsl:choose>
                                                                <xsl:when test="count($penalty/ns3:PenaltyItems)>0&#xA;and &#xA;(ComponentGroup=&quot;CAMP&quot; and Action=&quot;Deleted&quot;  and   (ProvisioningFlg=&quot;Y&quot; or BillingFlg=&quot;Y&quot;))">
                                                                    <pfx2:Source>
                                                                        <xsl:value-of select="'PTSM'"/>
                                                                    </pfx2:Source>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <pfx2:Source>
                                                                        <xsl:value-of select="''"/>
                                                                    </pfx2:Source>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                    <xsl:when test="count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)])>0">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:if test="string(number($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value)) !='NaN'">
                                                                <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                    <pfx2:PenaltyAmount>
                                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                    </pfx2:PenaltyAmount>
                                                                </xsl:if>
                                                            </xsl:if>
                                                            <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                <pfx2:PenaltyMethod>
                                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                </pfx2:PenaltyMethod>
                                                            </xsl:if>
                                                            <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                <pfx2:PenaltyCalculationMode>
                                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                </pfx2:PenaltyCalculationMode>
                                                            </xsl:if>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="current()/SkipPenalty='Y'"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltySource&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                            </pfx2:Source>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                </xsl:choose>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:choose>
                                                    <xsl:when test="current()/SkipPenalty='N'">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:if test="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Type']/Value">
                                                                <pfx2:PenaltyType>
                                                                    <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Type']/Value"/>
                                                                </pfx2:PenaltyType>
                                                            </xsl:if>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="false()"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="''"/>
                                                            </pfx2:Source>
                                                            <xsl:if test="string(number(current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Duration']/Value)) !='NaN'">
                                                                <xsl:if test="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Duration']/Value">
                                                                    <pfx2:DiscountDuration>
                                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Duration']/Value"/>
                                                                    </pfx2:DiscountDuration>
                                                                </xsl:if>
                                                            </xsl:if>
                                                            <xsl:if test="string(number(current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Total Device Amount']/Value)) !='NaN'">
                                                                <xsl:if test="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Total Device Amount']/Value">
                                                                    <pfx2:TotalDeviceAmount>
                                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Total Device Amount']/Value"/>
                                                                    </pfx2:TotalDeviceAmount>
                                                                </xsl:if>
                                                            </xsl:if>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:ProductPenalty>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="true()"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="''"/>
                                                            </pfx2:Source>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx2:Product>
                                </xsl:for-each>
                            </pfx2:ProductList>
                        </pfx2:Request>
                    </pfx2:DeleteProductsRequest>
                </xsl:otherwise>
            </xsl:choose>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-Data-Discount">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>682</pd:x>
        <pd:y>246</pd:y>
        <config>
            <element ref="pfx2:DeleteProductsRequest"/>
        </config>
        <pd:inputBindings>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="Segment" select="if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101')&#xA;then 'EBU'&#xA;else if ($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102')&#xA;then 'CBU'&#xA;else ''"/>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="rootItem" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[(ProductCatalogId =('17000','17100','17200','17300','17400','17500','17600','17700','17800','17900','18000','18100','18200','18300','5000','5005','60007','53002','53007','53008','53001','53003','53000','53006','53005','53004','53009','23000','10900','53039') or (ComponentGroup='CAMP' and ComponentType='DISCOUNT' and ComponentSubType='M2M DISCOUNT')) and Action = 'Deleted']"/>
            <pfx2:DeleteProductsRequest>
                <pfx2:Request>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                        <pfx2:ExternalId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </pfx2:ExternalId>
                    </xsl:if>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                        <pfx2:ExternalComponentId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </pfx2:ExternalComponentId>
                    </xsl:if>
                    <pfx2:ProductList>
                        <pfx2:Product>
                            <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason">
                                <pfx2:ActionReason>
                                    <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason"/>
                                </pfx2:ActionReason>
                            </xsl:if>
                            <pfx2:ProductDuration>
                                <xsl:choose xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order/OrderSourceSystem)='kenan'">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="if (tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate))&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)&#xA;else&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                    <pfx2:StartDate>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                    </pfx2:StartDate>
                                </xsl:if>
                            </pfx2:ProductDuration>
                            <pfx2:ListAttributes>
                                <pfx2:Atribute>
                                    <pfx2:Name>
                                        <xsl:value-of select="'Segment'"/>
                                    </pfx2:Name>
                                    <pfx2:Value>
                                        <xsl:value-of select="$Segment"/>
                                    </pfx2:Value>
                                </pfx2:Atribute>
                                <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                    <xsl:variable name="_attributeName" select="."/>
                                    <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                    <xsl:choose>
                                        <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                </pfx2:Value>
                                                <pfx2:OldValue>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                </pfx2:OldValue>
                                            </pfx2:Atribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <xsl:if test="$_attribute/Value">
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$_attribute/Value"/>
                                                    </pfx2:Value>
                                                </xsl:if>
                                                <xsl:if test="$_attribute/PreviousValue">
                                                    <pfx2:OldValue>
                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                    </pfx2:OldValue>
                                                </xsl:if>
                                            </pfx2:Atribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:for-each>
                            </pfx2:ListAttributes>
                            <pfx2:ProductId>
                                <pfx2:Id>
                                    <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                </pfx2:Id>
                                <xsl:if test="$rootItem/IntegrationId">
                                    <pfx2:InstanceId>
                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                    </pfx2:InstanceId>
                                </xsl:if>
                            </pfx2:ProductId>
                            <pfx2:ProductCustomerData>
                                <pfx2:ExternalBillingAccountId>
                                    <xsl:value-of select="$rootItem/BillAcctCode"/>
                                </pfx2:ExternalBillingAccountId>
                                <pfx2:ListAttributes>
                                    <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[exists(Value)]">
                                        <xsl:choose>
                                            <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <xsl:if test="current()/Value">
                                                        <pfx2:Value>
                                                            <xsl:value-of select="current()/Value"/>
                                                        </pfx2:Value>
                                                    </xsl:if>
                                                </pfx2:Atribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:for-each>
                                </pfx2:ListAttributes>
                            </pfx2:ProductCustomerData>
                            <xsl:variable name="_productPenalty" select="count($GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode =$rootItem/IntegrationId ])>0&#xA;or&#xA;count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,$rootItem/IntegrationId)])>0"/>
                            <xsl:choose>
                                <xsl:when test="$_productPenalty">
                                    <xsl:choose>
                                        <xsl:when test="count($GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode =$rootItem/IntegrationId ])>0">
                                            <pfx2:ProductPenalty>
                                                <xsl:variable name="penalty" select="$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode = $rootItem/IntegrationId]"/>
                                                <xsl:if test="string(number($penalty/ns3:Amount)) !='NaN'">
                                                    <pfx2:PenaltyAmount>
                                                        <xsl:value-of select="$penalty/ns3:Amount"/>
                                                    </pfx2:PenaltyAmount>
                                                </xsl:if>
                                                <pfx2:PenaltyMethod>
                                                    <xsl:value-of select="$penalty/ns3:PenaltyMethod"/>
                                                </pfx2:PenaltyMethod>
                                                <pfx2:PenaltyCalculationMode>
                                                    <xsl:value-of select="$penalty/ns3:PenaltyCalculationMode"/>
                                                </pfx2:PenaltyCalculationMode>
                                                <pfx2:SkipPenalty>
                                                    <xsl:value-of select="$rootItem/SkipPenalty='Y'"/>
                                                </pfx2:SkipPenalty>
                                                <xsl:choose>
                                                    <xsl:when test="count($penalty/ns3:PenaltyItems)>0&#xA;and &#xA;(current()/ComponentGroup=&quot;CAMP&quot; and current()/Action=&quot;Deleted&quot;  and   current()/ProvisioningFlg=&quot;Y&quot; and current()/BillingFlg=&quot;Y&quot;)">
                                                        <pfx2:Source>
                                                            <xsl:value-of select="'PTSM'"/>
                                                        </pfx2:Source>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:Source>
                                                            <xsl:value-of select="''"/>
                                                        </pfx2:Source>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </pfx2:ProductPenalty>
                                        </xsl:when>
                                        <xsl:when test="count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,$rootItem/IntegrationId)])>0">
                                            <pfx2:ProductPenalty>
                                                <xsl:if test="string(number($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;,$rootItem/IntegrationId)]/Value)) !='NaN'">
                                                    <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;,$rootItem/IntegrationId)]/Value">
                                                        <pfx2:PenaltyAmount>
                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;,$rootItem/IntegrationId)]/Value"/>
                                                        </pfx2:PenaltyAmount>
                                                    </xsl:if>
                                                </xsl:if>
                                                <pfx2:PenaltyMethod>
                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;,$rootItem/IntegrationId)]/Value"/>
                                                </pfx2:PenaltyMethod>
                                                <pfx2:PenaltyCalculationMode>
                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, $rootItem/IntegrationId)]/Value"/>
                                                </pfx2:PenaltyCalculationMode>
                                                <pfx2:SkipPenalty>
                                                    <xsl:value-of select="$rootItem/SkipPenalty='Y'"/>
                                                </pfx2:SkipPenalty>
                                                <pfx2:Source>
                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltySource&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                </pfx2:Source>
                                            </pfx2:ProductPenalty>
                                        </xsl:when>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:choose>
                                        <xsl:when test="$rootItem/SkipPenalty='N'">
                                            <pfx2:ProductPenalty>
                                                <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value">
                                                    <pfx2:PenaltyType>
                                                        <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value"/>
                                                    </pfx2:PenaltyType>
                                                </xsl:if>
                                                <pfx2:SkipPenalty>
                                                    <xsl:value-of select="false()"/>
                                                </pfx2:SkipPenalty>
                                                <pfx2:Source>
                                                    <xsl:value-of select="''"/>
                                                </pfx2:Source>
                                                <xsl:if test="string(number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value)) !='NaN'">
                                                    <pfx2:DiscountDuration>
                                                        <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value"/>
                                                    </pfx2:DiscountDuration>
                                                </xsl:if>
                                                <xsl:if test="string(number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value)) !='NaN'">
                                                    <pfx2:TotalDeviceAmount>
                                                        <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value"/>
                                                    </pfx2:TotalDeviceAmount>
                                                </xsl:if>
                                            </pfx2:ProductPenalty>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <pfx2:ProductPenalty>
                                                <pfx2:SkipPenalty>
                                                    <xsl:value-of select="true()"/>
                                                </pfx2:SkipPenalty>
                                                <pfx2:Source>
                                                    <xsl:value-of select="''"/>
                                                </pfx2:Source>
                                            </pfx2:ProductPenalty>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:otherwise>
                            </xsl:choose>
                        </pfx2:Product>
                    </pfx2:ProductList>
                </pfx2:Request>
            </pfx2:DeleteProductsRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-Data-M2M">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>680</pd:x>
        <pd:y>336</pd:y>
        <config>
            <element ref="pfx2:DeleteProductsRequest"/>
        </config>
        <pd:inputBindings>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="Segment" select="if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101')&#xA;then 'EBU'&#xA;else if ($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102')&#xA;then 'CBU'&#xA;else ''"/>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="rootItem" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]"/>
            <pfx2:DeleteProductsRequest>
                <pfx2:Request>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                        <pfx2:ExternalId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </pfx2:ExternalId>
                    </xsl:if>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                        <pfx2:ExternalComponentId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </pfx2:ExternalComponentId>
                    </xsl:if>
                    <pfx2:ProductList>
                        <pfx2:Product>
                            <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason">
                                <pfx2:ActionReason>
                                    <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason"/>
                                </pfx2:ActionReason>
                            </xsl:if>
                            <pfx2:ProductDuration>
                                <xsl:choose>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order/OrderSourceSystem)='kenan'">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="if (tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate))&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)&#xA;else&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                    <pfx2:StartDate>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                    </pfx2:StartDate>
                                </xsl:if>
                            </pfx2:ProductDuration>
                            <pfx2:ListAttributes>
                                <pfx2:Atribute>
                                    <pfx2:Name>
                                        <xsl:value-of select="'Segment'"/>
                                    </pfx2:Name>
                                    <pfx2:Value>
                                        <xsl:value-of select="$Segment"/>
                                    </pfx2:Value>
                                </pfx2:Atribute>
                                <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                    <xsl:variable name="_attributeName" select="."/>
                                    <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                    <xsl:choose>
                                        <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                </pfx2:Value>
                                                <pfx2:OldValue>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                </pfx2:OldValue>
                                            </pfx2:Atribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <xsl:if test="$_attribute/Value">
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$_attribute/Value"/>
                                                    </pfx2:Value>
                                                </xsl:if>
                                                <xsl:if test="$_attribute/PreviousValue">
                                                    <pfx2:OldValue>
                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                    </pfx2:OldValue>
                                                </xsl:if>
                                            </pfx2:Atribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:for-each>
                            </pfx2:ListAttributes>
                            <pfx2:ProductId>
                                <pfx2:Id>
                                    <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                </pfx2:Id>
                                <xsl:if test="$rootItem/IntegrationId">
                                    <pfx2:InstanceId>
                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                    </pfx2:InstanceId>
                                </xsl:if>
                            </pfx2:ProductId>
                            <pfx2:ProductCustomerData>
                                <pfx2:ExternalBillingAccountId>
                                    <xsl:value-of select="$rootItem/BillAcctCode"/>
                                </pfx2:ExternalBillingAccountId>
                                <pfx2:ListAttributes>
                                    <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute">
                                        <xsl:choose>
                                            <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <xsl:if test="current()/Value">
                                                        <pfx2:Value>
                                                            <xsl:value-of select="current()/Value"/>
                                                        </pfx2:Value>
                                                    </xsl:if>
                                                </pfx2:Atribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:for-each>
                                </pfx2:ListAttributes>
                            </pfx2:ProductCustomerData>
                            <pfx2:ProductPenalty>
                                <xsl:if test="string-length($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value)>0">
                                    <pfx2:PenaltyType>
                                        <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value"/>
                                    </pfx2:PenaltyType>
                                </xsl:if>
                                <pfx2:SkipPenalty>
                                    <xsl:value-of select="$rootItem/SkipPenalty='Y'"/>
                                </pfx2:SkipPenalty>
                                <pfx2:Source>
                                    <xsl:value-of select="''"/>
                                </pfx2:Source>
                                <xsl:if test="string(number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value)) !='NaN'">
                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value">
                                        <pfx2:DiscountDuration>
                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value"/>
                                        </pfx2:DiscountDuration>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="string(number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value))!='NaN'">
                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value">
                                        <pfx2:TotalDeviceAmount>
                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value"/>
                                        </pfx2:TotalDeviceAmount>
                                    </xsl:if>
                                </xsl:if>
                            </pfx2:ProductPenalty>
                        </pfx2:Product>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$rootItem/ListOfChildItem/ChildItem">
                            <pfx2:Product>
                                <xsl:variable name="_product" select="."/>
                                <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason">
                                    <pfx2:ActionReason>
                                        <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason"/>
                                    </pfx2:ActionReason>
                                </xsl:if>
                                <pfx2:ProductDuration>
                                    <xsl:choose>
                                        <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                            <pfx2:EndDate>
                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                            </pfx2:EndDate>
                                        </xsl:when>
                                        <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order/OrderSourceSystem)='kenan'">
                                            <pfx2:EndDate>
                                                <xsl:value-of select="if (tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate))&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)&#xA;else&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate"/>
                                            </pfx2:EndDate>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <pfx2:EndDate>
                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                            </pfx2:EndDate>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                        <pfx2:StartDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                        </pfx2:StartDate>
                                    </xsl:if>
                                </pfx2:ProductDuration>
                                <pfx2:ListAttributes>
                                    <pfx2:Atribute>
                                        <pfx2:Name>
                                            <xsl:value-of select="'Segment'"/>
                                        </pfx2:Name>
                                        <pfx2:Value>
                                            <xsl:value-of select="$Segment"/>
                                        </pfx2:Value>
                                    </pfx2:Atribute>
                                    <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                        <pfx2:Atribute>
                                            <xsl:variable name="_attributeName" select="."/>
                                            <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                            <pfx2:Name>
                                                <xsl:value-of select="$_attribute/Name"/>
                                            </pfx2:Name>
                                            <xsl:if test="$_attribute/Value">
                                                <pfx2:Value>
                                                    <xsl:value-of select="$_attribute/Value"/>
                                                </pfx2:Value>
                                            </xsl:if>
                                            <xsl:if test="$_attribute/PreviousValue">
                                                <pfx2:OldValue>
                                                    <xsl:value-of select="$_attribute/PreviousValue"/>
                                                </pfx2:OldValue>
                                            </xsl:if>
                                        </pfx2:Atribute>
                                    </xsl:for-each>
                                </pfx2:ListAttributes>
                                <pfx2:ProductId>
                                    <pfx2:Id>
                                        <xsl:value-of select="current()/ProductCatalogId"/>
                                    </pfx2:Id>
                                    <xsl:if test="current()/IntegrationId">
                                        <pfx2:InstanceId>
                                            <xsl:value-of select="current()/IntegrationId"/>
                                        </pfx2:InstanceId>
                                    </xsl:if>
                                </pfx2:ProductId>
                                <pfx2:ProductCustomerData>
                                    <pfx2:ExternalBillingAccountId>
                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                    </pfx2:ExternalBillingAccountId>
                                </pfx2:ProductCustomerData>
                                <xsl:variable name="_productPenalty" select="if (count($GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign)>0) then&#xA;$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign[ns3:CampaignCode=current()/IntegrationId]&#xA;else&#xA;$GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)]"/>
                                <xsl:choose>
                                    <xsl:when test="$_productPenalty">
                                        <xsl:choose>
                                            <xsl:when test="count($GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns3:Response/ns3:Campaign)>0">
                                                <pfx2:ProductPenalty>
                                                    <xsl:if test="string(number($_productPenalty/ns3:Amount)) !='NaN'">
                                                        <xsl:if test="$_productPenalty/ns3:Amount">
                                                            <pfx2:PenaltyAmount>
                                                                <xsl:value-of select="$_productPenalty/ns3:Amount"/>
                                                            </pfx2:PenaltyAmount>
                                                        </xsl:if>
                                                    </xsl:if>
                                                    <xsl:if test="$_productPenalty/ns3:PenaltyMethod">
                                                        <pfx2:PenaltyMethod>
                                                            <xsl:value-of select="$_productPenalty/ns3:PenaltyMethod"/>
                                                        </pfx2:PenaltyMethod>
                                                    </xsl:if>
                                                    <xsl:if test="$_productPenalty/ns3:PenaltyCalculationMode">
                                                        <pfx2:PenaltyCalculationMode>
                                                            <xsl:value-of select="$_productPenalty/ns3:PenaltyCalculationMode"/>
                                                        </pfx2:PenaltyCalculationMode>
                                                    </xsl:if>
                                                    <pfx2:SkipPenalty>
                                                        <xsl:value-of select="current()/SkipPenalty='Y'"/>
                                                    </pfx2:SkipPenalty>
                                                    <xsl:choose>
                                                        <xsl:when test="string(number($_productPenalty/ns3:Amount)) !='NaN'&#xA;and &#xA;(current()/ComponentGroup=&quot;CAMP&quot; and current()/Action=&quot;Deleted&quot;  and   current()/ProvisioningFlg=&quot;Y&quot; and current()/BillingFlg=&quot;Y&quot;)">
                                                            <pfx2:Source>
                                                                <xsl:value-of select="'PTSM'"/>
                                                            </pfx2:Source>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="''"/>
                                                            </pfx2:Source>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </pfx2:ProductPenalty>
                                            </xsl:when>
                                            <xsl:when test="count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)])>0">
                                                <pfx2:ProductPenalty>
                                                    <xsl:if test="string(number($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value)) !='NaN'">
                                                        <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                            <pfx2:PenaltyAmount>
                                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                            </pfx2:PenaltyAmount>
                                                        </xsl:if>
                                                    </xsl:if>
                                                    <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                        <pfx2:PenaltyMethod>
                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                        </pfx2:PenaltyMethod>
                                                    </xsl:if>
                                                    <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                        <pfx2:PenaltyCalculationMode>
                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                        </pfx2:PenaltyCalculationMode>
                                                    </xsl:if>
                                                    <pfx2:SkipPenalty>
                                                        <xsl:value-of select="current()/SkipPenalty='Y'"/>
                                                    </pfx2:SkipPenalty>
                                                    <xsl:choose>
                                                        <xsl:when test="string(number($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value)) !='NaN'&#xA;and &#xA;(current()/ComponentGroup=&quot;CAMP&quot; and current()/Action=&quot;Deleted&quot;  and   current()/ProvisioningFlg=&quot;Y&quot; and current()/BillingFlg=&quot;Y&quot;)">
                                                            <pfx2:Source>
                                                                <xsl:value-of select="'PTSM'"/>
                                                            </pfx2:Source>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="''"/>
                                                            </pfx2:Source>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </pfx2:ProductPenalty>
                                            </xsl:when>
                                        </xsl:choose>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx2:ProductPenalty>
                                            <pfx2:SkipPenalty>
                                                <xsl:value-of select="true()"/>
                                            </pfx2:SkipPenalty>
                                            <pfx2:Source>
                                                <xsl:value-of select="''"/>
                                            </pfx2:Source>
                                        </pfx2:ProductPenalty>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </pfx2:Product>
                        </xsl:for-each>
                    </pfx2:ProductList>
                </pfx2:Request>
            </pfx2:DeleteProductsRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-Data-MAF">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>685</pd:x>
        <pd:y>151</pd:y>
        <config>
            <element ref="pfx2:DeleteProductsRequest"/>
        </config>
        <pd:inputBindings>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="Segment" select="if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101')&#xA;then 'EBU'&#xA;else if ($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102')&#xA;then 'CBU'&#xA;else ''"/>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="rootItem" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[Action = ('Modified','Deleted')][ProductCatalogId =('26108','26100')]"/>
            <pfx2:DeleteProductsRequest>
                <pfx2:Request>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                        <pfx2:ExternalId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </pfx2:ExternalId>
                    </xsl:if>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                        <pfx2:ExternalComponentId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </pfx2:ExternalComponentId>
                    </xsl:if>
                    <pfx2:ProductList>
                        <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[Action=('Deleted')]">
                            <xsl:variable name="_currChild" select="."/>
                            <pfx2:Product>
                                <pfx2:ActionReason>
                                    <xsl:value-of select="$rootItem/ActionReason"/>
                                </pfx2:ActionReason>
                                <pfx2:ProductDuration>
                                    <xsl:choose>
                                        <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                            <pfx2:EndDate>
                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                            </pfx2:EndDate>
                                        </xsl:when>
                                        <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                            <pfx2:EndDate>
                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                            </pfx2:EndDate>
                                        </xsl:when>
                                        <xsl:when test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $_currChild/EndDate)">
                                            <pfx2:EndDate>
                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $_currChild/EndDate)"/>
                                            </pfx2:EndDate>
                                        </xsl:when>
                                    </xsl:choose>
                                    <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_currChild/StartDate)">
                                        <pfx2:StartDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_currChild/StartDate)"/>
                                        </pfx2:StartDate>
                                    </xsl:if>
                                </pfx2:ProductDuration>
                                <pfx2:ListAttributes>
                                    <pfx2:Atribute>
                                        <pfx2:Name>
                                            <xsl:value-of select="'Segment'"/>
                                        </pfx2:Name>
                                        <pfx2:Value>
                                            <xsl:value-of select="$Segment"/>
                                        </pfx2:Value>
                                    </pfx2:Atribute>
                                    <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_currChild/EBUProductCategory]/Attribute">
                                        <xsl:variable name="_attributeName" select="."/>
                                        <xsl:variable name="_attribute" select="$_currChild/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName]"/>
                                        <xsl:choose>
                                            <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="$_attribute/Name"/>
                                                    </pfx2:Name>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                    </pfx2:Value>
                                                    <pfx2:OldValue>
                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                    </pfx2:OldValue>
                                                </pfx2:Atribute>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="$_attribute/Name"/>
                                                    </pfx2:Name>
                                                    <xsl:if test="$_attribute/Value">
                                                        <pfx2:Value>
                                                            <xsl:value-of select="$_attribute/Value"/>
                                                        </pfx2:Value>
                                                    </xsl:if>
                                                    <xsl:if test="$_attribute/PreviousValue">
                                                        <pfx2:OldValue>
                                                            <xsl:value-of select="$_attribute/PreviousValue"/>
                                                        </pfx2:OldValue>
                                                    </xsl:if>
                                                </pfx2:Atribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:for-each>
                                </pfx2:ListAttributes>
                                <pfx2:ProductId>
                                    <pfx2:Id>
                                        <xsl:value-of select="$_currChild/ProductCatalogId"/>
                                    </pfx2:Id>
                                    <pfx2:InstanceId>
                                        <xsl:value-of select="$_currChild/IntegrationId"/>
                                    </pfx2:InstanceId>
                                </pfx2:ProductId>
                                <pfx2:ProductCustomerData>
                                    <pfx2:ExternalBillingAccountId>
                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                    </pfx2:ExternalBillingAccountId>
                                    <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length(tib:trim($rootItem/MSISDN))">
                                        <pfx2:MSISDN>
                                            <xsl:value-of select="$rootItem/MSISDN"/>
                                        </pfx2:MSISDN>
                                    </xsl:if>
                                    <pfx2:ListAttributes>
                                        <xsl:for-each select="$_currChild/ListOfChildItemAttribute/ChildItemAttribute">
                                            <pfx2:Atribute>
                                                <xsl:if test="Name">
                                                    <pfx2:Name>
                                                        <xsl:value-of select="Name"/>
                                                    </pfx2:Name>
                                                </xsl:if>
                                                <xsl:if test="Value">
                                                    <pfx2:Value>
                                                        <xsl:value-of select="Value"/>
                                                    </pfx2:Value>
                                                </xsl:if>
                                            </pfx2:Atribute>
                                        </xsl:for-each>
                                    </pfx2:ListAttributes>
                                </pfx2:ProductCustomerData>
                                <pfx2:ProductPenalty>
                                    <xsl:if test="string-length($_currChild/ListOfChildItemAttribute/ChildItemAttribute[Name ='Type']/Value)>0">
                                        <xsl:if test="$_currChild/ListOfChildItemAttribute/ChildItemAttribute[Name ='Type']/Value">
                                            <pfx2:PenaltyType>
                                                <xsl:value-of select="$_currChild/ListOfChildItemAttribute/ChildItemAttribute[Name ='Type']/Value"/>
                                            </pfx2:PenaltyType>
                                        </xsl:if>
                                    </xsl:if>
                                    <pfx2:SkipPenalty>
                                        <xsl:value-of select="$_currChild/SkipPenalty='Y'"/>
                                    </pfx2:SkipPenalty>
                                    <pfx2:Source>
                                        <xsl:value-of select="''"/>
                                    </pfx2:Source>
                                    <xsl:if test="string(number($_currChild/ListOfChildItemAttribute/ChildItemAttribute[Name ='Discount Duration']/Value)) !='NaN'">
                                        <xsl:if test="$_currChild/ListOfChildItemAttribute/ChildItemAttribute[Name ='Discount Duration']/Value">
                                            <pfx2:DiscountDuration>
                                                <xsl:value-of select="$_currChild/ListOfChildItemAttribute/ChildItemAttribute[Name ='Discount Duration']/Value"/>
                                            </pfx2:DiscountDuration>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="string(number($_currChild/ListOfChildItemAttribute/ChildItemAttribute[Name ='Total Device Amount']/Value)) !='NaN'">
                                        <xsl:if test="$_currChild/ListOfChildItemAttribute/ChildItemAttribute[Name ='Total Device Amount']/Value">
                                            <pfx2:TotalDeviceAmount>
                                                <xsl:value-of select="$_currChild/ListOfChildItemAttribute/ChildItemAttribute[Name ='Total Device Amount']/Value"/>
                                            </pfx2:TotalDeviceAmount>
                                        </xsl:if>
                                    </xsl:if>
                                </pfx2:ProductPenalty>
                            </pfx2:Product>
                        </xsl:for-each>
                    </pfx2:ProductList>
                </pfx2:Request>
            </pfx2:DeleteProductsRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-Data-MPBX">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>681</pd:x>
        <pd:y>522</pd:y>
        <config>
            <element ref="pfx2:DeleteProductsRequest"/>
        </config>
        <pd:inputBindings>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="Segment" select="if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101')&#xA;then 'EBU'&#xA;else if ($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102')&#xA;then 'CBU'&#xA;else ''"/>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="rootItem" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]"/>
            <pfx2:DeleteProductsRequest>
                <pfx2:Request>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                        <pfx2:ExternalId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </pfx2:ExternalId>
                    </xsl:if>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                        <pfx2:ExternalComponentId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </pfx2:ExternalComponentId>
                    </xsl:if>
                    <pfx2:ProductList>
                        <pfx2:Product>
                            <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason">
                                <pfx2:ActionReason>
                                    <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason"/>
                                </pfx2:ActionReason>
                            </xsl:if>
                            <pfx2:ProductDuration>
                                <xsl:choose>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order/OrderSourceSystem)='kenan'">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="if (tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate))&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)&#xA;else&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                    <pfx2:StartDate>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                    </pfx2:StartDate>
                                </xsl:if>
                            </pfx2:ProductDuration>
                            <pfx2:ListAttributes>
                                <pfx2:Atribute>
                                    <pfx2:Name>
                                        <xsl:value-of select="'Segment'"/>
                                    </pfx2:Name>
                                    <pfx2:Value>
                                        <xsl:value-of select="$Segment"/>
                                    </pfx2:Value>
                                </pfx2:Atribute>
                                <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                    <xsl:variable name="_attributeName" select="."/>
                                    <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                    <xsl:choose>
                                        <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                </pfx2:Value>
                                                <pfx2:OldValue>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                </pfx2:OldValue>
                                            </pfx2:Atribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <xsl:if test="$_attribute/Value">
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$_attribute/Value"/>
                                                    </pfx2:Value>
                                                </xsl:if>
                                                <xsl:if test="$_attribute/PreviousValue">
                                                    <pfx2:OldValue>
                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                    </pfx2:OldValue>
                                                </xsl:if>
                                            </pfx2:Atribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:for-each>
                            </pfx2:ListAttributes>
                            <pfx2:ProductId>
                                <pfx2:Id>
                                    <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                </pfx2:Id>
                                <xsl:if test="$rootItem/IntegrationId">
                                    <pfx2:InstanceId>
                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                    </pfx2:InstanceId>
                                </xsl:if>
                            </pfx2:ProductId>
                            <pfx2:ProductCustomerData>
                                <pfx2:ExternalBillingAccountId>
                                    <xsl:value-of select="$rootItem/BillAcctCode"/>
                                </pfx2:ExternalBillingAccountId>
                                <pfx2:ListAttributes>
                                    <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute">
                                        <xsl:choose>
                                            <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <xsl:if test="current()/Value">
                                                        <pfx2:Value>
                                                            <xsl:value-of select="current()/Value"/>
                                                        </pfx2:Value>
                                                    </xsl:if>
                                                </pfx2:Atribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:for-each>
                                </pfx2:ListAttributes>
                            </pfx2:ProductCustomerData>
                            <pfx2:ProductPenalty>
                                <xsl:if test="string-length($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value)>0">
                                    <pfx2:PenaltyType>
                                        <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value"/>
                                    </pfx2:PenaltyType>
                                </xsl:if>
                                <pfx2:SkipPenalty>
                                    <xsl:value-of select="$rootItem/SkipPenalty='Y'"/>
                                </pfx2:SkipPenalty>
                                <pfx2:Source>
                                    <xsl:value-of select="''"/>
                                </pfx2:Source>
                                <xsl:if test="string(number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value)) !='NaN'">
                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value">
                                        <pfx2:DiscountDuration>
                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value"/>
                                        </pfx2:DiscountDuration>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="string(number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value))!='NaN'">
                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value">
                                        <pfx2:TotalDeviceAmount>
                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value"/>
                                        </pfx2:TotalDeviceAmount>
                                    </xsl:if>
                                </xsl:if>
                            </pfx2:ProductPenalty>
                        </pfx2:Product>
                    </pfx2:ProductList>
                </pfx2:Request>
            </pfx2:DeleteProductsRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-Data-MTT">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>682</pd:x>
        <pd:y>720</pd:y>
        <config>
            <element ref="pfx2:DeleteProductsRequest"/>
        </config>
        <pd:inputBindings>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="Segment" select="if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101')&#xA;then 'EBU'&#xA;else if ($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102')&#xA;then 'CBU'&#xA;else ''"/>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="rootItem" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ProductCatalogId='21400']"/>
            <pfx2:DeleteProductsRequest>
                <pfx2:Request>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                        <pfx2:ExternalId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </pfx2:ExternalId>
                    </xsl:if>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                        <pfx2:ExternalComponentId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </pfx2:ExternalComponentId>
                    </xsl:if>
                    <pfx2:ProductList>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$rootItem/ListOfChildItem/ChildItem[Action=('Deleted')]">
                            <pfx2:Product>
                                <xsl:variable name="_product" select="."/>
                                <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason">
                                    <pfx2:ActionReason>
                                        <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason"/>
                                    </pfx2:ActionReason>
                                </xsl:if>
                                <pfx2:ProductDuration>
                                    <xsl:choose>
                                        <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                            <pfx2:EndDate>
                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                            </pfx2:EndDate>
                                        </xsl:when>
                                        <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                            <pfx2:EndDate>
                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                            </pfx2:EndDate>
                                        </xsl:when>
                                        <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                            <pfx2:EndDate>
                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                            </pfx2:EndDate>
                                        </xsl:when>
                                        <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order/OrderSourceSystem)='kenan'">
                                            <pfx2:EndDate>
                                                <xsl:value-of select="if (tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate))&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)&#xA;else&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate"/>
                                            </pfx2:EndDate>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <pfx2:EndDate>
                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                            </pfx2:EndDate>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                        <pfx2:StartDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                        </pfx2:StartDate>
                                    </xsl:if>
                                </pfx2:ProductDuration>
                                <pfx2:ListAttributes>
                                    <pfx2:Atribute>
                                        <pfx2:Name>
                                            <xsl:value-of select="'Segment'"/>
                                        </pfx2:Name>
                                        <pfx2:Value>
                                            <xsl:value-of select="$Segment"/>
                                        </pfx2:Value>
                                    </pfx2:Atribute>
                                    <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                        <xsl:variable name="_attributeName" select="."/>
                                        <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                        <xsl:choose>
                                            <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="$_attribute/Name"/>
                                                    </pfx2:Name>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                    </pfx2:Value>
                                                    <pfx2:OldValue>
                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                    </pfx2:OldValue>
                                                </pfx2:Atribute>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="$_attribute/Name"/>
                                                    </pfx2:Name>
                                                    <xsl:if test="$_attribute/Value">
                                                        <pfx2:Value>
                                                            <xsl:value-of select="$_attribute/Value"/>
                                                        </pfx2:Value>
                                                    </xsl:if>
                                                    <xsl:if test="$_attribute/PreviousValue">
                                                        <pfx2:OldValue>
                                                            <xsl:value-of select="$_attribute/PreviousValue"/>
                                                        </pfx2:OldValue>
                                                    </xsl:if>
                                                </pfx2:Atribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:for-each>
                                </pfx2:ListAttributes>
                                <pfx2:ProductId>
                                    <pfx2:Id>
                                        <xsl:value-of select="current()/ProductCatalogId"/>
                                    </pfx2:Id>
                                    <xsl:if test="current()/IntegrationId">
                                        <pfx2:InstanceId>
                                            <xsl:value-of select="current()/IntegrationId"/>
                                        </pfx2:InstanceId>
                                    </xsl:if>
                                </pfx2:ProductId>
                                <pfx2:ProductCustomerData>
                                    <pfx2:ExternalBillingAccountId>
                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                    </pfx2:ExternalBillingAccountId>
                                    <pfx2:ListAttributes>
                                        <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute">
                                            <xsl:choose>
                                                <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                    <pfx2:Atribute>
                                                        <xsl:if test="current()/Name">
                                                            <pfx2:Name>
                                                                <xsl:value-of select="current()/Name"/>
                                                            </pfx2:Name>
                                                        </xsl:if>
                                                        <pfx2:Value>
                                                            <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                        </pfx2:Value>
                                                    </pfx2:Atribute>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:Atribute>
                                                        <xsl:if test="current()/Name">
                                                            <pfx2:Name>
                                                                <xsl:value-of select="current()/Name"/>
                                                            </pfx2:Name>
                                                        </xsl:if>
                                                        <xsl:if test="current()/Value">
                                                            <pfx2:Value>
                                                                <xsl:value-of select="current()/Value"/>
                                                            </pfx2:Value>
                                                        </xsl:if>
                                                    </pfx2:Atribute>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </xsl:for-each>
                                        <xsl:for-each select="$_product/ListOfChildItemAttribute/ChildItemAttribute[exists(Value)]">
                                            <pfx2:Atribute>
                                                <xsl:if test="current()/Name">
                                                    <pfx2:Name>
                                                        <xsl:value-of select="current()/Name"/>
                                                    </pfx2:Name>
                                                </xsl:if>
                                                <xsl:if test="current()/Value">
                                                    <pfx2:Value>
                                                        <xsl:value-of select="current()/Value"/>
                                                    </pfx2:Value>
                                                </xsl:if>
                                            </pfx2:Atribute>
                                        </xsl:for-each>
                                    </pfx2:ListAttributes>
                                </pfx2:ProductCustomerData>
                                <pfx2:ProductPenalty>
                                    <xsl:if test="string-length($_product/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Type']/Value) >0">
                                        <xsl:if test="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Type']/Value">
                                            <pfx2:PenaltyType>
                                                <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Type']/Value"/>
                                            </pfx2:PenaltyType>
                                        </xsl:if>
                                    </xsl:if>
                                    <pfx2:SkipPenalty>
                                        <xsl:value-of select="$_product/SkipPenalty='Y'"/>
                                    </pfx2:SkipPenalty>
                                    <pfx2:Source>
                                        <xsl:value-of select="''"/>
                                    </pfx2:Source>
                                    <xsl:if test="string(number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Duration']/Value)) = 'NaN'">
                                        <xsl:if test="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Duration']/Value">
                                            <pfx2:DiscountDuration>
                                                <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Duration']/Value"/>
                                            </pfx2:DiscountDuration>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="string(number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Total Device Amount']/Value)) !='NaN'">
                                        <xsl:if test="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Total Device Amount']/Value">
                                            <pfx2:TotalDeviceAmount>
                                                <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Total Device Amount']/Value"/>
                                            </pfx2:TotalDeviceAmount>
                                        </xsl:if>
                                    </xsl:if>
                                </pfx2:ProductPenalty>
                            </pfx2:Product>
                        </xsl:for-each>
                    </pfx2:ProductList>
                </pfx2:Request>
            </pfx2:DeleteProductsRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-Data-VPN">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>678</pd:x>
        <pd:y>426</pd:y>
        <config>
            <element ref="pfx2:DeleteProductsRequest"/>
        </config>
        <pd:inputBindings>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="Segment" select="if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101')&#xA;then 'EBU'&#xA;else if ($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102')&#xA;then 'CBU'&#xA;else ''"/>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="rootItem" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]"/>
            <pfx2:DeleteProductsRequest>
                <pfx2:Request>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                        <pfx2:ExternalId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </pfx2:ExternalId>
                    </xsl:if>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                        <pfx2:ExternalComponentId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </pfx2:ExternalComponentId>
                    </xsl:if>
                    <pfx2:ProductList>
                        <pfx2:Product>
                            <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason">
                                <pfx2:ActionReason>
                                    <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason"/>
                                </pfx2:ActionReason>
                            </xsl:if>
                            <pfx2:ProductDuration>
                                <xsl:choose>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order/OrderSourceSystem)='kenan'">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="if (tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate))&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)&#xA;else&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                    <pfx2:StartDate>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                    </pfx2:StartDate>
                                </xsl:if>
                            </pfx2:ProductDuration>
                            <pfx2:ListAttributes>
                                <pfx2:Atribute>
                                    <pfx2:Name>
                                        <xsl:value-of select="'Segment'"/>
                                    </pfx2:Name>
                                    <pfx2:Value>
                                        <xsl:value-of select="$Segment"/>
                                    </pfx2:Value>
                                </pfx2:Atribute>
                                <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                    <xsl:variable name="_attributeName" select="."/>
                                    <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                    <xsl:choose>
                                        <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                </pfx2:Value>
                                                <pfx2:OldValue>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                </pfx2:OldValue>
                                            </pfx2:Atribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <xsl:if test="$_attribute/Value">
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$_attribute/Value"/>
                                                    </pfx2:Value>
                                                </xsl:if>
                                                <xsl:if test="$_attribute/PreviousValue">
                                                    <pfx2:OldValue>
                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                    </pfx2:OldValue>
                                                </xsl:if>
                                            </pfx2:Atribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:for-each>
                            </pfx2:ListAttributes>
                            <pfx2:ProductId>
                                <pfx2:Id>
                                    <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                </pfx2:Id>
                                <xsl:if test="$rootItem/IntegrationId">
                                    <pfx2:InstanceId>
                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                    </pfx2:InstanceId>
                                </xsl:if>
                            </pfx2:ProductId>
                            <pfx2:ProductCustomerData>
                                <pfx2:ExternalBillingAccountId>
                                    <xsl:value-of select="$rootItem/BillAcctCode"/>
                                </pfx2:ExternalBillingAccountId>
                                <pfx2:ListAttributes>
                                    <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute">
                                        <xsl:choose>
                                            <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <xsl:if test="current()/Value">
                                                        <pfx2:Value>
                                                            <xsl:value-of select="current()/Value"/>
                                                        </pfx2:Value>
                                                    </xsl:if>
                                                </pfx2:Atribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:for-each>
                                </pfx2:ListAttributes>
                            </pfx2:ProductCustomerData>
                            <pfx2:ProductPenalty>
                                <xsl:if test="string-length($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value)>0">
                                    <pfx2:PenaltyType>
                                        <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value"/>
                                    </pfx2:PenaltyType>
                                </xsl:if>
                                <pfx2:SkipPenalty>
                                    <xsl:value-of select="$rootItem/SkipPenalty='Y'"/>
                                </pfx2:SkipPenalty>
                                <pfx2:Source>
                                    <xsl:value-of select="''"/>
                                </pfx2:Source>
                                <xsl:if test="string(number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value) )!='NaN'">
                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value">
                                        <pfx2:DiscountDuration>
                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value"/>
                                        </pfx2:DiscountDuration>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="string(number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value))!='NaN'">
                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value">
                                        <pfx2:TotalDeviceAmount>
                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value"/>
                                        </pfx2:TotalDeviceAmount>
                                    </xsl:if>
                                </xsl:if>
                            </pfx2:ProductPenalty>
                        </pfx2:Product>
                    </pfx2:ProductList>
                </pfx2:Request>
            </pfx2:DeleteProductsRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-Data-VSMM Consultancy-SVB">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>683</pd:x>
        <pd:y>624</pd:y>
        <config>
            <element ref="pfx2:DeleteProductsRequest"/>
        </config>
        <pd:inputBindings>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="Segment" select="if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101')&#xA;then 'EBU'&#xA;else if ($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102')&#xA;then 'CBU'&#xA;else ''"/>
            <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="rootItem" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]"/>
            <pfx2:DeleteProductsRequest>
                <pfx2:Request>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                        <pfx2:ExternalId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </pfx2:ExternalId>
                    </xsl:if>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                        <pfx2:ExternalComponentId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </pfx2:ExternalComponentId>
                    </xsl:if>
                    <pfx2:ProductList>
                        <pfx2:Product>
                            <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason">
                                <pfx2:ActionReason>
                                    <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason"/>
                                </pfx2:ActionReason>
                            </xsl:if>
                            <pfx2:ProductDuration>
                                <xsl:choose>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order/OrderSourceSystem)='kenan'">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="if (tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate))&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)&#xA;else&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                    <pfx2:StartDate>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                    </pfx2:StartDate>
                                </xsl:if>
                            </pfx2:ProductDuration>
                            <pfx2:ListAttributes>
                                <pfx2:Atribute>
                                    <pfx2:Name>
                                        <xsl:value-of select="'Segment'"/>
                                    </pfx2:Name>
                                    <pfx2:Value>
                                        <xsl:value-of select="$Segment"/>
                                    </pfx2:Value>
                                </pfx2:Atribute>
                                <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                    <xsl:variable name="_attributeName" select="."/>
                                    <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                    <xsl:choose>
                                        <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                </pfx2:Value>
                                                <pfx2:OldValue>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                </pfx2:OldValue>
                                            </pfx2:Atribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <xsl:if test="$_attribute/Value">
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$_attribute/Value"/>
                                                    </pfx2:Value>
                                                </xsl:if>
                                                <xsl:if test="$_attribute/PreviousValue">
                                                    <pfx2:OldValue>
                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                    </pfx2:OldValue>
                                                </xsl:if>
                                            </pfx2:Atribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:for-each>
                            </pfx2:ListAttributes>
                            <pfx2:ProductId>
                                <pfx2:Id>
                                    <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                </pfx2:Id>
                                <xsl:if test="$rootItem/IntegrationId">
                                    <pfx2:InstanceId>
                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                    </pfx2:InstanceId>
                                </xsl:if>
                            </pfx2:ProductId>
                            <pfx2:ProductCustomerData>
                                <pfx2:ExternalBillingAccountId>
                                    <xsl:value-of select="$rootItem/BillAcctCode"/>
                                </pfx2:ExternalBillingAccountId>
                                <pfx2:ListAttributes>
                                    <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute">
                                        <xsl:choose>
                                            <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <xsl:if test="current()/Value">
                                                        <pfx2:Value>
                                                            <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                        </pfx2:Value>
                                                    </xsl:if>
                                                </pfx2:Atribute>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <xsl:if test="current()/Value">
                                                        <pfx2:Value>
                                                            <xsl:value-of select="current()/Value"/>
                                                        </pfx2:Value>
                                                    </xsl:if>
                                                </pfx2:Atribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:for-each>
                                </pfx2:ListAttributes>
                            </pfx2:ProductCustomerData>
                            <pfx2:ProductPenalty>
                                <xsl:if test="string-length($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value)>0">
                                    <pfx2:PenaltyType>
                                        <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value"/>
                                    </pfx2:PenaltyType>
                                </xsl:if>
                                <pfx2:SkipPenalty>
                                    <xsl:value-of select="$rootItem/SkipPenalty='Y'"/>
                                </pfx2:SkipPenalty>
                                <pfx2:Source>
                                    <xsl:value-of select="''"/>
                                </pfx2:Source>
                                <xsl:if test="number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value) !='NaN'&#xA;and&#xA;exists($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value)">
                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value">
                                        <pfx2:DiscountDuration>
                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value"/>
                                        </pfx2:DiscountDuration>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value)!='NaN'&#xA;and&#xA;exists($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value)">
                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value">
                                        <pfx2:TotalDeviceAmount>
                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value"/>
                                        </pfx2:TotalDeviceAmount>
                                    </xsl:if>
                                </xsl:if>
                            </pfx2:ProductPenalty>
                            <xsl:if test="$rootItem/ProductCatalogId = (&quot;10000&quot;,&quot;30000&quot;,&quot;4000&quot;,&quot;7000&quot;,&quot;8000&quot;,&quot;9000&quot;) and count($rootItem/ListOfChildItem/ChildItem)>0">
                                <pfx2:ChildProductList>
                                    <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem">
                                        <pfx2:Product>
                                            <pfx2:ProductDuration>
                                                <xsl:if test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, EndDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:if>
                                                <xsl:if test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, StartDate)">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, StartDate)"/>
                                                    </pfx2:StartDate>
                                                </xsl:if>
                                            </pfx2:ProductDuration>
                                            <pfx2:ListAttributes>
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="&quot;Segment&quot;"/>
                                                    </pfx2:Name>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$Segment"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                            </pfx2:ListAttributes>
                                            <pfx2:ProductId>
                                                <pfx2:Id>
                                                    <xsl:value-of select="ProductCatalogId"/>
                                                </pfx2:Id>
                                                <xsl:if test="IntegrationId">
                                                    <pfx2:InstanceId>
                                                        <xsl:value-of select="IntegrationId"/>
                                                    </pfx2:InstanceId>
                                                </xsl:if>
                                            </pfx2:ProductId>
                                            <pfx2:ProductCustomerData>
                                                <pfx2:ExternalBillingAccountId>
                                                    <xsl:value-of select="BillAcctCode"/>
                                                </pfx2:ExternalBillingAccountId>
                                            </pfx2:ProductCustomerData>
                                        </pfx2:Product>
                                    </xsl:for-each>
                                </pfx2:ChildProductList>
                            </xsl:if>
                        </pfx2:Product>
                    </pfx2:ProductList>
                </pfx2:Request>
            </pfx2:DeleteProductsRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>212</pd:x>
        <pd:y>423</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>false</validateOutput>
            <term ref="pfx4:OSMOrder"/>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Start/Input/pfx:RequestEAI/pfx:Body/*" element="ns:Request"/>
        </pd:coercions>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:XMLMessage/*[1]"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetGlobalData">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>364</pd:x>
        <pd:y>424</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/TO2FGlobalData/GetGlobalData.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                    <OrderId>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                    </OrderId>
                </xsl:if>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-Data-EnterpriseIQ">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>683</pd:x>
        <pd:y>68</pd:y>
        <config>
            <element ref="pfx2:DeleteProductsRequest"/>
        </config>
        <pd:inputBindings>
            <xsl:variable name="Segment" select="if($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '101')&#xA;then 'EBU'&#xA;else if ($Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount/CustAcctType = '102')&#xA;then 'CBU'&#xA;else ''"/>
            <xsl:variable name="rootItem" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[Action = ('Modified','Deleted')][ProductCatalogId =('5500')]"/>
            <pfx2:DeleteProductsRequest>
                <pfx2:Request>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                        <pfx2:ExternalId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </pfx2:ExternalId>
                    </xsl:if>
                    <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                        <pfx2:ExternalComponentId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </pfx2:ExternalComponentId>
                    </xsl:if>
                    <pfx2:ProductList>
                        <pfx2:Product>
                            <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason">
                                <pfx2:ActionReason>
                                    <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]/ActionReason"/>
                                </pfx2:ActionReason>
                            </xsl:if>
                            <pfx2:ProductDuration>
                                <xsl:choose>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order/OrderSourceSystem)='kenan'">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="if (tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate))&#xA;then&#xA;tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Domains/CustomerCare/Siebel/Formats/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)&#xA;else&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate"/>
                                        </pfx2:EndDate>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                    <pfx2:StartDate>
                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                    </pfx2:StartDate>
                                </xsl:if>
                            </pfx2:ProductDuration>
                            <pfx2:ListAttributes>
                                <pfx2:Atribute>
                                    <pfx2:Name>
                                        <xsl:value-of select="'Segment'"/>
                                    </pfx2:Name>
                                    <pfx2:Value>
                                        <xsl:value-of select="$Segment"/>
                                    </pfx2:Value>
                                </pfx2:Atribute>
                                <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                    <xsl:variable name="_attributeName" select="."/>
                                    <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                    <xsl:choose>
                                        <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                </pfx2:Value>
                                                <pfx2:OldValue>
                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                </pfx2:OldValue>
                                            </pfx2:Atribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <xsl:if test="$_attribute/Value">
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$_attribute/Value"/>
                                                    </pfx2:Value>
                                                </xsl:if>
                                                <xsl:if test="$_attribute/PreviousValue">
                                                    <pfx2:OldValue>
                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                    </pfx2:OldValue>
                                                </xsl:if>
                                            </pfx2:Atribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:for-each>
                            </pfx2:ListAttributes>
                            <pfx2:ProductId>
                                <pfx2:Id>
                                    <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                </pfx2:Id>
                                <xsl:if test="$rootItem/IntegrationId">
                                    <pfx2:InstanceId>
                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                    </pfx2:InstanceId>
                                </xsl:if>
                            </pfx2:ProductId>
                            <pfx2:ProductCustomerData>
                                <pfx2:ExternalBillingAccountId>
                                    <xsl:value-of select="$rootItem/BillAcctCode"/>
                                </pfx2:ExternalBillingAccountId>
                                <pfx2:ListAttributes>
                                    <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute">
                                        <xsl:choose>
                                            <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx2:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx2:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx2:Name>
                                                    </xsl:if>
                                                    <xsl:if test="current()/Value">
                                                        <pfx2:Value>
                                                            <xsl:value-of select="current()/Value"/>
                                                        </pfx2:Value>
                                                    </xsl:if>
                                                </pfx2:Atribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:for-each>
                                </pfx2:ListAttributes>
                            </pfx2:ProductCustomerData>
                            <pfx2:ProductPenalty>
                                <xsl:if test="string-length($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value)>0">
                                    <pfx2:PenaltyType>
                                        <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value"/>
                                    </pfx2:PenaltyType>
                                </xsl:if>
                                <pfx2:SkipPenalty>
                                    <xsl:value-of select="$rootItem/SkipPenalty='Y'"/>
                                </pfx2:SkipPenalty>
                                <pfx2:Source>
                                    <xsl:value-of select="''"/>
                                </pfx2:Source>
                                <xsl:if test="string(number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value) )!='NaN'">
                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value">
                                        <pfx2:DiscountDuration>
                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value"/>
                                        </pfx2:DiscountDuration>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="string(number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value))!='NaN'">
                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value">
                                        <pfx2:TotalDeviceAmount>
                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value"/>
                                        </pfx2:TotalDeviceAmount>
                                    </xsl:if>
                                </xsl:if>
                            </pfx2:ProductPenalty>
                        </pfx2:Product>
                    </pfx2:ProductList>
                </pfx2:Request>
            </pfx2:DeleteProductsRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS Queue Sender</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPenaltyType</pd:from>
        <pd:to>Fail-Order-Component</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse XML</pd:from>
        <pd:to>GetGlobalData</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-M2M</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-VPN</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-MPBX</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-VSMM Consultancy-SVB</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-MTT</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPenaltyType</pd:from>
        <pd:to>GetAttributesByProductCategory</pd:to>
        <pd:xpathDescription>Success</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$GetPenaltyType/ns12:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Header/ns4:ResponseCode = $_globalVariables/ns1:GlobalVariables/ErrorCodes/Success</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Fail-Order-Component</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-Discount</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAttributesByProductCategory</pd:from>
        <pd:to>Map-Data-Discount</pd:to>
        <pd:xpathDescription>Discount</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>(
$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ProductCatalogId=('17000','17100','17200','17300','17400','17500','17600','17700','17800','17900','18000','18100','18200','18300','5000','5005','60007','53002','53007','53008','53001','53003','53000','53006','53005','53004','53009','23000','10900','53039')
or
(
$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ComponentGroup='CAMP'
and $Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ComponentType='DISCOUNT'
and $Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ComponentSubType='M2M DISCOUNT'
)
)
and
contains($Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario, 'ManageVodaparaProducts')</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAttributesByProductCategory</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAttributesByProductCategory</pd:from>
        <pd:to>Map-Data-M2M</pd:to>
        <pd:xpathDescription>M2M</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ProductCatalogId='40000'</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAttributesByProductCategory</pd:from>
        <pd:to>Map-Data-VPN</pd:to>
        <pd:xpathDescription>VPN</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ProductCatalogId='3000'</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAttributesByProductCategory</pd:from>
        <pd:to>Map-Data-MPBX</pd:to>
        <pd:xpathDescription>MPBX</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ProductCatalogId='1600'</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAttributesByProductCategory</pd:from>
        <pd:to>Map-Data-VSMM Consultancy-SVB</pd:to>
        <pd:xpathDescription>VSSM Consultancy</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ProductCatalogId=('10900' ,'10000' ,"10013","30000","4000","4013","7000","7013","8000","8013","9000","9013",'4014','7027','8018','9014','10017')</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAttributesByProductCategory</pd:from>
        <pd:to>Map-Data-MTT</pd:to>
        <pd:xpathDescription>MTT</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ProductCatalogId='21400'</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAttributesByProductCategory</pd:from>
        <pd:to>Map-Data-MAF</pd:to>
        <pd:xpathDescription>MAF</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ProductCatalogId=('26108','26100')</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-MAF</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetGlobalData</pd:from>
        <pd:to>GetPenaltyType</pd:to>
        <pd:xpathDescription>No Penalty in Global Data</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,'Amount_')])=0

and

$Parse-XML/OSMOrder/CategoryAction=('ACT_FRO','CLO_FRO','LIM_FRO','ACT_CAN','ACT_TER','CLO_CAN','CLO_FRO_LSB','LIM_CAN','MOD_OPT','MOD_PLIST')
and
(
count($Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[not(ProductCatalogId = ('5000','5005','11001','60007')) and  ComponentType !='HANDSET'  and Action=('Deleted','Suspend') and ComponentGroup='CAMP']) &gt; 0
or
count($Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[not(ProductCatalogId = ('5000','5005','11001','60007')) and Action=('Deleted','Suspend') and ComponentGroup='CAMP']) &gt; 0
)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetGlobalData</pd:from>
        <pd:to>GetAttributesByProductCategory</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAttributesByProductCategory</pd:from>
        <pd:to>Map-Data-EnterpriseIQ</pd:to>
        <pd:xpathDescription>EnterpriseIQ</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario= 'Billing.Kenan.DeleteProducts.Service.Mobile.DeactivateEnterpriseIQ.Service.Mobile.DeactivateEnterpriseIQ.Base'</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-EnterpriseIQ</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>