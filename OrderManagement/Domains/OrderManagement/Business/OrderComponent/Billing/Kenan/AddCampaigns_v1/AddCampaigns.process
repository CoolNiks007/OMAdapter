<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" xmlns:pfx10="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/AddCampaigns/v1" xmlns:ns32="urn:com:metasolv:oms:xmlapi:1" xmlns:ns12="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentResponseInput/v1" xmlns:eai="java://com.telco.eai.EAIFunctions" xmlns:pfx="http://vodafone.com.tr/EAI/Common/RequestEAI" xmlns:ns2="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns4="http://vodafone.com.tr/EAI/Common/ResponseCodes" xmlns:ns3="http://vodafone.com.tr/EAI/Common/Header" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx5="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx4="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" xmlns:pfx3="http://vodafone.com.tr/ServiceCatalog/Business/Billing/AddProducts/v1" xmlns:pfx2="http://vodafone.com.tr/EAI/Common/ResponseEAI" xmlns:pfx9="http://vodafone.com.tr/ServiceCatalog/Business/CDRManagement/ManageGroup/v1" xmlns:pfx8="http://vodafone.com.tr/ServiceCatalog/ServiceReply" xmlns:pfx7="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberInquiries/GetRemainingBalance/v1" xmlns:pfx6="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/AddProducts/v1">
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/RequestEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/RequestEAI.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/ResponseEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/ResponseEAI.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OrderComponent/OrderComponentRequestInput.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceRequest.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/Billing/AddProducts/v1" schemaLocation="/Domains/ServiceCatalog/Business/Billing/AddProducts_v1/Schemas/AddProducts.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/AddProducts/v1" schemaLocation="/Domains/ServiceCatalog/Business/ProductManagement/AddProducts_v1/Schemas/AddProducts.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberInquiries/GetRemainingBalance/v1" schemaLocation="/Domains/ServiceCatalog/Business/SubscriberInquiries/GetRemainingBalance_v1/Schemas/GetRemainingBalance.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceReply" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceReply.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/CDRManagement/ManageGroup/v1" schemaLocation="/Domains/ServiceCatalog/Business/CDRManagement/ManageGroup_v1/Schemas/ManageGroup.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/AddCampaigns/v1" schemaLocation="/Domains/ServiceCatalog/Business/ProductManagement/AddCampaigns_v1/Schemas/AddCampaigns.xsd"/>
    <pd:name>Domains/OrderManagement/Business/OrderComponent/Billing/Kenan/AddCampaigns_v1/AddCampaigns.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="Input">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:RequestEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>124</pd:startX>
    <pd:startY>166</pd:startY>
    <pd:returnBindings>
        <Output>
            <pfx2:ResponseEAI>
                <pfx2:Header>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ancestor-or-self::*/namespace::node()"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/@*"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/node()"/>
                </pfx2:Header>
                <pfx2:ResponseCodes>
                    <ns4:ResponseCode>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ErrorCodes/Success"/>
                    </ns4:ResponseCode>
                </pfx2:ResponseCodes>
            </pfx2:ResponseEAI>
        </Output>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="Output">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx2:ResponseEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>913</pd:endX>
    <pd:endY>162</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://vodafone.com.tr/1407237293080</pd:targetNamespace>
    <pd:activity name="JMS Queue Sender">
        <pd:type>com.tibco.plugin.jms.JMSQueueSendActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueSendActivity</pd:resourceType>
        <pd:x>752</pd:x>
        <pd:y>165</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx5:ServiceRequest"/>
        </config>
        <pd:inputBindings>
            <ns2:ActivityInput>
                <destinationQueue>
                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:ServiceCatalogQueue"/>
                </destinationQueue>
                <replyToQueue>
                    <xsl:value-of select="tib:concat-sequence-format(($_globalVariables/ns1:GlobalVariables/Constants/Company,$_globalVariables/ns1:GlobalVariables/Constants/ProjectName,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/Name,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Name,$_globalVariables/ns1:GlobalVariables/Constants/Layer/Business,$_globalVariables/ns1:GlobalVariables/Constants/QOS/Guarantee,$_globalVariables/ns1:GlobalVariables/Constants/RequestType/Reply),&quot;.&quot;)"/>
                </replyToQueue>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Priority">
                    <JMSPriority>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Priority"/>
                    </JMSPriority>
                </xsl:if>
                <Body>
                    <pfx5:ServiceRequest>
                        <xsl:for-each select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx5:Header>
                                <xsl:if test="ns3:RequestId">
                                    <ns3:RequestId>
                                        <xsl:value-of select="ns3:RequestId"/>
                                    </ns3:RequestId>
                                </xsl:if>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="ns3:ReplyExpected"/>
                                </ns3:ReplyExpected>
                                <xsl:if test="ns3:QoS">
                                    <ns3:QoS>
                                        <xsl:value-of select="ns3:QoS"/>
                                    </ns3:QoS>
                                </xsl:if>
                                <xsl:if test="ns3:Schedule">
                                    <ns3:Schedule>
                                        <xsl:value-of select="ns3:Schedule"/>
                                    </ns3:Schedule>
                                </xsl:if>
                                <xsl:if test="ns3:CorrelationId">
                                    <ns3:CorrelationId>
                                        <xsl:value-of select="ns3:CorrelationId"/>
                                    </ns3:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns3:Priority">
                                    <ns3:Priority>
                                        <xsl:value-of select="ns3:Priority"/>
                                    </ns3:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <xsl:if test="ns3:Password">
                                            <ns3:Password>
                                                <xsl:value-of select="ns3:Password"/>
                                            </ns3:Password>
                                        </xsl:if>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns3:ProxySystem">
                                    <ns3:ProxySystem>
                                        <xsl:value-of select="ns3:ProxySystem"/>
                                    </ns3:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns3:ForceSimulate">
                                    <ns3:ForceSimulate>
                                        <xsl:value-of select="ns3:ForceSimulate"/>
                                    </ns3:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx5:Header>
                        </xsl:for-each>
                        <pfx5:Body>
                            <xsl:copy-of select="$Map-Data/pfx10:Request"/>
                        </pfx5:Body>
                    </pfx5:ServiceRequest>
                </Body>
            </ns2:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>597</pd:x>
        <pd:y>165</pd:y>
        <config>
            <element ref="pfx10:Request"/>
        </config>
        <pd:inputBindings>
            <xsl:variable name="rootItem" select="$Parse-XML/Order/ListOfRootItem/RootItem[Action = ('New','Existing')]"/>
            <xsl:variable name="var3" select="$rootItem/BillAcctCode"/>
            <xsl:variable name="BillingAccount" select="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[BillAcctCode=$var3]"/>
            <xsl:variable name="var4" select="$rootItem/CustAcctCode"/>
            <xsl:variable name="customerAccount" select="$Parse-XML/Order/ListOfCustomerAccount/CustomerAccount[CustAcctCode=$var4]"/>
            <pfx10:Request>
                <xsl:variable name="var" select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/OrderId"/>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name = $var]/ns3:Value">
                    <pfx10:ExternalId>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name = $var]/ns3:Value"/>
                    </pfx10:ExternalId>
                </xsl:if>
                <xsl:variable name="var2" select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/Id"/>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name = $var2]/ns3:Value">
                    <pfx10:ExternalComponentId>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Attributes/ns3:Attribute[ns3:Name = $var2]/ns3:Value"/>
                    </pfx10:ExternalComponentId>
                </xsl:if>
                <pfx10:ProductList>
                    <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[Action = 'New' and ComponentType='HANDSET']">
                        <pfx10:Product>
                            <xsl:if test="$rootItem/ActionReason">
                                <pfx10:ActionReason>
                                    <xsl:value-of select="$rootItem/ActionReason"/>
                                </pfx10:ActionReason>
                            </xsl:if>
                            <pfx10:ProductDuration>
                                <xsl:if test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, EndDate)">
                                    <pfx10:EndDate>
                                        <xsl:value-of select="tib:parse-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, EndDate)"/>
                                    </pfx10:EndDate>
                                </xsl:if>
                                <xsl:choose>
                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                        <pfx10:StartDate>
                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                        </pfx10:StartDate>
                                    </xsl:when>
                                    <xsl:when test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, ../../../../OrderDueDate) and $rootItem/ActionType = ('127','128','131','137')">
                                        <pfx10:StartDate>
                                            <xsl:value-of select="tib:parse-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, ../../../../OrderDueDate)"/>
                                        </pfx10:StartDate>
                                    </xsl:when>
                                    <xsl:when test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, StartDate)">
                                        <pfx10:StartDate>
                                            <xsl:value-of select="tib:parse-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, StartDate)"/>
                                        </pfx10:StartDate>
                                    </xsl:when>
                                </xsl:choose>
                            </pfx10:ProductDuration>
                            <pfx10:ListAttributes>
                                <xsl:for-each select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name=('Duration','Model','Payment Method','Type')]">
                                    <xsl:if test="current()/Value!=''">
                                        <xsl:choose>
                                            <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                <pfx10:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx10:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx10:Name>
                                                    </xsl:if>
                                                    <pfx10:Value>
                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                    </pfx10:Value>
                                                </pfx10:Atribute>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx10:Atribute>
                                                    <xsl:if test="current()/Name">
                                                        <pfx10:Name>
                                                            <xsl:value-of select="current()/Name"/>
                                                        </pfx10:Name>
                                                    </xsl:if>
                                                    <xsl:if test="current()/Value">
                                                        <pfx10:Value>
                                                            <xsl:value-of select="current()/Value"/>
                                                        </pfx10:Value>
                                                    </xsl:if>
                                                </pfx10:Atribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:if>
                                </xsl:for-each>
                            </pfx10:ListAttributes>
                            <pfx10:ProductId>
                                <pfx10:Id>
                                    <xsl:value-of select="current()/ProductCatalogId"/>
                                </pfx10:Id>
                                <xsl:if test="current()/IntegrationId">
                                    <pfx10:InstanceId>
                                        <xsl:value-of select="current()/IntegrationId"/>
                                    </pfx10:InstanceId>
                                </xsl:if>
                            </pfx10:ProductId>
                            <pfx10:ProductCustomerData>
                                <pfx10:ExternalBillingAccountId>
                                    <xsl:value-of select="current()/BillAcctCode"/>
                                </pfx10:ExternalBillingAccountId>
                                <pfx10:MSISDN>
                                    <xsl:value-of select="$Parse-XML/Order/ListOfRootItem/RootItem[ComponentSubType='MOBILE']/ServiceId"/>
                                </pfx10:MSISDN>
                            </pfx10:ProductCustomerData>
                            <pfx10:RelatedProductList>
                                <pfx10:RelatedProduct>
                                    <xsl:variable name="var5" select="current()/RootItemId"/>
                                    <xsl:variable name="var6" select="current()/RootItemId"/>
                                    <pfx10:ProductId>
                                        <xsl:value-of select="$rootItem[RootItemId=$rootItem[RootItemId=$var5]/PromotionInstanceId]/ProductCatalogId"/>
                                    </pfx10:ProductId>
                                    <xsl:variable name="var7" select="current()/RootItemId"/>
                                    <xsl:variable name="var8" select="current()/RootItemId"/>
                                    <pfx10:InstanceId>
                                        <xsl:value-of select="$rootItem[RootItemId=$rootItem[RootItemId=$var7]/PromotionInstanceId]/IntegrationId"/>
                                    </pfx10:InstanceId>
                                    <pfx10:ListAttributes>
                                        <xsl:choose>
                                            <xsl:when test="$rootItem/CustAcctType = '101'">
                                                <pfx10:Atribute>
                                                    <pfx10:Name>
                                                        <xsl:value-of select="'Segment'"/>
                                                    </pfx10:Name>
                                                    <pfx10:Value>
                                                        <xsl:value-of select="'EBU'"/>
                                                    </pfx10:Value>
                                                </pfx10:Atribute>
                                            </xsl:when>
                                            <xsl:when test="$rootItem/CustAcctType = '102'">
                                                <pfx10:Atribute>
                                                    <pfx10:Name>
                                                        <xsl:value-of select="'Segment'"/>
                                                    </pfx10:Name>
                                                    <pfx10:Value>
                                                        <xsl:value-of select="'CBU'"/>
                                                    </pfx10:Value>
                                                </pfx10:Atribute>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx10:Atribute>
                                                    <pfx10:Name>
                                                        <xsl:value-of select="'Segment'"/>
                                                    </pfx10:Name>
                                                </pfx10:Atribute>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx10:ListAttributes>
                                </pfx10:RelatedProduct>
                            </pfx10:RelatedProductList>
                        </pfx10:Product>
                    </xsl:for-each>
                </pfx10:ProductList>
            </pfx10:Request>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>297</pd:x>
        <pd:y>167</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>false</validateOutput>
            <term>
                <xsd:element name="Order" type="pfx4:Order"/>
            </term>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Start/Input/pfx:RequestEAI/pfx:Body/*" element="ns:Request"/>
        </pd:coercions>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:XMLMessage/*[1]"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetGlobalData">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>450</pd:x>
        <pd:y>165</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/TO2FGlobalData/GetGlobalData.process</processName>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Start/Input/pfx:RequestEAI/pfx:Body/*" element="ns:Request"/>
        </pd:coercions>
        <pd:inputBindings>
            <Input>
                <OrderId>
                    <xsl:value-of xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                </OrderId>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse XML</pd:from>
        <pd:to>GetGlobalData</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS Queue Sender</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetGlobalData</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>