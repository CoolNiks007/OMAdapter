<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx61="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/AddProducts/v1" xmlns:ns="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" xmlns:pfx5="http://vodafone.com.tr/EAI/Common/ResponseEAI" xmlns:pfx31="http://vodafone.com.tr/ServiceCatalog/Business/Billing/AddProducts/v1" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx4="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" xmlns:pfx2="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/ManageProducts/v1" xmlns:pfx9="http://vodafone.com.tr/ServiceCatalog/Business/CDRManagement/ManageGroup/v1" xmlns:pfx8="http://vodafone.com.tr/ServiceCatalog/ServiceReply" xmlns:pfx7="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberInquiries/GetRemainingBalance/v1" xmlns:pfx6="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns32="http://vodafone.com.tr/ServiceCatalog/Business/PenaltyInquiries/CalculatePenaltyType/v1" xmlns:ns33="urn:com:metasolv:oms:xmlapi:1" xmlns:ns5="http://vodafone.com.tr/ServiceCatalog/Business/PenaltyInquiries/GetPenalties/v1" xmlns:ns12="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentResponseInput/v1" xmlns:eai="java://com.telco.eai.EAIFunctions" xmlns:pfx="http://vodafone.com.tr/EAI/Common/RequestEAI" xmlns:ns2="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns4="http://vodafone.com.tr/EAI/Common/ResponseCodes" xmlns:ns3="http://vodafone.com.tr/EAI/Common/Header" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx21="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/DeleteProducts/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <xsd:import namespace="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OrderComponent/OrderComponentRequestInput.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/ResponseEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/ResponseEAI.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/ProductManagement/ManageProducts/v1" schemaLocation="/Domains/ServiceCatalog/Business/ProductManagement/ManageProducts_v1/Schemas/ManageProducts.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceReply" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceReply.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/RequestEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/RequestEAI.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceRequest.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/PenaltyInquiries/CalculatePenaltyType/v1" schemaLocation="/Domains/ServiceCatalog/Business/PenaltyInquiries/CalculatePenaltyType_v1/Schemas/CalculatePenaltyType.xsd"/>
    <pd:name>Domains/OrderManagement/Business/OrderComponent/Billing/Kenan/ManageProducts_v1/ManageProducts.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="Input">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:RequestEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>32</pd:startX>
    <pd:startY>57</pd:startY>
    <pd:returnBindings>
        <Output>
            <pfx5:ResponseEAI>
                <pfx5:Header>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ancestor-or-self::*/namespace::node()"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/@*"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/node()"/>
                </pfx5:Header>
                <pfx5:ResponseCodes>
                    <ns4:ResponseCode>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ErrorCodes/Success"/>
                    </ns4:ResponseCode>
                    <ns4:ResponseMsg>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ErrorCodes/SuccessDescription"/>
                    </ns4:ResponseMsg>
                </pfx5:ResponseCodes>
            </pfx5:ResponseEAI>
        </Output>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="Output">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx5:ResponseEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>826</pd:endX>
    <pd:endY>62</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://vodafone.com.tr/1412871172241</pd:targetNamespace>
    <pd:activity name="JMS Queue Sender">
        <pd:type>com.tibco.plugin.jms.JMSQueueSendActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueSendActivity</pd:resourceType>
        <pd:x>658</pd:x>
        <pd:y>61</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx4:ServiceRequest"/>
        </config>
        <pd:inputBindings>
            <ns2:ActivityInput>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:ServiceCatalogQueue">
                    <destinationQueue>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:ServiceCatalogQueue"/>
                    </destinationQueue>
                </xsl:if>
                <replyToQueue>
                    <xsl:value-of select="tib:concat-sequence-format(($_globalVariables/ns1:GlobalVariables/Constants/Company,$_globalVariables/ns1:GlobalVariables/Constants/ProjectName,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/Name,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Name,$_globalVariables/ns1:GlobalVariables/Constants/Layer/Business,$_globalVariables/ns1:GlobalVariables/Constants/QOS/Guarantee,$_globalVariables/ns1:GlobalVariables/Constants/RequestType/Reply),&quot;.&quot;)"/>
                </replyToQueue>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Priority">
                    <JMSPriority>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Priority"/>
                    </JMSPriority>
                </xsl:if>
                <Body>
                    <pfx4:ServiceRequest>
                        <xsl:for-each select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx4:Header>
                                <xsl:if test="ns3:RequestId">
                                    <ns3:RequestId>
                                        <xsl:value-of select="ns3:RequestId"/>
                                    </ns3:RequestId>
                                </xsl:if>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="ns3:ReplyExpected"/>
                                </ns3:ReplyExpected>
                                <xsl:if test="ns3:QoS">
                                    <ns3:QoS>
                                        <xsl:value-of select="ns3:QoS"/>
                                    </ns3:QoS>
                                </xsl:if>
                                <xsl:if test="ns3:Schedule">
                                    <ns3:Schedule>
                                        <xsl:value-of select="ns3:Schedule"/>
                                    </ns3:Schedule>
                                </xsl:if>
                                <xsl:if test="ns3:CorrelationId">
                                    <ns3:CorrelationId>
                                        <xsl:value-of select="ns3:CorrelationId"/>
                                    </ns3:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns3:Priority">
                                    <ns3:Priority>
                                        <xsl:value-of select="ns3:Priority"/>
                                    </ns3:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <xsl:if test="ns3:Password">
                                            <ns3:Password>
                                                <xsl:value-of select="ns3:Password"/>
                                            </ns3:Password>
                                        </xsl:if>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns3:ProxySystem">
                                    <ns3:ProxySystem>
                                        <xsl:value-of select="ns3:ProxySystem"/>
                                    </ns3:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns3:ForceSimulate">
                                    <ns3:ForceSimulate>
                                        <xsl:value-of select="ns3:ForceSimulate"/>
                                    </ns3:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx4:Header>
                        </xsl:for-each>
                        <pfx4:Body>
                            <xsl:copy-of select="$Map-Data/pfx2:Request"/>
                        </pfx4:Body>
                    </pfx4:ServiceRequest>
                </Body>
            </ns2:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>541</pd:x>
        <pd:y>59</pd:y>
        <config>
            <element ref="pfx2:Request"/>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/*" element="ns32:Response"/>
            <pd:coercion xpath="$Parse-XML/OSMOrder/XMLMessage/*" element="pfx3:Order" cardinality=""/>
        </pd:coercions>
        <pd:inputBindings>
            <xsl:variable name="rootItem" select="if (count($Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ComponentSubType = 'MOBILE' and (Action = ('New','Modified','Deleted') or (Action = 'Existing' and ListOfChildItem/ChildItem[Action = ('New','Modified','Deleted')]))])>0)&#xA;then&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ComponentSubType = 'MOBILE' and (Action = ('New','Modified','Deleted') or (Action = 'Existing' and ListOfChildItem/ChildItem[Action = ('New','Modified','Deleted')]))]&#xA;else&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[1]&#xA;"/>
            <xsl:variable name="var" select="$rootItem/CustAcctCode"/>
            <xsl:variable name="customerAccount" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount[CustAcctCode = $var]"/>
            <xsl:variable name="Segment" select="if($customerAccount/CustAcctType = '101')&#xA;then 'EBU'&#xA;else 'CBU'"/>
            <xsl:choose>
                <xsl:when test="{--SVB Group--}&#xA;$rootItem/ProductCatalogId = (&quot;10000&quot;,&quot;30000&quot;,&quot;4000&quot;,&quot;7000&quot;,&quot;8000&quot;,&quot;9000&quot;,&quot;1600&quot;)">
                    <pfx2:Request>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                            <pfx2:ExternalId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                            </pfx2:ExternalId>
                        </xsl:if>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                            <pfx2:ExternalComponentId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                            </pfx2:ExternalComponentId>
                        </xsl:if>
                        <xsl:choose>
                            <xsl:when test="$rootItem/Action='Deleted'">
                                <pfx2:DeleteProductList>
                                    <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[Action='Deleted' and ProductCatalogId !='1103' ]">
                                        <pfx2:Product>
                                            <xsl:variable name="_product" select="."/>
                                            <xsl:if test="$rootItem/ActionReason">
                                                <pfx2:ActionReason>
                                                    <xsl:value-of select="$rootItem/ActionReason"/>
                                                </pfx2:ActionReason>
                                            </xsl:if>
                                            <xsl:if test="$rootItem/ActionType">
                                                <pfx2:ActionType>
                                                    <xsl:value-of select="$rootItem/ActionType"/>
                                                </pfx2:ActionType>
                                            </xsl:if>
                                            <pfx2:ProductDuration>
                                                <xsl:choose>
                                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value)>0">
                                                        <pfx2:EndDate>
                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningEndDateTime]/Value"/>
                                                        </pfx2:EndDate>
                                                    </xsl:when>
                                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                        <pfx2:EndDate>
                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                        </pfx2:EndDate>
                                                    </xsl:when>
                                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/EndDate)">
                                                        <pfx2:EndDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/EndDate)"/>
                                                        </pfx2:EndDate>
                                                    </xsl:when>
                                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)">
                                                        <pfx2:EndDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                                        </pfx2:EndDate>
                                                    </xsl:when>
                                                </xsl:choose>
                                                <xsl:choose>
                                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/StartDate)">
                                                        <pfx2:StartDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/StartDate)"/>
                                                        </pfx2:StartDate>
                                                    </xsl:when>
                                                </xsl:choose>
                                            </pfx2:ProductDuration>
                                            <pfx2:ListAttributes>
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="'Segment'"/>
                                                    </pfx2:Name>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$Segment"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                                <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                    <xsl:variable name="_attributeName" select="."/>
                                                    <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                    <xsl:choose>
                                                        <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="$_attribute/Name"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                                </pfx2:Value>
                                                                <pfx2:OldValue>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                                </pfx2:OldValue>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="$_attribute/Name"/>
                                                                </pfx2:Name>
                                                                <xsl:if test="$_attribute/Value">
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="$_attribute/Value"/>
                                                                    </pfx2:Value>
                                                                </xsl:if>
                                                                <pfx2:OldValue>
                                                                    <xsl:value-of select="$_attribute/PreviousValue"/>
                                                                </pfx2:OldValue>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </pfx2:ListAttributes>
                                            <pfx2:ProductId>
                                                <pfx2:Id>
                                                    <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                                </pfx2:Id>
                                                <xsl:if test="$rootItem/IntegrationId">
                                                    <pfx2:InstanceId>
                                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                                    </pfx2:InstanceId>
                                                </xsl:if>
                                            </pfx2:ProductId>
                                            <pfx2:ProductCustomerData>
                                                <pfx2:ExternalBillingAccountId>
                                                    <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                </pfx2:ExternalBillingAccountId>
                                                <pfx2:ListAttributes>
                                                    <pfx2:Atribute>
                                                        <pfx2:Name>
                                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name='SVB Group Number']/Name"/>
                                                        </pfx2:Name>
                                                        <pfx2:Value>
                                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name='SVB Group Number']/Value"/>
                                                        </pfx2:Value>
                                                    </pfx2:Atribute>
                                                </pfx2:ListAttributes>
                                            </pfx2:ProductCustomerData>
                                            <pfx2:ProductPenalty>
                                                <xsl:if test="string-length($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value) >0">
                                                    <pfx2:PenaltyType>
                                                        <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value"/>
                                                    </pfx2:PenaltyType>
                                                </xsl:if>
                                                <pfx2:SkipPenalty>
                                                    <xsl:value-of select="$rootItem/SkipPenalty='Y'"/>
                                                </pfx2:SkipPenalty>
                                                <pfx2:Source>
                                                    <xsl:value-of select="''"/>
                                                </pfx2:Source>
                                                <xsl:if test="number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value) !='NaN'&#xA;and&#xA;exists($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value)">
                                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value">
                                                        <pfx2:DiscountDuration>
                                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Discount Duration']/Value"/>
                                                        </pfx2:DiscountDuration>
                                                    </xsl:if>
                                                </xsl:if>
                                                <xsl:if test="number($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value) !='NaN'&#xA;and&#xA;exists($rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value)">
                                                    <xsl:if test="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value">
                                                        <pfx2:TotalDeviceAmount>
                                                            <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value"/>
                                                        </pfx2:TotalDeviceAmount>
                                                    </xsl:if>
                                                </xsl:if>
                                            </pfx2:ProductPenalty>
                                            <xsl:choose>
                                                <xsl:when test="current()/Action = 'Deleted'">
                                                    <pfx2:ChildProductList>
                                                        <pfx2:Product>
                                                            <pfx2:ProductDuration>
                                                                <xsl:choose>
                                                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                                        <pfx2:EndDate>
                                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                                        </pfx2:EndDate>
                                                                    </xsl:when>
                                                                </xsl:choose>
                                                                <xsl:choose>
                                                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                                        <pfx2:StartDate>
                                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                                        </pfx2:StartDate>
                                                                    </xsl:when>
                                                                </xsl:choose>
                                                                <pfx2:DurationUnitsType>
                                                                    <xsl:value-of select="'-1'"/>
                                                                </pfx2:DurationUnitsType>
                                                            </pfx2:ProductDuration>
                                                            <pfx2:ListAttributes>
                                                                <pfx2:Atribute>
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="'Segment'"/>
                                                                    </pfx2:Name>
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="$Segment"/>
                                                                    </pfx2:Value>
                                                                </pfx2:Atribute>
                                                            </pfx2:ListAttributes>
                                                            <pfx2:ProductId>
                                                                <pfx2:Id>
                                                                    <xsl:value-of select="current()/ProductCatalogId"/>
                                                                </pfx2:Id>
                                                                <xsl:if test="current()/IntegrationId">
                                                                    <pfx2:InstanceId>
                                                                        <xsl:value-of select="current()/IntegrationId"/>
                                                                    </pfx2:InstanceId>
                                                                </xsl:if>
                                                            </pfx2:ProductId>
                                                            <pfx2:ProductCustomerData>
                                                                <pfx2:ExternalBillingAccountId>
                                                                    <xsl:value-of select="current()/BillAcctCode"/>
                                                                </pfx2:ExternalBillingAccountId>
                                                            </pfx2:ProductCustomerData>
                                                        </pfx2:Product>
                                                    </pfx2:ChildProductList>
                                                </xsl:when>
                                            </xsl:choose>
                                        </pfx2:Product>
                                    </xsl:for-each>
                                </pfx2:DeleteProductList>
                            </xsl:when>
                        </xsl:choose>
                        <xsl:choose>
                            <xsl:when test="count($rootItem/ListOfChildItem/ChildItem[ProductCatalogId=('4020','7020','8020','9020','10020','30020','10016') and Action='New']) > 0">
                                <pfx2:AddProductList>
                                    <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[ProductCatalogId=('4020','7020','8020','9020','10020','30020','10016') and Action='New']">
                                        <pfx2:Product>
                                            <xsl:variable name="_product" select="."/>
                                            <xsl:if test="$rootItem/ActionReason">
                                                <pfx2:ActionReason>
                                                    <xsl:value-of select="$rootItem/ActionReason"/>
                                                </pfx2:ActionReason>
                                            </xsl:if>
                                            <xsl:if test="$rootItem/ActionType">
                                                <pfx2:ActionType>
                                                    <xsl:value-of select="$rootItem/ActionType"/>
                                                </pfx2:ActionType>
                                            </xsl:if>
                                            <xsl:if test="string-length($Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag)>0">
                                                <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag">
                                                    <pfx2:isFDOOrder>
                                                        <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag"/>
                                                    </pfx2:isFDOOrder>
                                                </xsl:if>
                                            </xsl:if>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate)">
                                                <pfx2:OrderCreationDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate)"/>
                                                </pfx2:OrderCreationDate>
                                            </xsl:if>
                                            <pfx2:ProductDuration>
                                                <xsl:choose>
                                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                        <pfx2:EndDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                        </pfx2:EndDate>
                                                    </xsl:when>
                                                </xsl:choose>
                                                <xsl:choose>
                                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                        <pfx2:StartDate>
                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                        </pfx2:StartDate>
                                                    </xsl:when>
                                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                        <pfx2:StartDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                        </pfx2:StartDate>
                                                    </xsl:when>
                                                </xsl:choose>
                                            </pfx2:ProductDuration>
                                            <pfx2:ListAttributes>
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="'Segment'"/>
                                                    </pfx2:Name>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$Segment"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                                <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                    <xsl:variable name="_attributeName" select="."/>
                                                    <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                    <xsl:choose>
                                                        <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="$_attribute/Name"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                                </pfx2:Value>
                                                                <pfx2:OldValue>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                                </pfx2:OldValue>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="$_attribute/Name"/>
                                                                </pfx2:Name>
                                                                <xsl:if test="$_attribute/Value">
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="$_attribute/Value"/>
                                                                    </pfx2:Value>
                                                                </xsl:if>
                                                                <pfx2:OldValue>
                                                                    <xsl:value-of select="$_attribute/PreviousValue"/>
                                                                </pfx2:OldValue>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </pfx2:ListAttributes>
                                            <pfx2:ProductId>
                                                <pfx2:Id>
                                                    <xsl:value-of select="current()/ProductCatalogId"/>
                                                </pfx2:Id>
                                                <xsl:if test="current()/IntegrationId">
                                                    <pfx2:InstanceId>
                                                        <xsl:value-of select="current()/IntegrationId"/>
                                                    </pfx2:InstanceId>
                                                </xsl:if>
                                            </pfx2:ProductId>
                                            <pfx2:ProductCustomerData>
                                                <pfx2:ExternalBillingAccountId>
                                                    <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                </pfx2:ExternalBillingAccountId>
                                                <pfx2:MSISDN>
                                                    <xsl:value-of select="$rootItem/MSISDN"/>
                                                </pfx2:MSISDN>
                                                <pfx2:ListAttributes>
                                                    <xsl:for-each select="current()/ListOfChildItemAttribute/ChildItemAttribute">
                                                        <xsl:choose>
                                                            <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                                <pfx2:Atribute>
                                                                    <xsl:if test="current()/Name">
                                                                        <pfx2:Name>
                                                                            <xsl:value-of select="current()/Name"/>
                                                                        </pfx2:Name>
                                                                    </xsl:if>
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                    </pfx2:Value>
                                                                </pfx2:Atribute>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <pfx2:Atribute>
                                                                    <xsl:if test="current()/Name">
                                                                        <pfx2:Name>
                                                                            <xsl:value-of select="current()/Name"/>
                                                                        </pfx2:Name>
                                                                    </xsl:if>
                                                                    <xsl:if test="current()/Value">
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="current()/Value"/>
                                                                        </pfx2:Value>
                                                                    </xsl:if>
                                                                </pfx2:Atribute>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </xsl:for-each>
                                                </pfx2:ListAttributes>
                                            </pfx2:ProductCustomerData>
                                        </pfx2:Product>
                                    </xsl:for-each>
                                </pfx2:AddProductList>
                            </xsl:when>
                        </xsl:choose>
                        <xsl:choose>
                            <xsl:when test="count($rootItem[Action=('Modified','Suspend','Resume','Existing')])>0">
                                <pfx2:ModifyProductList>
                                    <pfx2:Product>
                                        <xsl:if test="$rootItem/ActionReason">
                                            <pfx2:ActionReason>
                                                <xsl:value-of select="$rootItem/ActionReason"/>
                                            </pfx2:ActionReason>
                                        </xsl:if>
                                        <xsl:if test="$rootItem/ActionType">
                                            <pfx2:ActionType>
                                                <xsl:value-of select="$rootItem/ActionType"/>
                                            </pfx2:ActionType>
                                        </xsl:if>
                                        <pfx2:ProductDuration>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/EndDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/StartDate)">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/StartDate)"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/ModifyDate)&#xA;and&#xA;$rootItem/Action=('Modified','Suspend','Resume')">
                                                    <pfx2:ModifyDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/ModifyDate)"/>
                                                    </pfx2:ModifyDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/DueDate)&#xA;and&#xA;$rootItem/Action=('Modified','Suspend','Resume')">
                                                    <pfx2:ModifyDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/DueDate)"/>
                                                    </pfx2:ModifyDate>
                                                </xsl:when>
                                            </xsl:choose>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                                <xsl:variable name="_attributeName" select="."/>
                                                <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                                <xsl:choose>
                                                    <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <pfx2:Value>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                            </pfx2:Value>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="$_attribute/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$_attribute/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="$_attribute/PreviousValue"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="$rootItem/IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="$rootItem/IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <pfx2:ExternalBillingAccountId>
                                                <xsl:value-of select="$rootItem/BillAcctCode"/>
                                            </pfx2:ExternalBillingAccountId>
                                            <pfx2:ListAttributes>
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="'Action'"/>
                                                    </pfx2:Name>
                                                    <xsl:choose>
                                                        <xsl:when test="$rootItem/Action = 'Existing'">
                                                            <pfx2:Value>
                                                                <xsl:value-of select="'Modified'"/>
                                                            </pfx2:Value>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:if test="$rootItem/Action">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$rootItem/Action"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </pfx2:Atribute>
                                                <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute">
                                                    <xsl:choose>
                                                        <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="current()/Name"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                </pfx2:Value>
                                                                <pfx2:OldValue>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/PreviousValue)"/>
                                                                </pfx2:OldValue>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="current()/Name"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="current()/Value"/>
                                                                </pfx2:Value>
                                                                <pfx2:OldValue>
                                                                    <xsl:value-of select="current()/PreviousValue"/>
                                                                </pfx2:OldValue>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </pfx2:ListAttributes>
                                        </pfx2:ProductCustomerData>
                                        <xsl:if test="count($rootItem/ListOfChildItem/ChildItem[not(Action='Existing')]) > 0">
                                            <pfx2:ChildProductList>
                                                <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[not(ProductCatalogId=('4020','7020','8020','9020','10020','30020','10016'))][not(Action='Existing')]">
                                                    <pfx2:Product>
                                                        <pfx2:ProductDuration>
                                                            <xsl:choose>
                                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                                    <pfx2:EndDate>
                                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                                    </pfx2:EndDate>
                                                                </xsl:when>
                                                            </xsl:choose>
                                                            <xsl:choose>
                                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                                    <pfx2:StartDate>
                                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                                    </pfx2:StartDate>
                                                                </xsl:when>
                                                            </xsl:choose>
                                                            <pfx2:DurationUnitsType>
                                                                <xsl:value-of select="'-1'"/>
                                                            </pfx2:DurationUnitsType>
                                                            <xsl:choose>
                                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/ModifyDate)&#xA;and&#xA;current()/Action=('Modified','Suspend','Resume')">
                                                                    <pfx2:ModifyDate>
                                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/ModifyDate)"/>
                                                                    </pfx2:ModifyDate>
                                                                </xsl:when>
                                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/ModifyDate)&#xA;and&#xA;current()/Action=('Modified','Suspend','Resume')">
                                                                    <pfx2:ModifyDate>
                                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/DueDate)"/>
                                                                    </pfx2:ModifyDate>
                                                                </xsl:when>
                                                            </xsl:choose>
                                                        </pfx2:ProductDuration>
                                                        <pfx2:ListAttributes>
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="'Segment'"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$Segment"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </pfx2:ListAttributes>
                                                        <pfx2:ProductId>
                                                            <pfx2:Id>
                                                                <xsl:value-of select="current()/ProductCatalogId"/>
                                                            </pfx2:Id>
                                                            <xsl:if test="current()/IntegrationId">
                                                                <pfx2:InstanceId>
                                                                    <xsl:value-of select="current()/IntegrationId"/>
                                                                </pfx2:InstanceId>
                                                            </xsl:if>
                                                        </pfx2:ProductId>
                                                        <pfx2:ProductCustomerData>
                                                            <pfx2:ExternalBillingAccountId>
                                                                <xsl:value-of select="current()/BillAcctCode"/>
                                                            </pfx2:ExternalBillingAccountId>
                                                            <pfx2:ListAttributes>
                                                                <pfx2:Atribute>
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="'Action'"/>
                                                                    </pfx2:Name>
                                                                    <xsl:if test="current()/Action">
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="current()/Action"/>
                                                                        </pfx2:Value>
                                                                    </xsl:if>
                                                                </pfx2:Atribute>
                                                                <xsl:if test="current()/Action = 'New'">
                                                                    <pfx2:Atribute>
                                                                        <pfx2:Name>
                                                                            <xsl:value-of select="'ParentIntegrationId'"/>
                                                                        </pfx2:Name>
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="$rootItem/IntegrationId"/>
                                                                        </pfx2:Value>
                                                                    </pfx2:Atribute>
                                                                </xsl:if>
                                                            </pfx2:ListAttributes>
                                                        </pfx2:ProductCustomerData>
                                                    </pfx2:Product>
                                                </xsl:for-each>
                                            </pfx2:ChildProductList>
                                        </xsl:if>
                                    </pfx2:Product>
                                </pfx2:ModifyProductList>
                            </xsl:when>
                        </xsl:choose>
                    </pfx2:Request>
                </xsl:when>
                <xsl:when test="{--M2M Group--}&#xA;$rootItem/ProductCatalogId = ('40000')">
                    <pfx2:Request>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                            <pfx2:ExternalId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                            </pfx2:ExternalId>
                        </xsl:if>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                            <pfx2:ExternalComponentId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                            </pfx2:ExternalComponentId>
                        </xsl:if>
                        <xsl:if test="$rootItem[ProductCatalogId = ('40000')]/Action=('Suspend','Deleted','Existing','Modified')">
                            <xsl:choose>
                                <xsl:when test="$rootItem[ProductCatalogId = ('40000')]/Action=('Suspend','Deleted')">
                                    <pfx2:DeleteProductList>
                                        <pfx2:Product>
                                            <xsl:if test="$rootItem/ActionReason">
                                                <pfx2:ActionReason>
                                                    <xsl:value-of select="$rootItem/ActionReason"/>
                                                </pfx2:ActionReason>
                                            </xsl:if>
                                            <pfx2:ProductDuration>
                                                <xsl:choose>
                                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                        <pfx2:EndDate>
                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                        </pfx2:EndDate>
                                                    </xsl:when>
                                                    <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                        <pfx2:EndDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                        </pfx2:EndDate>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:EndDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                                        </pfx2:EndDate>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                                <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                    </pfx2:StartDate>
                                                </xsl:if>
                                            </pfx2:ProductDuration>
                                            <pfx2:ListAttributes>
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="'Segment'"/>
                                                    </pfx2:Name>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$Segment"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                                <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                                    <xsl:variable name="_attributeName" select="."/>
                                                    <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                                    <pfx2:Atribute>
                                                        <pfx2:Name>
                                                            <xsl:value-of select="$_attribute/Name"/>
                                                        </pfx2:Name>
                                                        <xsl:if test="$_attribute/Value">
                                                            <pfx2:Value>
                                                                <xsl:value-of select="$_attribute/Value"/>
                                                            </pfx2:Value>
                                                        </xsl:if>
                                                        <pfx2:OldValue>
                                                            <xsl:value-of select="$_attribute/PreviousValue"/>
                                                        </pfx2:OldValue>
                                                    </pfx2:Atribute>
                                                </xsl:for-each>
                                            </pfx2:ListAttributes>
                                            <pfx2:ProductId>
                                                <pfx2:Id>
                                                    <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                                </pfx2:Id>
                                                <xsl:if test="$rootItem/IntegrationId">
                                                    <pfx2:InstanceId>
                                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                                    </pfx2:InstanceId>
                                                </xsl:if>
                                            </pfx2:ProductId>
                                            <pfx2:ProductCustomerData>
                                                <pfx2:ExternalBillingAccountId>
                                                    <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                </pfx2:ExternalBillingAccountId>
                                                <pfx2:ListAttributes>
                                                    <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute">
                                                        <xsl:choose>
                                                            <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                                <pfx2:Atribute>
                                                                    <xsl:if test="current()/Name">
                                                                        <pfx2:Name>
                                                                            <xsl:value-of select="current()/Name"/>
                                                                        </pfx2:Name>
                                                                    </xsl:if>
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                    </pfx2:Value>
                                                                </pfx2:Atribute>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <pfx2:Atribute>
                                                                    <xsl:if test="current()/Name">
                                                                        <pfx2:Name>
                                                                            <xsl:value-of select="current()/Name"/>
                                                                        </pfx2:Name>
                                                                    </xsl:if>
                                                                    <xsl:if test="current()/Value">
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="current()/Value"/>
                                                                        </pfx2:Value>
                                                                    </xsl:if>
                                                                </pfx2:Atribute>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </xsl:for-each>
                                                </pfx2:ListAttributes>
                                            </pfx2:ProductCustomerData>
                                            <xsl:variable name="_productPenalty" select="if (count($GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign)>0) then&#xA;$GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign[ns32:CampaignCode=current()/IntegrationId]&#xA;else&#xA;$GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)]"/>
                                            <xsl:choose>
                                                <xsl:when test="$_productPenalty">
                                                    <xsl:choose>
                                                        <xsl:when test="count($GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign)>0">
                                                            <pfx2:ProductPenalty>
                                                                <xsl:if test="number($_productPenalty/ns32:Amount) !='NaN'">
                                                                    <xsl:if test="$_productPenalty/ns32:Amount">
                                                                        <pfx2:PenaltyAmount>
                                                                            <xsl:value-of select="$_productPenalty/ns32:Amount"/>
                                                                        </pfx2:PenaltyAmount>
                                                                    </xsl:if>
                                                                </xsl:if>
                                                                <xsl:if test="$_productPenalty/ns32:PenaltyMethod">
                                                                    <pfx2:PenaltyMethod>
                                                                        <xsl:value-of select="$_productPenalty/ns32:PenaltyMethod"/>
                                                                    </pfx2:PenaltyMethod>
                                                                </xsl:if>
                                                                <xsl:if test="$_productPenalty/ns32:PenaltyCalculationMode">
                                                                    <pfx2:PenaltyCalculationMode>
                                                                        <xsl:value-of select="$_productPenalty/ns32:PenaltyCalculationMode"/>
                                                                    </pfx2:PenaltyCalculationMode>
                                                                </xsl:if>
                                                                <pfx2:SkipPenalty>
                                                                    <xsl:value-of select="current()/SkipPenalty='Y'"/>
                                                                </pfx2:SkipPenalty>
                                                                <xsl:choose>
                                                                    <xsl:when test="count($_productPenalty/ns32:PenaltyItems)>0&#xA;and &#xA;(current()/ComponentGroup=&quot;CAMP&quot; and current()/Action=&quot;Deleted&quot;  and   current()/ProvisioningFlg=&quot;Y&quot; and current()/BillingFlg=&quot;Y&quot;)">
                                                                        <pfx2:Source>
                                                                            <xsl:value-of select="'PTSM'"/>
                                                                        </pfx2:Source>
                                                                    </xsl:when>
                                                                    <xsl:otherwise>
                                                                        <pfx2:Source>
                                                                            <xsl:value-of select="''"/>
                                                                        </pfx2:Source>
                                                                    </xsl:otherwise>
                                                                </xsl:choose>
                                                            </pfx2:ProductPenalty>
                                                        </xsl:when>
                                                        <xsl:when test="count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)])>0">
                                                            <pfx2:ProductPenalty>
                                                                <xsl:if test="number($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value) !='NaN'">
                                                                    <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                        <pfx2:PenaltyAmount>
                                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                        </pfx2:PenaltyAmount>
                                                                    </xsl:if>
                                                                </xsl:if>
                                                                <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                    <pfx2:PenaltyMethod>
                                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                    </pfx2:PenaltyMethod>
                                                                </xsl:if>
                                                                <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                    <pfx2:PenaltyCalculationMode>
                                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                    </pfx2:PenaltyCalculationMode>
                                                                </xsl:if>
                                                                <pfx2:SkipPenalty>
                                                                    <xsl:value-of select="current()/SkipPenalty='Y'"/>
                                                                </pfx2:SkipPenalty>
                                                                <pfx2:Source>
                                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltySource&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                </pfx2:Source>
                                                            </pfx2:ProductPenalty>
                                                        </xsl:when>
                                                    </xsl:choose>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ProductPenalty>
                                                        <pfx2:SkipPenalty>
                                                            <xsl:value-of select="true()"/>
                                                        </pfx2:SkipPenalty>
                                                        <pfx2:Source>
                                                            <xsl:value-of select="''"/>
                                                        </pfx2:Source>
                                                    </pfx2:ProductPenalty>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </pfx2:Product>
                                        <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[Action='Deleted']">
                                            <pfx2:Product>
                                                <xsl:variable name="_product" select="."/>
                                                <xsl:if test="$rootItem/ActionReason">
                                                    <pfx2:ActionReason>
                                                        <xsl:value-of select="$rootItem/ActionReason"/>
                                                    </pfx2:ActionReason>
                                                </xsl:if>
                                                <pfx2:ProductDuration>
                                                    <xsl:choose>
                                                        <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                            <pfx2:EndDate>
                                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                            </pfx2:EndDate>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:EndDate>
                                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                                            </pfx2:EndDate>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                    <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                        <pfx2:StartDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                        </pfx2:StartDate>
                                                    </xsl:if>
                                                </pfx2:ProductDuration>
                                                <pfx2:ListAttributes>
                                                    <pfx2:Atribute>
                                                        <pfx2:Name>
                                                            <xsl:value-of select="'Segment'"/>
                                                        </pfx2:Name>
                                                        <pfx2:Value>
                                                            <xsl:value-of select="$Segment"/>
                                                        </pfx2:Value>
                                                    </pfx2:Atribute>
                                                    <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                        <xsl:variable name="_attributeName" select="."/>
                                                        <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                        <xsl:choose>
                                                            <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                                <pfx2:Atribute>
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="$_attribute/Name"/>
                                                                    </pfx2:Name>
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                                    </pfx2:Value>
                                                                    <pfx2:OldValue>
                                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                                    </pfx2:OldValue>
                                                                </pfx2:Atribute>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <pfx2:Atribute>
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="$_attribute/Name"/>
                                                                    </pfx2:Name>
                                                                    <xsl:if test="$_attribute/Value">
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="$_attribute/Value"/>
                                                                        </pfx2:Value>
                                                                    </xsl:if>
                                                                    <pfx2:OldValue>
                                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                                    </pfx2:OldValue>
                                                                </pfx2:Atribute>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </xsl:for-each>
                                                </pfx2:ListAttributes>
                                                <pfx2:ProductId>
                                                    <pfx2:Id>
                                                        <xsl:value-of select="current()/ProductCatalogId"/>
                                                    </pfx2:Id>
                                                    <xsl:if test="current()/IntegrationId">
                                                        <pfx2:InstanceId>
                                                            <xsl:value-of select="current()/IntegrationId"/>
                                                        </pfx2:InstanceId>
                                                    </xsl:if>
                                                </pfx2:ProductId>
                                                <pfx2:ProductCustomerData>
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </pfx2:ProductCustomerData>
                                                <pfx2:ProductPenalty>
                                                    <xsl:if test="string-length($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Type&quot;]/Value) >0">
                                                        <pfx2:PenaltyType>
                                                            <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Type&quot;]/Value"/>
                                                        </pfx2:PenaltyType>
                                                    </xsl:if>
                                                    <pfx2:SkipPenalty>
                                                        <xsl:value-of select="false()"/>
                                                    </pfx2:SkipPenalty>
                                                    <pfx2:Source>
                                                        <xsl:value-of select="''"/>
                                                    </pfx2:Source>
                                                    <xsl:if test="number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value) !='NaN'&#xA;and&#xA;exists($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value)">
                                                        <pfx2:DiscountDuration>
                                                            <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value"/>
                                                        </pfx2:DiscountDuration>
                                                    </xsl:if>
                                                    <xsl:if test="number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value) !='NaN'&#xA;and&#xA;exists($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value)">
                                                        <xsl:if test="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value">
                                                            <pfx2:TotalDeviceAmount>
                                                                <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value"/>
                                                            </pfx2:TotalDeviceAmount>
                                                        </xsl:if>
                                                    </xsl:if>
                                                </pfx2:ProductPenalty>
                                            </pfx2:Product>
                                        </xsl:for-each>
                                    </pfx2:DeleteProductList>
                                </xsl:when>
                                <xsl:when test="$rootItem[ProductCatalogId = ('40000')]/Action=('Existing','Modified') and count($rootItem/ListOfChildItem/ChildItem[Action='Deleted'])>0">
                                    <pfx2:DeleteProductList>
                                        <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[Action='Deleted']">
                                            <pfx2:Product>
                                                <xsl:variable name="_product" select="."/>
                                                <xsl:if test="$rootItem/ActionReason">
                                                    <pfx2:ActionReason>
                                                        <xsl:value-of select="$rootItem/ActionReason"/>
                                                    </pfx2:ActionReason>
                                                </xsl:if>
                                                <pfx2:ProductDuration>
                                                    <xsl:choose>
                                                        <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                            <pfx2:EndDate>
                                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                            </pfx2:EndDate>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:EndDate>
                                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                                            </pfx2:EndDate>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                    <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                        <pfx2:StartDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                        </pfx2:StartDate>
                                                    </xsl:if>
                                                </pfx2:ProductDuration>
                                                <pfx2:ListAttributes>
                                                    <pfx2:Atribute>
                                                        <pfx2:Name>
                                                            <xsl:value-of select="'Segment'"/>
                                                        </pfx2:Name>
                                                        <pfx2:Value>
                                                            <xsl:value-of select="$Segment"/>
                                                        </pfx2:Value>
                                                    </pfx2:Atribute>
                                                    <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                        <xsl:variable name="_attributeName" select="."/>
                                                        <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                        <xsl:choose>
                                                            <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                                <pfx2:Atribute>
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="$_attribute/Name"/>
                                                                    </pfx2:Name>
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                                    </pfx2:Value>
                                                                    <pfx2:OldValue>
                                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                                    </pfx2:OldValue>
                                                                </pfx2:Atribute>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <pfx2:Atribute>
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="$_attribute/Name"/>
                                                                    </pfx2:Name>
                                                                    <xsl:if test="$_attribute/Value">
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="$_attribute/Value"/>
                                                                        </pfx2:Value>
                                                                    </xsl:if>
                                                                    <pfx2:OldValue>
                                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                                    </pfx2:OldValue>
                                                                </pfx2:Atribute>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </xsl:for-each>
                                                </pfx2:ListAttributes>
                                                <pfx2:ProductId>
                                                    <pfx2:Id>
                                                        <xsl:value-of select="current()/ProductCatalogId"/>
                                                    </pfx2:Id>
                                                    <xsl:if test="current()/IntegrationId">
                                                        <pfx2:InstanceId>
                                                            <xsl:value-of select="current()/IntegrationId"/>
                                                        </pfx2:InstanceId>
                                                    </xsl:if>
                                                </pfx2:ProductId>
                                                <pfx2:ProductCustomerData>
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </pfx2:ProductCustomerData>
                                                <pfx2:ProductPenalty>
                                                    <xsl:if test="string-length($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Type&quot;]/Value) >0">
                                                        <pfx2:PenaltyType>
                                                            <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Type&quot;]/Value"/>
                                                        </pfx2:PenaltyType>
                                                    </xsl:if>
                                                    <pfx2:SkipPenalty>
                                                        <xsl:value-of select="false()"/>
                                                    </pfx2:SkipPenalty>
                                                    <pfx2:Source>
                                                        <xsl:value-of select="''"/>
                                                    </pfx2:Source>
                                                    <xsl:if test="number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value) !='NaN'&#xA;and&#xA;exists($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value)">
                                                        <pfx2:DiscountDuration>
                                                            <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value"/>
                                                        </pfx2:DiscountDuration>
                                                    </xsl:if>
                                                    <xsl:if test="number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value) !='NaN'&#xA;and&#xA;exists($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value)">
                                                        <xsl:if test="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value">
                                                            <pfx2:TotalDeviceAmount>
                                                                <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value"/>
                                                            </pfx2:TotalDeviceAmount>
                                                        </xsl:if>
                                                    </xsl:if>
                                                </pfx2:ProductPenalty>
                                            </pfx2:Product>
                                        </xsl:for-each>
                                    </pfx2:DeleteProductList>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:if>
                        <xsl:if test="$rootItem[ProductCatalogId = ('40000')]/Action=('Resume','New')">
                            <xsl:choose>
                                <xsl:when test="$rootItem[ProductCatalogId = ('40000')]/Action=('Resume','New','Existing','Modified')">
                                    <pfx2:AddProductList>
                                        <pfx2:Product>
                                            <pfx2:ActionReason>
                                                <xsl:value-of select="$rootItem/ActionReason"/>
                                            </pfx2:ActionReason>
                                            <xsl:if test="string-length($Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag)>0">
                                                <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag">
                                                    <pfx2:isFDOOrder>
                                                        <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag"/>
                                                    </pfx2:isFDOOrder>
                                                </xsl:if>
                                            </xsl:if>
                                            <xsl:if test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate)">
                                                <pfx2:OrderCreationDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate)"/>
                                                </pfx2:OrderCreationDate>
                                            </xsl:if>
                                            <pfx2:ProductDuration>
                                                <xsl:if test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $rootItem/EndDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $rootItem/EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:if>
                                                <xsl:choose>
                                                    <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                        <pfx2:StartDate>
                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                        </pfx2:StartDate>
                                                    </xsl:when>
                                                    <xsl:when test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/StartDate)">
                                                        <pfx2:StartDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/StartDate)"/>
                                                        </pfx2:StartDate>
                                                    </xsl:when>
                                                </xsl:choose>
                                            </pfx2:ProductDuration>
                                            <pfx2:ListAttributes>
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="'Segment'"/>
                                                    </pfx2:Name>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$Segment"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                                <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                                    <xsl:variable name="_attributeName" select="."/>
                                                    <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                                    <pfx2:Atribute>
                                                        <pfx2:Name>
                                                            <xsl:value-of select="$_attribute/Name"/>
                                                        </pfx2:Name>
                                                        <xsl:if test="$_attribute/Value">
                                                            <pfx2:Value>
                                                                <xsl:value-of select="$_attribute/Value"/>
                                                            </pfx2:Value>
                                                        </xsl:if>
                                                        <pfx2:OldValue>
                                                            <xsl:value-of select="$_attribute/PreviousValue"/>
                                                        </pfx2:OldValue>
                                                    </pfx2:Atribute>
                                                </xsl:for-each>
                                            </pfx2:ListAttributes>
                                            <pfx2:ProductId>
                                                <pfx2:Id>
                                                    <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                                </pfx2:Id>
                                                <xsl:if test="$rootItem/IntegrationId">
                                                    <pfx2:InstanceId>
                                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                                    </pfx2:InstanceId>
                                                </xsl:if>
                                            </pfx2:ProductId>
                                            <pfx2:ProductCustomerData>
                                                <pfx2:ExternalBillingAccountId>
                                                    <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                </pfx2:ExternalBillingAccountId>
                                                <pfx2:ListAttributes>
                                                    <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[exists(Value)]">
                                                        <pfx2:Atribute>
                                                            <xsl:if test="current()/Name">
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="current()/Name"/>
                                                                </pfx2:Name>
                                                            </xsl:if>
                                                            <xsl:if test="current()/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="current()/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                        </pfx2:Atribute>
                                                    </xsl:for-each>
                                                </pfx2:ListAttributes>
                                            </pfx2:ProductCustomerData>
                                        </pfx2:Product>
                                        <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[Action='New']">
                                            <pfx2:Product>
                                                <xsl:variable name="_product" select="."/>
                                                <xsl:if test="$rootItem/ActionReason">
                                                    <pfx2:ActionReason>
                                                        <xsl:value-of select="$rootItem/ActionReason"/>
                                                    </pfx2:ActionReason>
                                                </xsl:if>
                                                <pfx2:ProductDuration>
                                                    <xsl:if test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, current()/EndDate)">
                                                        <pfx2:EndDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, current()/EndDate)"/>
                                                        </pfx2:EndDate>
                                                    </xsl:if>
                                                    <xsl:if test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                        <pfx2:StartDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                        </pfx2:StartDate>
                                                    </xsl:if>
                                                </pfx2:ProductDuration>
                                                <pfx2:ListAttributes>
                                                    <pfx2:Atribute>
                                                        <pfx2:Name>
                                                            <xsl:value-of select="'Segment'"/>
                                                        </pfx2:Name>
                                                        <pfx2:Value>
                                                            <xsl:value-of select="$Segment"/>
                                                        </pfx2:Value>
                                                    </pfx2:Atribute>
                                                    <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                        <xsl:variable name="_attributeName" select="."/>
                                                        <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                        <xsl:choose>
                                                            <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                                <pfx2:Atribute>
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="$_attribute/Name"/>
                                                                    </pfx2:Name>
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                                    </pfx2:Value>
                                                                    <pfx2:OldValue>
                                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                                    </pfx2:OldValue>
                                                                </pfx2:Atribute>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <pfx2:Atribute>
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="$_attribute/Name"/>
                                                                    </pfx2:Name>
                                                                    <xsl:if test="$_attribute/Value">
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="$_attribute/Value"/>
                                                                        </pfx2:Value>
                                                                    </xsl:if>
                                                                    <pfx2:OldValue>
                                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                                    </pfx2:OldValue>
                                                                </pfx2:Atribute>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </xsl:for-each>
                                                </pfx2:ListAttributes>
                                                <pfx2:ProductId>
                                                    <pfx2:Id>
                                                        <xsl:value-of select="current()/ProductCatalogId"/>
                                                    </pfx2:Id>
                                                    <xsl:if test="current()/IntegrationId">
                                                        <pfx2:InstanceId>
                                                            <xsl:value-of select="current()/IntegrationId"/>
                                                        </pfx2:InstanceId>
                                                    </xsl:if>
                                                </pfx2:ProductId>
                                                <pfx2:ProductCustomerData>
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </pfx2:ProductCustomerData>
                                            </pfx2:Product>
                                        </xsl:for-each>
                                    </pfx2:AddProductList>
                                </xsl:when>
                                <xsl:when test="$rootItem[ProductCatalogId = ('40000')]/Action=('Existing','Modified') and count($rootItem/ListOfChildItem/ChildItem[Action='New'])>0">
                                    <pfx2:AddProductList>
                                        <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[Action='New']">
                                            <pfx2:Product>
                                                <xsl:variable name="_product" select="."/>
                                                <xsl:if test="$rootItem/ActionReason">
                                                    <pfx2:ActionReason>
                                                        <xsl:value-of select="$rootItem/ActionReason"/>
                                                    </pfx2:ActionReason>
                                                </xsl:if>
                                                <pfx2:ProductDuration>
                                                    <xsl:if test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, current()/EndDate)">
                                                        <pfx2:EndDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, current()/EndDate)"/>
                                                        </pfx2:EndDate>
                                                    </xsl:if>
                                                    <xsl:if test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                        <pfx2:StartDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                        </pfx2:StartDate>
                                                    </xsl:if>
                                                </pfx2:ProductDuration>
                                                <pfx2:ListAttributes>
                                                    <pfx2:Atribute>
                                                        <pfx2:Name>
                                                            <xsl:value-of select="'Segment'"/>
                                                        </pfx2:Name>
                                                        <pfx2:Value>
                                                            <xsl:value-of select="$Segment"/>
                                                        </pfx2:Value>
                                                    </pfx2:Atribute>
                                                    <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                        <xsl:variable name="_attributeName" select="."/>
                                                        <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                        <xsl:choose>
                                                            <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                                <pfx2:Atribute>
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="$_attribute/Name"/>
                                                                    </pfx2:Name>
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                                    </pfx2:Value>
                                                                    <pfx2:OldValue>
                                                                        <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                                    </pfx2:OldValue>
                                                                </pfx2:Atribute>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <pfx2:Atribute>
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="$_attribute/Name"/>
                                                                    </pfx2:Name>
                                                                    <xsl:if test="$_attribute/Value">
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="$_attribute/Value"/>
                                                                        </pfx2:Value>
                                                                    </xsl:if>
                                                                    <pfx2:OldValue>
                                                                        <xsl:value-of select="$_attribute/PreviousValue"/>
                                                                    </pfx2:OldValue>
                                                                </pfx2:Atribute>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </xsl:for-each>
                                                </pfx2:ListAttributes>
                                                <pfx2:ProductId>
                                                    <pfx2:Id>
                                                        <xsl:value-of select="current()/ProductCatalogId"/>
                                                    </pfx2:Id>
                                                    <xsl:if test="current()/IntegrationId">
                                                        <pfx2:InstanceId>
                                                            <xsl:value-of select="current()/IntegrationId"/>
                                                        </pfx2:InstanceId>
                                                    </xsl:if>
                                                </pfx2:ProductId>
                                                <pfx2:ProductCustomerData>
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </pfx2:ProductCustomerData>
                                            </pfx2:Product>
                                        </xsl:for-each>
                                    </pfx2:AddProductList>
                                </xsl:when>
                            </xsl:choose>
                        </xsl:if>
                    </pfx2:Request>
                </xsl:when>
                <xsl:when test="{--MTT Group--}&#xA;$rootItem/ProductCatalogId = ('21400')">
                    <pfx2:Request>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                            <pfx2:ExternalId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                            </pfx2:ExternalId>
                        </xsl:if>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                            <pfx2:ExternalComponentId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                            </pfx2:ExternalComponentId>
                        </xsl:if>
                        <xsl:if test="count($rootItem/ListOfChildItem/ChildItem[Action=('Suspend', 'Deleted')])>0">
                            <pfx2:DeleteProductList>
                                <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[Action=('Suspend','Deleted')]">
                                    <pfx2:Product>
                                        <xsl:variable name="_product" select="."/>
                                        <xsl:if test="$rootItem/ActionReason">
                                            <pfx2:ActionReason>
                                                <xsl:value-of select="$rootItem/ActionReason"/>
                                            </pfx2:ActionReason>
                                        </xsl:if>
                                        <pfx2:ProductDuration>
                                            <xsl:choose>
                                                <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="string-length(current()/EndDate) > 0">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="current()/EndDate"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="string-length($Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate) > 0">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                                <xsl:when test="string-length(current()/StartDate) > 0">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="current()/StartDate"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                            </xsl:choose>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                <xsl:variable name="_attributeName" select="."/>
                                                <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                <xsl:choose>
                                                    <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <pfx2:Value>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                            </pfx2:Value>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="$_attribute/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$_attribute/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="$_attribute/PreviousValue"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="current()/ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="current()/IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="current()/IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <pfx2:ExternalBillingAccountId>
                                                <xsl:value-of select="$rootItem/BillAcctCode"/>
                                            </pfx2:ExternalBillingAccountId>
                                            <pfx2:ListAttributes>
                                                <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute">
                                                    <xsl:choose>
                                                        <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <xsl:if test="current()/Value">
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="current()/Value"/>
                                                                    </pfx2:Value>
                                                                </xsl:if>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                                <xsl:for-each select="$_product/ListOfChildItemAttribute/ChildItemAttribute[exists(Value)]">
                                                    <xsl:choose>
                                                        <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <xsl:if test="current()/Value">
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="current()/Value"/>
                                                                    </pfx2:Value>
                                                                </xsl:if>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </pfx2:ListAttributes>
                                        </pfx2:ProductCustomerData>
                                        <pfx2:ProductPenalty>
                                            <xsl:if test="string-length($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Type&quot;]/Value) >0">
                                                <pfx2:PenaltyType>
                                                    <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Type&quot;]/Value"/>
                                                </pfx2:PenaltyType>
                                            </xsl:if>
                                            <pfx2:SkipPenalty>
                                                <xsl:value-of select="false()"/>
                                            </pfx2:SkipPenalty>
                                            <pfx2:Source>
                                                <xsl:value-of select="''"/>
                                            </pfx2:Source>
                                            <xsl:if test="number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value) !='NaN'&#xA;and&#xA;exists($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value)">
                                                <pfx2:DiscountDuration>
                                                    <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value"/>
                                                </pfx2:DiscountDuration>
                                            </xsl:if>
                                            <xsl:if test="number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value) !='NaN'&#xA;and&#xA;exists($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value)">
                                                <xsl:if test="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value">
                                                    <pfx2:TotalDeviceAmount>
                                                        <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value"/>
                                                    </pfx2:TotalDeviceAmount>
                                                </xsl:if>
                                            </xsl:if>
                                        </pfx2:ProductPenalty>
                                    </pfx2:Product>
                                </xsl:for-each>
                            </pfx2:DeleteProductList>
                        </xsl:if>
                        <xsl:if test="count($rootItem/ListOfChildItem/ChildItem[Action=('Resume', 'New')])>0">
                            <pfx2:AddProductList>
                                <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[Action=('Resume', 'New')]">
                                    <pfx2:Product>
                                        <xsl:variable name="_product" select="."/>
                                        <pfx2:ActionReason>
                                            <xsl:value-of select="$rootItem/ActionReason"/>
                                        </pfx2:ActionReason>
                                        <xsl:if test="string-length($Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag)>0">
                                            <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag">
                                                <pfx2:isFDOOrder>
                                                    <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag"/>
                                                </pfx2:isFDOOrder>
                                            </xsl:if>
                                        </xsl:if>
                                        <xsl:choose>
                                            <xsl:when test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate)">
                                                <pfx2:OrderCreationDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate)"/>
                                                </pfx2:OrderCreationDate>
                                            </xsl:when>
                                            <xsl:when test="string-length($Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate) > 0">
                                                <pfx2:OrderCreationDate>
                                                    <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate"/>
                                                </pfx2:OrderCreationDate>
                                            </xsl:when>
                                        </xsl:choose>
                                        <pfx2:ProductDuration>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, current()/EndDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, current()/EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="string-length(current()/EndDate) > 0">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="current()/EndDate"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                                <xsl:when test="string-length(current()/StartDate) > 0">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="current()/StartDate"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                            </xsl:choose>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                <xsl:variable name="_attributeName" select="."/>
                                                <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                <xsl:choose>
                                                    <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <pfx2:Value>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                            </pfx2:Value>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="$_attribute/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$_attribute/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="$_attribute/PreviousValue"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="current()/ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="current()/IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="current()/IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <pfx2:ExternalBillingAccountId>
                                                <xsl:value-of select="$rootItem/BillAcctCode"/>
                                            </pfx2:ExternalBillingAccountId>
                                            <pfx2:ListAttributes>
                                                <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[exists(Value)]">
                                                    <xsl:choose>
                                                        <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <xsl:if test="current()/Value">
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="current()/Value"/>
                                                                    </pfx2:Value>
                                                                </xsl:if>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                                <xsl:for-each select="$_product/ListOfChildItemAttribute/ChildItemAttribute[exists(Value)]">
                                                    <xsl:choose>
                                                        <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <xsl:if test="current()/Value">
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="current()/Value"/>
                                                                    </pfx2:Value>
                                                                </xsl:if>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </pfx2:ListAttributes>
                                        </pfx2:ProductCustomerData>
                                    </pfx2:Product>
                                </xsl:for-each>
                            </pfx2:AddProductList>
                        </xsl:if>
                    </pfx2:Request>
                </xsl:when>
                <xsl:when test="{--Campaign Management'--}&#xA;$Parse-XML/OSMOrder/XMLMessage/Order/OrderType='Campaign Management'">
                    <pfx2:Request>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                            <pfx2:ExternalId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                            </pfx2:ExternalId>
                        </xsl:if>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                            <pfx2:ExternalComponentId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                            </pfx2:ExternalComponentId>
                        </xsl:if>
                        <xsl:if test="$rootItem/Action = ('Deleted')">
                            <pfx2:DeleteProductList>
                                <pfx2:Product>
                                    <xsl:variable name="_product" select="$rootItem"/>
                                    <xsl:if test="$rootItem/ActionReason">
                                        <pfx2:ActionReason>
                                            <xsl:value-of select="$rootItem/ActionReason"/>
                                        </pfx2:ActionReason>
                                    </xsl:if>
                                    <pfx2:ProductDuration>
                                        <xsl:choose>
                                            <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                <pfx2:EndDate>
                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                </pfx2:EndDate>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="$rootItem/EndDate">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="$rootItem/EndDate"/>
                                                    </pfx2:EndDate>
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx2:ProductDuration>
                                    <pfx2:ListAttributes>
                                        <pfx2:Atribute>
                                            <pfx2:Name>
                                                <xsl:value-of select="'Segment'"/>
                                            </pfx2:Name>
                                            <xsl:choose>
                                                <xsl:when test="$rootItem/CustAcctType = '101'">
                                                    <pfx2:Value>
                                                        <xsl:value-of select="'EBU'"/>
                                                    </pfx2:Value>
                                                </xsl:when>
                                                <xsl:when test="$rootItem/CustAcctType = '102'">
                                                    <pfx2:Value>
                                                        <xsl:value-of select="'CBU'"/>
                                                    </pfx2:Value>
                                                </xsl:when>
                                            </xsl:choose>
                                        </pfx2:Atribute>
                                        <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                            <xsl:variable name="_attributeName" select="."/>
                                            <xsl:variable name="_attribute" select="$_product/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                            <xsl:choose>
                                                <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                    <pfx2:Atribute>
                                                        <pfx2:Name>
                                                            <xsl:value-of select="$_attribute/Name"/>
                                                        </pfx2:Name>
                                                        <pfx2:Value>
                                                            <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                        </pfx2:Value>
                                                        <pfx2:OldValue>
                                                            <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                        </pfx2:OldValue>
                                                    </pfx2:Atribute>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:Atribute>
                                                        <pfx2:Name>
                                                            <xsl:value-of select="$_attribute/Name"/>
                                                        </pfx2:Name>
                                                        <xsl:if test="$_attribute/Value">
                                                            <pfx2:Value>
                                                                <xsl:value-of select="$_attribute/Value"/>
                                                            </pfx2:Value>
                                                        </xsl:if>
                                                        <pfx2:OldValue>
                                                            <xsl:value-of select="$_attribute/PreviousValue"/>
                                                        </pfx2:OldValue>
                                                    </pfx2:Atribute>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </xsl:for-each>
                                    </pfx2:ListAttributes>
                                    <pfx2:ProductId>
                                        <pfx2:Id>
                                            <xsl:value-of select="$_product/ProductCatalogId"/>
                                        </pfx2:Id>
                                        <xsl:if test="$_product/IntegrationId">
                                            <pfx2:InstanceId>
                                                <xsl:value-of select="$_product/IntegrationId"/>
                                            </pfx2:InstanceId>
                                        </xsl:if>
                                    </pfx2:ProductId>
                                    <pfx2:ProductCustomerData>
                                        <pfx2:ExternalBillingAccountId>
                                            <xsl:value-of select="$rootItem/BillAcctCode"/>
                                        </pfx2:ExternalBillingAccountId>
                                        <pfx2:MSISDN>
                                            <xsl:value-of select="$rootItem/MSISDN"/>
                                        </pfx2:MSISDN>
                                    </pfx2:ProductCustomerData>
                                    <xsl:variable name="_productPenalty" select="if (count($GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign)>0) then&#xA;$GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign[ns32:CampaignCode=current()/IntegrationId]&#xA;else&#xA;$GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)]"/>
                                    <xsl:choose>
                                        <xsl:when test="$_productPenalty">
                                            <xsl:choose>
                                                <xsl:when test="count($GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign[ns32:CampaignCode =$_product/IntegrationId ])>0">
                                                    <pfx2:ProductPenalty>
                                                        <xsl:variable name="penalty" select="$GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign[ns32:CampaignCode = $_product/IntegrationId]"/>
                                                        <xsl:if test="number($penalty/ns32:Amount) !='NaN'">
                                                            <pfx2:PenaltyAmount>
                                                                <xsl:value-of select="$penalty/ns32:Amount"/>
                                                            </pfx2:PenaltyAmount>
                                                        </xsl:if>
                                                        <pfx2:PenaltyMethod>
                                                            <xsl:value-of select="$penalty/ns32:PenaltyMethod"/>
                                                        </pfx2:PenaltyMethod>
                                                        <pfx2:PenaltyCalculationMode>
                                                            <xsl:value-of select="$penalty/ns32:PenaltyCalculationMode"/>
                                                        </pfx2:PenaltyCalculationMode>
                                                        <pfx2:SkipPenalty>
                                                            <xsl:value-of select="$_product/SkipPenalty='Y'"/>
                                                        </pfx2:SkipPenalty>
                                                        <xsl:choose>
                                                            <xsl:when test="count($penalty/ns32:PenaltyItems)>0&#xA;and &#xA;(current()/ComponentGroup=&quot;CAMP&quot; and current()/Action=&quot;Deleted&quot;  and   current()/ProvisioningFlg=&quot;Y&quot; and current()/BillingFlg=&quot;Y&quot;)">
                                                                <pfx2:Source>
                                                                    <xsl:value-of select="'PTSM'"/>
                                                                </pfx2:Source>
                                                            </xsl:when>
                                                            <xsl:otherwise>
                                                                <pfx2:Source>
                                                                    <xsl:value-of select="''"/>
                                                                </pfx2:Source>
                                                            </xsl:otherwise>
                                                        </xsl:choose>
                                                    </pfx2:ProductPenalty>
                                                </xsl:when>
                                                <xsl:when test="count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,$_product/IntegrationId)])>0">
                                                    <pfx2:ProductPenalty>
                                                        <xsl:if test="number($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;,$_product/IntegrationId)]/Value) !='NaN'">
                                                            <pfx2:PenaltyAmount>
                                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;,$_product)]/Value"/>
                                                            </pfx2:PenaltyAmount>
                                                        </xsl:if>
                                                        <pfx2:PenaltyMethod>
                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;,$_product/IntegrationId)]/Value"/>
                                                        </pfx2:PenaltyMethod>
                                                        <pfx2:PenaltyCalculationMode>
                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, $_product/IntegrationId)]/Value"/>
                                                        </pfx2:PenaltyCalculationMode>
                                                        <pfx2:SkipPenalty>
                                                            <xsl:value-of select="$_product/SkipPenalty='Y'"/>
                                                        </pfx2:SkipPenalty>
                                                        <pfx2:Source>
                                                            <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltySource&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                        </pfx2:Source>
                                                    </pfx2:ProductPenalty>
                                                </xsl:when>
                                            </xsl:choose>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:choose>
                                                <xsl:when test="$_product/SkipPenalty='N'">
                                                    <pfx2:ProductPenalty>
                                                        <xsl:if test="string-length($_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value)>0">
                                                            <pfx2:PenaltyType>
                                                                <xsl:value-of select="$_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'Type']/Value"/>
                                                            </pfx2:PenaltyType>
                                                        </xsl:if>
                                                        <pfx2:SkipPenalty>
                                                            <xsl:value-of select="false()"/>
                                                        </pfx2:SkipPenalty>
                                                        <pfx2:Source>
                                                            <xsl:value-of select="''"/>
                                                        </pfx2:Source>
                                                        <xsl:if test="number($_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'DiscountDuration']/Value) !='NaN'&#xA;and &#xA;exists($_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'DiscountDuration']/Value)">
                                                            <pfx2:DiscountDuration>
                                                                <xsl:value-of select="$_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'DiscountDuration']/Value"/>
                                                            </pfx2:DiscountDuration>
                                                        </xsl:if>
                                                        <xsl:if test="number($_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value) !='NaN'&#xA;and &#xA;exists($_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value)">
                                                            <pfx2:TotalDeviceAmount>
                                                                <xsl:value-of select="$_product/ListOfRootItemAttribute/RootItemAttribute[Name = 'Total Device Amount']/Value"/>
                                                            </pfx2:TotalDeviceAmount>
                                                        </xsl:if>
                                                    </pfx2:ProductPenalty>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ProductPenalty>
                                                        <pfx2:SkipPenalty>
                                                            <xsl:value-of select="true()"/>
                                                        </pfx2:SkipPenalty>
                                                        <pfx2:Source>
                                                            <xsl:value-of select="''"/>
                                                        </pfx2:Source>
                                                    </pfx2:ProductPenalty>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </pfx2:Product>
                            </pfx2:DeleteProductList>
                        </xsl:if>
                        <xsl:if test="$rootItem/Action = ('New')">
                            <pfx2:AddProductList>
                                <pfx2:Product>
                                    <pfx2:ActionReason>
                                        <xsl:value-of select="$rootItem/ActionReason"/>
                                    </pfx2:ActionReason>
                                    <pfx2:ProductDuration>
                                        <xsl:if test="string-length($rootItem/EndDate)>0">
                                            <pfx2:EndDate>
                                                <xsl:value-of select="$rootItem/EndDate"/>
                                            </pfx2:EndDate>
                                        </xsl:if>
                                        <xsl:choose>
                                            <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                <pfx2:StartDate>
                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                </pfx2:StartDate>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx2:StartDate>
                                                    <xsl:value-of select="$rootItem/StartDate"/>
                                                </pfx2:StartDate>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx2:ProductDuration>
                                    <pfx2:ListAttributes>
                                        <pfx2:Atribute>
                                            <pfx2:Name>
                                                <xsl:value-of select="'Segment'"/>
                                            </pfx2:Name>
                                            <pfx2:Value>
                                                <xsl:value-of select="$Segment"/>
                                            </pfx2:Value>
                                        </pfx2:Atribute>
                                        <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                            <xsl:variable name="_attributeName" select="."/>
                                            <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="$_attribute/Name"/>
                                                </pfx2:Name>
                                                <xsl:if test="$_attribute/Value">
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$_attribute/Value"/>
                                                    </pfx2:Value>
                                                </xsl:if>
                                                <pfx2:OldValue>
                                                    <xsl:value-of select="$_attribute/PreviousValue"/>
                                                </pfx2:OldValue>
                                            </pfx2:Atribute>
                                        </xsl:for-each>
                                    </pfx2:ListAttributes>
                                    <pfx2:ProductId>
                                        <pfx2:Id>
                                            <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                        </pfx2:Id>
                                        <xsl:if test="$rootItem/IntegrationId">
                                            <pfx2:InstanceId>
                                                <xsl:value-of select="$rootItem/IntegrationId"/>
                                            </pfx2:InstanceId>
                                        </xsl:if>
                                    </pfx2:ProductId>
                                    <pfx2:ProductCustomerData>
                                        <pfx2:ExternalBillingAccountId>
                                            <xsl:value-of select="$rootItem/BillAcctCode"/>
                                        </pfx2:ExternalBillingAccountId>
                                        <pfx2:MSISDN>
                                            <xsl:value-of select="$rootItem/ServiceId"/>
                                        </pfx2:MSISDN>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="&quot;REFERENCE_ID&quot;"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name = &quot;REFERENCE_ID&quot;]/Value"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                        </pfx2:ListAttributes>
                                    </pfx2:ProductCustomerData>
                                    <xsl:if test="$rootItem/ActionType='Optional_Discount'">
                                        <pfx2:Discount>
                                            <xsl:variable name="_amountType" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name= 'AmountType']/Value"/>
                                            <xsl:variable name="_amount" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name= 'Amount']/Value"/>
                                            <xsl:if test="$_amountType='Unit'">
                                                <xsl:if test="$_amount">
                                                    <pfx2:Amount>
                                                        <xsl:value-of select="$_amount"/>
                                                    </pfx2:Amount>
                                                </xsl:if>
                                            </xsl:if>
                                            <xsl:if test="$_amountType='Percentage'">
                                                <xsl:if test="$_amount">
                                                    <pfx2:Percentage>
                                                        <xsl:value-of select="$_amount"/>
                                                    </pfx2:Percentage>
                                                </xsl:if>
                                            </xsl:if>
                                        </pfx2:Discount>
                                    </xsl:if>
                                </pfx2:Product>
                            </pfx2:AddProductList>
                        </xsl:if>
                    </pfx2:Request>
                </xsl:when>
                <xsl:when test="{--Vodapara--}&#xA;$rootItem/ProductCatalogId=('17000','17100','17200','17300','17400','17500','17600','17700',&#xA;'17800','17900','18000','18100','18200','18300','5000','5005','60007','53002','53007','53008','53001','53003','53000','53006','53005','53004','53009','23000','10900','53039')">
                    <pfx2:Request>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                            <pfx2:ExternalId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                            </pfx2:ExternalId>
                        </xsl:if>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                            <pfx2:ExternalComponentId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                            </pfx2:ExternalComponentId>
                        </xsl:if>
                        <pfx2:ModifyProductList>
                            <pfx2:Product>
                                <pfx2:ActionReason>
                                    <xsl:value-of select="$rootItem/ActionReason"/>
                                </pfx2:ActionReason>
                                <pfx2:ProductDuration>
                                    <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $rootItem/EndDate)">
                                        <pfx2:EndDate>
                                            <xsl:value-of select="tib:parse-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $rootItem/EndDate)"/>
                                        </pfx2:EndDate>
                                    </xsl:if>
                                    <xsl:choose>
                                        <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                            <pfx2:StartDate>
                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                            </pfx2:StartDate>
                                        </xsl:when>
                                        <xsl:when test="tib:validate-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/StartDate)">
                                            <pfx2:StartDate>
                                                <xsl:value-of select="tib:parse-dateTime( $_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/StartDate)"/>
                                            </pfx2:StartDate>
                                        </xsl:when>
                                    </xsl:choose>
                                    <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $rootItem/EndDate)">
                                        <pfx2:ModifyDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $rootItem/ModifyDate)"/>
                                        </pfx2:ModifyDate>
                                    </xsl:if>
                                </pfx2:ProductDuration>
                                <pfx2:ListAttributes>
                                    <pfx2:Atribute>
                                        <pfx2:Name>
                                            <xsl:value-of select="'Segment'"/>
                                        </pfx2:Name>
                                        <pfx2:Value>
                                            <xsl:value-of select="$Segment"/>
                                        </pfx2:Value>
                                    </pfx2:Atribute>
                                    <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                        <xsl:variable name="_attributeName" select="."/>
                                        <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                        <pfx2:Atribute>
                                            <pfx2:Name>
                                                <xsl:value-of select="$_attribute/Name"/>
                                            </pfx2:Name>
                                            <xsl:if test="$_attribute/Value">
                                                <pfx2:Value>
                                                    <xsl:value-of select="$_attribute/Value"/>
                                                </pfx2:Value>
                                            </xsl:if>
                                            <pfx2:OldValue>
                                                <xsl:value-of select="$_attribute/PreviousValue"/>
                                            </pfx2:OldValue>
                                        </pfx2:Atribute>
                                    </xsl:for-each>
                                </pfx2:ListAttributes>
                                <pfx2:ProductId>
                                    <pfx2:Id>
                                        <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                    </pfx2:Id>
                                    <pfx2:InstanceId>
                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                    </pfx2:InstanceId>
                                </pfx2:ProductId>
                                <pfx2:ProductCustomerData>
                                    <pfx2:ExternalBillingAccountId>
                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                    </pfx2:ExternalBillingAccountId>
                                    <xsl:if test="string-length(tib:trim($rootItem/MSISDN))">
                                        <pfx2:MSISDN>
                                            <xsl:value-of select="$rootItem/MSISDN"/>
                                        </pfx2:MSISDN>
                                    </xsl:if>
                                    <pfx2:ListAttributes>
                                        <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[exists(Value)]">
                                            <pfx2:Atribute>
                                                <xsl:if test="current()/Name">
                                                    <pfx2:Name>
                                                        <xsl:value-of select="current()/Name"/>
                                                    </pfx2:Name>
                                                </xsl:if>
                                                <pfx2:Value>
                                                    <xsl:value-of select="current()/Value"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                        </xsl:for-each>
                                    </pfx2:ListAttributes>
                                </pfx2:ProductCustomerData>
                            </pfx2:Product>
                        </pfx2:ModifyProductList>
                    </pfx2:Request>
                </xsl:when>
                <xsl:when test="{--SVB Discount--}&#xA;$rootItem/ProductCatalogId = (&quot;4013&quot;,&quot;7013&quot;,&quot;8013&quot;,&quot;9013&quot;,&quot;10013&quot;,&quot;9014&quot;,&quot;10017&quot;,&quot;4014&quot;,&quot;8018&quot;,&quot;7027&quot;)">
                    <pfx2:Request>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                            <pfx2:ExternalId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                            </pfx2:ExternalId>
                        </xsl:if>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                            <pfx2:ExternalComponentId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                            </pfx2:ExternalComponentId>
                        </xsl:if>
                        <xsl:choose>
                            <xsl:when test="count($rootItem[Action=('Modified','Suspend','Resume','Existing')])>0">
                                <pfx2:ModifyProductList>
                                    <pfx2:Product>
                                        <xsl:if test="$rootItem/ActionReason">
                                            <pfx2:ActionReason>
                                                <xsl:value-of select="$rootItem/ActionReason"/>
                                            </pfx2:ActionReason>
                                        </xsl:if>
                                        <xsl:if test="$rootItem/ActionType">
                                            <pfx2:ActionType>
                                                <xsl:value-of select="$rootItem/ActionType"/>
                                            </pfx2:ActionType>
                                        </xsl:if>
                                        <pfx2:ProductDuration>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/StartDate)">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/StartDate)"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/ModifyDate)">
                                                    <pfx2:ModifyDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$rootItem/ModifyDate)"/>
                                                    </pfx2:ModifyDate>
                                                </xsl:when>
                                            </xsl:choose>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$rootItem/EBUProductCategory]/Attribute">
                                                <xsl:variable name="_attributeName" select="."/>
                                                <xsl:variable name="_attribute" select="$rootItem/ListOfRootItemAttribute/RootItemAttribute[Name=$_attributeName][1]"/>
                                                <xsl:choose>
                                                    <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <pfx2:Value>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                            </pfx2:Value>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="$_attribute/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$_attribute/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="$_attribute/PreviousValue"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="$rootItem/ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="$rootItem/IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="$rootItem/IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <pfx2:ExternalBillingAccountId>
                                                <xsl:value-of select="$rootItem/BillAcctCode"/>
                                            </pfx2:ExternalBillingAccountId>
                                            <pfx2:ListAttributes>
                                                <xsl:for-each select="$rootItem/ListOfRootItemAttribute/RootItemAttribute">
                                                    <xsl:choose>
                                                        <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="current()/Name"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                </pfx2:Value>
                                                                <pfx2:OldValue>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/PreviousValue)"/>
                                                                </pfx2:OldValue>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="current()/Name"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="current()/Value"/>
                                                                </pfx2:Value>
                                                                <pfx2:OldValue>
                                                                    <xsl:value-of select="current()/PreviousValue"/>
                                                                </pfx2:OldValue>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </pfx2:ListAttributes>
                                        </pfx2:ProductCustomerData>
                                        <xsl:if test="count($rootItem/ListOfChildItem/ChildItem) > 0">
                                            <pfx2:ChildProductList>
                                                <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[not(ProductCatalogId=('4020','7020','8020','9020','10020','30020','10016'))]">
                                                    <pfx2:Product>
                                                        <pfx2:ProductDuration>
                                                            <xsl:choose>
                                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                                    <pfx2:EndDate>
                                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                                    </pfx2:EndDate>
                                                                </xsl:when>
                                                            </xsl:choose>
                                                            <xsl:choose>
                                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                                    <pfx2:StartDate>
                                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                                    </pfx2:StartDate>
                                                                </xsl:when>
                                                            </xsl:choose>
                                                            <pfx2:DurationUnitsType>
                                                                <xsl:value-of select="'-1'"/>
                                                            </pfx2:DurationUnitsType>
                                                        </pfx2:ProductDuration>
                                                        <pfx2:ListAttributes>
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="'Segment'"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$Segment"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </pfx2:ListAttributes>
                                                        <pfx2:ProductId>
                                                            <pfx2:Id>
                                                                <xsl:value-of select="current()/ProductCatalogId"/>
                                                            </pfx2:Id>
                                                            <xsl:if test="current()/IntegrationId">
                                                                <pfx2:InstanceId>
                                                                    <xsl:value-of select="current()/IntegrationId"/>
                                                                </pfx2:InstanceId>
                                                            </xsl:if>
                                                        </pfx2:ProductId>
                                                        <pfx2:ProductCustomerData>
                                                            <pfx2:ExternalBillingAccountId>
                                                                <xsl:value-of select="current()/BillAcctCode"/>
                                                            </pfx2:ExternalBillingAccountId>
                                                            <pfx2:ListAttributes>
                                                                <pfx2:Atribute>
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="'Action'"/>
                                                                    </pfx2:Name>
                                                                    <xsl:if test="current()/Action">
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="current()/Action"/>
                                                                        </pfx2:Value>
                                                                    </xsl:if>
                                                                </pfx2:Atribute>
                                                                <xsl:if test="current()/Action = 'New'">
                                                                    <pfx2:Atribute>
                                                                        <pfx2:Name>
                                                                            <xsl:value-of select="'ParentIntegrationId'"/>
                                                                        </pfx2:Name>
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="$rootItem/IntegrationId"/>
                                                                        </pfx2:Value>
                                                                    </pfx2:Atribute>
                                                                </xsl:if>
                                                            </pfx2:ListAttributes>
                                                        </pfx2:ProductCustomerData>
                                                    </pfx2:Product>
                                                </xsl:for-each>
                                            </pfx2:ChildProductList>
                                        </xsl:if>
                                    </pfx2:Product>
                                </pfx2:ModifyProductList>
                            </xsl:when>
                        </xsl:choose>
                    </pfx2:Request>
                </xsl:when>
                <xsl:otherwise>
                    <pfx2:Request>
                        <xsl:variable name="HdPassport" select="$rootItem/ListOfChildItem/ChildItem[ProductCatalogId =('17006')]"/>
                        <xsl:variable name="_deletedProducts" select="$rootItem/ListOfChildItem/ChildItem[not(ProductCatalogId=('1113','1103','17006'))][&#xA;(Action='Deleted' and&#xA;&#x9;(&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;not(ProductCatalogId=('3001')) and&#xA;&#x9;&#x9;(not(ComponentType='GROUP_CHILD') or&#xA;&#x9;&#x9;&#x9;(ComponentType = 'GROUP_CHILD'&#xA;&#x9;&#x9;&#x9;&#x9;and ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Percentage']/Value > 0&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;) &#xA;&#x9;&#x9;or&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;ProductCatalogId='3001' and&#xA;&#x9;&#x9;ListOfChildItemAttribute/ChildItemAttribute[Name='VPN Account Discount']/Value = 'Y'&#xA;&#x9;&#x9;)&#xA;&#x9;&#x9;or&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;ProductCatalogId='3324' and ComponentType = 'GROUP_CHILD'&#xA;&#x9;&#x9;)&#xA;&#x9;)&#xA;) or&#xA;(Action='Modified' and &#xA;&#x9;(&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;ProductCatalogId='3001' and&#xA;&#x9;&#x9;&#x9;ListOfChildItemAttribute/ChildItemAttribute[Name='VPN Account Discount' and PreviousValue ='Y']/Value = 'N'&#xA;&#x9;&#x9;&#x9;) or&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;ComponentType = 'GROUP_CHILD' and &#xA;&#x9;&#x9;&#x9;ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Percentage' and PreviousValue !=0]/Value =0&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)&#xA;&#x9;) or&#xA;(Action = ('Suspend') and&#xA;&#x9;(not(ComponentType='GROUP_CHILD') or&#xA;&#x9;&#x9;(ComponentType = 'GROUP_CHILD'&#xA;&#x9;&#x9;&#x9;and ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Percentage']/Value > 0&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)&#xA;&#x9;)&#xA;]"/>
                        <xsl:variable name="_newProducts" select="$rootItem/ListOfChildItem/ChildItem[not(ProductCatalogId=('1113','1103','17006'))][&#xA;(Action='New' and&#xA;&#x9;(&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;not(ProductCatalogId=('3001')) and&#xA;&#x9;&#x9;(not(ComponentType='GROUP_CHILD') or&#xA;&#x9;&#x9;(ComponentType = 'GROUP_CHILD'&#xA;&#x9;&#x9;and ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Percentage']/Value > 0&#xA;&#x9;&#x9;))&#xA;&#x9;) or&#xA;&#x9;(&#xA;&#x9;&#x9;ProductCatalogId='3001' and&#xA;&#x9;&#x9;ListOfChildItemAttribute/ChildItemAttribute[Name='VPN Account Discount']/Value = 'Y'&#xA;&#x9;))&#xA;) or&#xA;(Action='Modified' and &#xA;&#x9;(&#xA;&#x9;(&#xA;&#x9;&#x9;ProductCatalogId='3001' and&#xA;&#x9;&#x9;ListOfChildItemAttribute/ChildItemAttribute[Name='VPN Account Discount' and PreviousValue ='N']/Value = 'Y'&#xA;&#x9;) or&#xA;&#x9;(&#xA;&#x9;&#x9;ComponentType = 'GROUP_CHILD' and &#xA;&#x9;&#x9;ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Percentage' and PreviousValue != Value]/Value > 0&#xA;&#x9;)&#xA;&#x9;)&#xA;) or&#xA;(Action = ('Resume') and&#xA;&#x9;(not(ComponentType='GROUP_CHILD') or&#xA;&#x9;(ComponentType = 'GROUP_CHILD'&#xA;&#x9;and ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Percentage']/Value > 0&#xA;&#x9;)&#xA;&#x9;)&#xA;)&#xA;]"/>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                            <pfx2:ExternalId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                            </pfx2:ExternalId>
                        </xsl:if>
                        <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                            <pfx2:ExternalComponentId>
                                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                            </pfx2:ExternalComponentId>
                        </xsl:if>
                        <xsl:if test="count($_deletedProducts) >0 or $HdPassport/Action='Deleted'">
                            <pfx2:DeleteProductList>
                                <xsl:for-each select="$HdPassport[Action='Deleted']">
                                    <pfx2:Product>
                                        <xsl:variable name="_product" select="."/>
                                        <xsl:if test="$rootItem/ActionReason">
                                            <pfx2:ActionReason>
                                                <xsl:value-of select="$rootItem/ActionReason"/>
                                            </pfx2:ActionReason>
                                        </xsl:if>
                                        <xsl:if test="$rootItem/ActionType">
                                            <pfx2:ActionType>
                                                <xsl:value-of select="$rootItem/ActionType"/>
                                            </pfx2:ActionType>
                                        </xsl:if>
                                        <pfx2:ProductDuration>
                                            <xsl:choose>
                                                <!--Back Dated Orders-->
                                                <xsl:when test="$rootItem/ActionReason = '350' and $rootItem/ActionType = '134'">
                                                    <xsl:choose>
                                                        <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/DueDate)">
                                                            <pfx2:EndDate>
                                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/DueDate)"/>
                                                            </pfx2:EndDate>
                                                        </xsl:when>
                                                    </xsl:choose>
                                                </xsl:when>
                                                <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                            </xsl:choose>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                <xsl:variable name="_attributeName" select="."/>
                                                <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                <xsl:choose>
                                                    <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <pfx2:Value>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                            </pfx2:Value>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="$_attribute/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$_attribute/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="$_attribute/PreviousValue"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="current()/ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="current()/IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="current()/IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:MSISDN>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="$rootItem/ServiceId"/>
                                                    </pfx2:MSISDN>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="ComponentSubType='DUAL SIM'">
                                                    <pfx2:ListAttributes>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="'COUPLED_MSISDN'"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Coupled MSISDN']/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Coupled MSISDN']/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                        </pfx2:Atribute>
                                                    </pfx2:ListAttributes>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ListAttributes>
                                                        <xsl:for-each select="current()/ListOfChildItemAttribute/ChildItemAttribute">
                                                            <xsl:choose>
                                                                <xsl:when test="$rootItem/ListOfChildItem/ChildItem/ProductClass = 'GROUP_CHILD_CLASS'&#xA;and&#xA;current()/Name = 'Discount End Date'&#xA;and&#xA;tib:validate-dateTime('dd/MM/yyyy', current()/Value)">
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="tib:parse-dateTime('dd/MM/yyyy', current()/Value)"/>
                                                                        </pfx2:Value>
                                                                    </pfx2:Atribute>
                                                                </xsl:when>
                                                                <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <xsl:if test="current()/Value">
                                                                            <pfx2:Value>
                                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                            </pfx2:Value>
                                                                        </xsl:if>
                                                                    </pfx2:Atribute>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <xsl:if test="current()/Value">
                                                                            <pfx2:Value>
                                                                                <xsl:value-of select="current()/Value"/>
                                                                            </pfx2:Value>
                                                                        </xsl:if>
                                                                    </pfx2:Atribute>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:for-each>
                                                    </pfx2:ListAttributes>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </pfx2:ProductCustomerData>
                                        <xsl:variable name="_productPenalty" select="count($GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign[ns32:CampaignCode = current()/IntegrationId])>0&#xA;or&#xA;count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)])>0"/>
                                        <xsl:choose>
                                            <xsl:when test="$_productPenalty">
                                                <xsl:choose>
                                                    <xsl:when test="count($GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign)>0">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:variable name="penalty" select="$GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign[ns32:CampaignCode = current()/IntegrationId]"/>
                                                            <xsl:if test="number($penalty/ns32:Amount) !='NaN'">
                                                                <pfx2:PenaltyAmount>
                                                                    <xsl:value-of select="$penalty/ns32:Amount"/>
                                                                </pfx2:PenaltyAmount>
                                                            </xsl:if>
                                                            <pfx2:PenaltyMethod>
                                                                <xsl:value-of select="$penalty/ns32:PenaltyMethod"/>
                                                            </pfx2:PenaltyMethod>
                                                            <pfx2:PenaltyCalculationMode>
                                                                <xsl:value-of select="$penalty/ns32:PenaltyCalculationMode"/>
                                                            </pfx2:PenaltyCalculationMode>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="$_product/SkipPenalty='Y'"/>
                                                            </pfx2:SkipPenalty>
                                                            <xsl:choose>
                                                                <xsl:when test="count($penalty/ns32:PenaltyItems)>0">
                                                                    <pfx2:Source>
                                                                        <xsl:value-of select="'PTSM'"/>
                                                                    </pfx2:Source>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <pfx2:Source>
                                                                        <xsl:value-of select="''"/>
                                                                    </pfx2:Source>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                    <xsl:when test="count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)])>0">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:if test="number($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value) !='NaN'">
                                                                <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                    <pfx2:PenaltyAmount>
                                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                    </pfx2:PenaltyAmount>
                                                                </xsl:if>
                                                            </xsl:if>
                                                            <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                <pfx2:PenaltyMethod>
                                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                </pfx2:PenaltyMethod>
                                                            </xsl:if>
                                                            <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                <pfx2:PenaltyCalculationMode>
                                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                </pfx2:PenaltyCalculationMode>
                                                            </xsl:if>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="$_product/SkipPenalty='Y'"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltySource&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                            </pfx2:Source>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                </xsl:choose>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:choose>
                                                    <xsl:when test="$_product/SkipPenalty='N'">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:if test="string-length($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Type&quot;]/Value) >0">
                                                                <pfx2:PenaltyType>
                                                                    <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Type&quot;]/Value"/>
                                                                </pfx2:PenaltyType>
                                                            </xsl:if>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="false()"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="''"/>
                                                            </pfx2:Source>
                                                            <xsl:if test="number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value) !='NaN'&#xA;and&#xA;exists($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value)">
                                                                <pfx2:DiscountDuration>
                                                                    <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value"/>
                                                                </pfx2:DiscountDuration>
                                                            </xsl:if>
                                                            <xsl:if test="number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value) !='NaN'&#xA;and&#xA;exists($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value)">
                                                                <xsl:if test="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value">
                                                                    <pfx2:TotalDeviceAmount>
                                                                        <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value"/>
                                                                    </pfx2:TotalDeviceAmount>
                                                                </xsl:if>
                                                            </xsl:if>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:ProductPenalty>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="$_product/SkipPenalty='Y'"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="''"/>
                                                            </pfx2:Source>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx2:Product>
                                </xsl:for-each>
                                <xsl:for-each select="$_deletedProducts">
                                    <pfx2:Product>
                                        <xsl:variable name="_product" select="."/>
                                        <xsl:if test="$rootItem/ActionReason">
                                            <pfx2:ActionReason>
                                                <xsl:value-of select="$rootItem/ActionReason"/>
                                            </pfx2:ActionReason>
                                        </xsl:if>
                                        <xsl:if test="$rootItem/ActionType">
                                            <pfx2:ActionType>
                                                <xsl:value-of select="$rootItem/ActionType"/>
                                            </pfx2:ActionType>
                                        </xsl:if>
                                        <pfx2:ProductDuration>
                                            <xsl:choose>
                                                <!--Back Dated Orders-->
                                                <xsl:when test="$rootItem/ActionReason = '350' and $rootItem/ActionType = '134'">
                                                    <xsl:choose>
                                                        <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/DueDate)">
                                                            <pfx2:EndDate>
                                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/DueDate)"/>
                                                            </pfx2:EndDate>
                                                        </xsl:when>
                                                    </xsl:choose>
                                                </xsl:when>
                                                <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderDueDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                            </xsl:choose>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                <xsl:variable name="_attributeName" select="."/>
                                                <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                <xsl:choose>
                                                    <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <pfx2:Value>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                            </pfx2:Value>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="$_attribute/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$_attribute/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="$_attribute/PreviousValue"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="current()/ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="current()/IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="current()/IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:MSISDN>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="$rootItem/ServiceId"/>
                                                    </pfx2:MSISDN>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="ComponentSubType='DUAL SIM'">
                                                    <pfx2:ListAttributes>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="'COUPLED_MSISDN'"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Coupled MSISDN']/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Coupled MSISDN']/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                        </pfx2:Atribute>
                                                    </pfx2:ListAttributes>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ListAttributes>
                                                        <xsl:for-each select="current()/ListOfChildItemAttribute/ChildItemAttribute">
                                                            <xsl:choose>
                                                                <xsl:when test="$rootItem/ListOfChildItem/ChildItem/ProductClass = 'GROUP_CHILD_CLASS'&#xA;and&#xA;current()/Name = 'Discount End Date'&#xA;and&#xA;tib:validate-dateTime('dd/MM/yyyy', current()/Value)">
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="tib:parse-dateTime('dd/MM/yyyy', current()/Value)"/>
                                                                        </pfx2:Value>
                                                                    </pfx2:Atribute>
                                                                </xsl:when>
                                                                <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <xsl:if test="current()/Value">
                                                                            <pfx2:Value>
                                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                            </pfx2:Value>
                                                                        </xsl:if>
                                                                    </pfx2:Atribute>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <xsl:if test="current()/Value">
                                                                            <pfx2:Value>
                                                                                <xsl:value-of select="current()/Value"/>
                                                                            </pfx2:Value>
                                                                        </xsl:if>
                                                                    </pfx2:Atribute>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:for-each>
                                                    </pfx2:ListAttributes>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </pfx2:ProductCustomerData>
                                        <xsl:variable name="_productPenalty" select="count($GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign[ns32:CampaignCode = current()/IntegrationId])>0&#xA;or&#xA;count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)])>0"/>
                                        <xsl:choose>
                                            <xsl:when test="$_productPenalty">
                                                <xsl:choose>
                                                    <xsl:when test="count($GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign)>0">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:variable name="penalty" select="$GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Body/ns32:Response/ns32:Campaign[ns32:CampaignCode = current()/IntegrationId]"/>
                                                            <xsl:if test="number($penalty/ns32:Amount) !='NaN'">
                                                                <pfx2:PenaltyAmount>
                                                                    <xsl:value-of select="$penalty/ns32:Amount"/>
                                                                </pfx2:PenaltyAmount>
                                                            </xsl:if>
                                                            <pfx2:PenaltyMethod>
                                                                <xsl:value-of select="$penalty/ns32:PenaltyMethod"/>
                                                            </pfx2:PenaltyMethod>
                                                            <pfx2:PenaltyCalculationMode>
                                                                <xsl:value-of select="$penalty/ns32:PenaltyCalculationMode"/>
                                                            </pfx2:PenaltyCalculationMode>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="$_product/SkipPenalty='Y'"/>
                                                            </pfx2:SkipPenalty>
                                                            <xsl:choose>
                                                                <xsl:when test="count($penalty/ns32:PenaltyItems)>0">
                                                                    <pfx2:Source>
                                                                        <xsl:value-of select="'PTSM'"/>
                                                                    </pfx2:Source>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <pfx2:Source>
                                                                        <xsl:value-of select="''"/>
                                                                    </pfx2:Source>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                    <xsl:when test="count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,current()/IntegrationId)])>0">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:if test="number($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value) !='NaN'">
                                                                <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                    <pfx2:PenaltyAmount>
                                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;Amount&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                    </pfx2:PenaltyAmount>
                                                                </xsl:if>
                                                            </xsl:if>
                                                            <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                <pfx2:PenaltyMethod>
                                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyMethod&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                </pfx2:PenaltyMethod>
                                                            </xsl:if>
                                                            <xsl:if test="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value">
                                                                <pfx2:PenaltyCalculationMode>
                                                                    <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltyCalculationMode&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                                </pfx2:PenaltyCalculationMode>
                                                            </xsl:if>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="$_product/SkipPenalty='Y'"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key=concat(&quot;PenaltySource&quot;, &quot;_&quot;, current()/IntegrationId)]/Value"/>
                                                            </pfx2:Source>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                </xsl:choose>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:choose>
                                                    <xsl:when test="$_product/SkipPenalty='N'">
                                                        <pfx2:ProductPenalty>
                                                            <xsl:if test="string-length($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Type&quot;]/Value) >0">
                                                                <pfx2:PenaltyType>
                                                                    <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Type&quot;]/Value"/>
                                                                </pfx2:PenaltyType>
                                                            </xsl:if>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="false()"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="''"/>
                                                            </pfx2:Source>
                                                            <xsl:if test="number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value) !='NaN'&#xA;and&#xA;exists($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value)">
                                                                <pfx2:DiscountDuration>
                                                                    <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Discount Duration&quot;]/Value"/>
                                                                </pfx2:DiscountDuration>
                                                            </xsl:if>
                                                            <xsl:if test="number($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value) !='NaN'&#xA;and&#xA;exists($_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value)">
                                                                <xsl:if test="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value">
                                                                    <pfx2:TotalDeviceAmount>
                                                                        <xsl:value-of select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name =&quot;Total Device Amount&quot;]/Value"/>
                                                                    </pfx2:TotalDeviceAmount>
                                                                </xsl:if>
                                                            </xsl:if>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:ProductPenalty>
                                                            <pfx2:SkipPenalty>
                                                                <xsl:value-of select="$_product/SkipPenalty='Y'"/>
                                                            </pfx2:SkipPenalty>
                                                            <pfx2:Source>
                                                                <xsl:value-of select="''"/>
                                                            </pfx2:Source>
                                                        </pfx2:ProductPenalty>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </pfx2:Product>
                                </xsl:for-each>
                            </pfx2:DeleteProductList>
                        </xsl:if>
                        <xsl:if test="count($_newProducts)  > 0 or $HdPassport/Action='New'">
                            <pfx2:AddProductList>
                                <xsl:for-each select="$_newProducts">
                                    <pfx2:Product>
                                        <xsl:variable name="_product" select="."/>
                                        <xsl:if test="$rootItem/ActionReason">
                                            <pfx2:ActionReason>
                                                <xsl:value-of select="$rootItem/ActionReason"/>
                                            </pfx2:ActionReason>
                                        </xsl:if>
                                        <xsl:if test="$Parse-XML/OSMOrder/CategoryAction">
                                            <pfx2:CategoryAction>
                                                <xsl:value-of select="$Parse-XML/OSMOrder/CategoryAction"/>
                                            </pfx2:CategoryAction>
                                        </xsl:if>
                                        <xsl:if test="$rootItem/ActionType">
                                            <pfx2:ActionType>
                                                <xsl:value-of select="$rootItem/ActionType"/>
                                            </pfx2:ActionType>
                                        </xsl:if>
                                        <xsl:if test="string-length($Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag)>0">
                                            <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag">
                                                <pfx2:isFDOOrder>
                                                    <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag"/>
                                                </pfx2:isFDOOrder>
                                            </xsl:if>
                                        </xsl:if>
                                        <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate)">
                                            <pfx2:OrderCreationDate>
                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate)"/>
                                            </pfx2:OrderCreationDate>
                                        </xsl:if>
                                        <pfx2:ProductDuration>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <!--Back Dated Orders-->
                                                <xsl:when test="$rootItem/ActionReason = '350' and $rootItem/ActionType = '134'">
                                                    <xsl:choose>
                                                        <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/DueDate)">
                                                            <pfx2:StartDate>
                                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/DueDate)"/>
                                                            </pfx2:StartDate>
                                                        </xsl:when>
                                                    </xsl:choose>
                                                </xsl:when>
                                                <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <!--Back Dated Orders-->
                                                <xsl:when test="$rootItem[ActionReason = '350' and ActionType = '134']/ListOfChildItem/ChildItem[Action='New']/ProductClass='TARIFF PLAN CLASS'">
                                                    <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ActionReason = '350' and $rootItem/ActionType = '134']/ListOfChildItem/ChildItem[Action='New' and ProductClass='TARIFF PLAN CLASS']/DueDate)">
                                                        <pfx2:ModifyDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ActionReason = '350' and $rootItem/ActionType = '134']/ListOfChildItem/ChildItem[Action='New' and ProductClass='TARIFF PLAN CLASS']/DueDate)"/>
                                                        </pfx2:ModifyDate>
                                                    </xsl:if>
                                                </xsl:when>
                                            </xsl:choose>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                <xsl:variable name="_attributeName" select="."/>
                                                <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                <xsl:choose>
                                                    <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <pfx2:Value>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                            </pfx2:Value>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="$_attribute/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$_attribute/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="$_attribute/PreviousValue"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="current()/ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="current()/IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="current()/IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:MSISDN>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="$rootItem/ServiceId"/>
                                                    </pfx2:MSISDN>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="ComponentSubType='DUAL SIM'">
                                                    <pfx2:ListAttributes>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="'COUPLED_MSISDN'"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Coupled MSISDN']/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Coupled MSISDN']/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                        </pfx2:Atribute>
                                                    </pfx2:ListAttributes>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ListAttributes>
                                                        <xsl:if test="{--SVB Link Attributes--}&#xA;current()/ProductCatalogId = (&quot;10010&quot;,&quot;30010&quot;,&quot;4010&quot;,&quot;7010&quot;,&quot;8010&quot;,&quot;9010&quot;)">
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="'ParentIntegrationId'"/>
                                                                </pfx2:Name>
                                                                <xsl:if test="$rootItem/IntegrationId">
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                                                    </pfx2:Value>
                                                                </xsl:if>
                                                            </pfx2:Atribute>
                                                        </xsl:if>
                                                        <xsl:for-each select="current()/ListOfChildItemAttribute/ChildItemAttribute">
                                                            <xsl:choose>
                                                                <xsl:when test="$rootItem/ListOfChildItem/ChildItem/ProductClass = 'GROUP_CHILD_CLASS'&#xA;and&#xA;current()/Name = 'Discount End Date'&#xA;and&#xA;tib:validate-dateTime('dd/MM/yyyy', current()/Value)">
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="tib:parse-dateTime('dd/MM/yyyy', current()/Value)"/>
                                                                        </pfx2:Value>
                                                                    </pfx2:Atribute>
                                                                </xsl:when>
                                                                <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                        </pfx2:Value>
                                                                    </pfx2:Atribute>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <xsl:if test="current()/Value">
                                                                            <pfx2:Value>
                                                                                <xsl:value-of select="current()/Value"/>
                                                                            </pfx2:Value>
                                                                        </xsl:if>
                                                                    </pfx2:Atribute>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:for-each>
                                                    </pfx2:ListAttributes>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </pfx2:ProductCustomerData>
                                        <xsl:choose>
                                            <xsl:when test="current()/ListOfChildItemAttribute/ChildItemAttribute/Name='Fee Price'">
                                                <pfx2:CurrencyRate>
                                                    <pfx2:Amount>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Fee Price']/Value"/>
                                                    </pfx2:Amount>
                                                    <xsl:variable name="BillActCode" select="$rootItem/BillAcctCode "/>
                                                    <pfx2:Currency>
                                                        <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfBillingAccount/BillingAccount[$BillActCode = BillAcctCode]/BillAcctCurrencyCode"/>
                                                    </pfx2:Currency>
                                                </pfx2:CurrencyRate>
                                            </xsl:when>
                                            <xsl:otherwise/>
                                        </xsl:choose>
                                    </pfx2:Product>
                                </xsl:for-each>
                                <xsl:for-each select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfAdjustment/Adjustment">
                                    <pfx2:Product>
                                        <xsl:if test="$rootItem/ActionReason">
                                            <pfx2:ActionReason>
                                                <xsl:value-of select="$rootItem/ActionReason"/>
                                            </pfx2:ActionReason>
                                        </xsl:if>
                                        <xsl:if test="$rootItem/ActionType">
                                            <pfx2:ActionType>
                                                <xsl:value-of select="$rootItem/ActionType"/>
                                            </pfx2:ActionType>
                                        </xsl:if>
                                        <xsl:if test="string-length(../../OrderFutureDatedFlag)>0">
                                            <xsl:if test="../../OrderFutureDatedFlag">
                                                <pfx2:isFDOOrder>
                                                    <xsl:value-of select="../../OrderFutureDatedFlag"/>
                                                </pfx2:isFDOOrder>
                                            </xsl:if>
                                        </xsl:if>
                                        <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, ../../OrderCreationDate)">
                                            <pfx2:OrderCreationDate>
                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,../../OrderCreationDate)"/>
                                            </pfx2:OrderCreationDate>
                                        </xsl:if>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="ProductCatalogId"/>
                                            </pfx2:Id>
                                            <pfx2:InstanceId>
                                                <xsl:value-of select="AdjustmentId"/>
                                            </pfx2:InstanceId>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <pfx2:ExternalBillingAccountId>
                                                <xsl:value-of select="BillAcctCode"/>
                                            </pfx2:ExternalBillingAccountId>
                                        </pfx2:ProductCustomerData>
                                        <pfx2:CurrencyRate>
                                            <pfx2:Amount>
                                                <xsl:value-of select="RequestAmt"/>
                                            </pfx2:Amount>
                                            <xsl:variable name="var2" select="$rootItem/BillAcctCode "/>
                                            <pfx2:Currency>
                                                <xsl:value-of select="../../ListOfBillingAccount/BillingAccount[$var2 = BillAcctCode]/BillAcctCurrencyCode"/>
                                            </pfx2:Currency>
                                        </pfx2:CurrencyRate>
                                    </pfx2:Product>
                                </xsl:for-each>
                                <xsl:for-each select="$HdPassport[Action='New']">
                                    <pfx2:Product>
                                        <xsl:variable name="_product" select="."/>
                                        <xsl:if test="$rootItem/ActionReason">
                                            <pfx2:ActionReason>
                                                <xsl:value-of select="$rootItem/ActionReason"/>
                                            </pfx2:ActionReason>
                                        </xsl:if>
                                        <xsl:if test="$Parse-XML/OSMOrder/CategoryAction">
                                            <pfx2:CategoryAction>
                                                <xsl:value-of select="$Parse-XML/OSMOrder/CategoryAction"/>
                                            </pfx2:CategoryAction>
                                        </xsl:if>
                                        <xsl:if test="$rootItem/ActionType">
                                            <pfx2:ActionType>
                                                <xsl:value-of select="$rootItem/ActionType"/>
                                            </pfx2:ActionType>
                                        </xsl:if>
                                        <xsl:if test="string-length($Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag)>0">
                                            <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag">
                                                <pfx2:isFDOOrder>
                                                    <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/OrderFutureDatedFlag"/>
                                                </pfx2:isFDOOrder>
                                            </xsl:if>
                                        </xsl:if>
                                        <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate)">
                                            <pfx2:OrderCreationDate>
                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/OrderCreationDate)"/>
                                            </pfx2:OrderCreationDate>
                                        </xsl:if>
                                        <pfx2:ProductDuration>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <!--Back Dated Orders-->
                                                <xsl:when test="$rootItem/ActionReason = '350' and $rootItem/ActionType = '134'">
                                                    <xsl:choose>
                                                        <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/DueDate)">
                                                            <pfx2:StartDate>
                                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/DueDate)"/>
                                                            </pfx2:StartDate>
                                                        </xsl:when>
                                                    </xsl:choose>
                                                </xsl:when>
                                                <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <!--Back Dated Orders-->
                                                <xsl:when test="$rootItem[ActionReason = '350' and ActionType = '134']/ListOfChildItem/ChildItem[Action='New']/ProductClass='TARIFF PLAN CLASS'">
                                                    <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ActionReason = '350' and $rootItem/ActionType = '134']/ListOfChildItem/ChildItem[Action='New' and ProductClass='TARIFF PLAN CLASS']/DueDate)">
                                                        <pfx2:ModifyDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ActionReason = '350' and $rootItem/ActionType = '134']/ListOfChildItem/ChildItem[Action='New' and ProductClass='TARIFF PLAN CLASS']/DueDate)"/>
                                                        </pfx2:ModifyDate>
                                                    </xsl:if>
                                                </xsl:when>
                                            </xsl:choose>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                <xsl:variable name="_attributeName" select="."/>
                                                <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                <xsl:choose>
                                                    <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <pfx2:Value>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                            </pfx2:Value>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="$_attribute/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$_attribute/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="$_attribute/PreviousValue"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="current()/ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="current()/IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="current()/IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:MSISDN>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="$rootItem/ServiceId"/>
                                                    </pfx2:MSISDN>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="ComponentSubType='DUAL SIM'">
                                                    <pfx2:ListAttributes>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="'COUPLED_MSISDN'"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Coupled MSISDN']/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Coupled MSISDN']/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                        </pfx2:Atribute>
                                                    </pfx2:ListAttributes>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ListAttributes>
                                                        <xsl:if test="{--SVB Link Attributes--}&#xA;current()/ProductCatalogId = (&quot;10010&quot;,&quot;30010&quot;,&quot;4010&quot;,&quot;7010&quot;,&quot;8010&quot;,&quot;9010&quot;)">
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="'ParentIntegrationId'"/>
                                                                </pfx2:Name>
                                                                <xsl:if test="$rootItem/IntegrationId">
                                                                    <pfx2:Value>
                                                                        <xsl:value-of select="$rootItem/IntegrationId"/>
                                                                    </pfx2:Value>
                                                                </xsl:if>
                                                            </pfx2:Atribute>
                                                        </xsl:if>
                                                        <xsl:for-each select="current()/ListOfChildItemAttribute/ChildItemAttribute">
                                                            <xsl:choose>
                                                                <xsl:when test="$rootItem/ListOfChildItem/ChildItem/ProductClass = 'GROUP_CHILD_CLASS'&#xA;and&#xA;current()/Name = 'Discount End Date'&#xA;and&#xA;tib:validate-dateTime('dd/MM/yyyy', current()/Value)">
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="tib:parse-dateTime('dd/MM/yyyy', current()/Value)"/>
                                                                        </pfx2:Value>
                                                                    </pfx2:Atribute>
                                                                </xsl:when>
                                                                <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                        </pfx2:Value>
                                                                    </pfx2:Atribute>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <xsl:if test="current()/Value">
                                                                            <pfx2:Value>
                                                                                <xsl:value-of select="current()/Value"/>
                                                                            </pfx2:Value>
                                                                        </xsl:if>
                                                                    </pfx2:Atribute>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:for-each>
                                                    </pfx2:ListAttributes>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </pfx2:ProductCustomerData>
                                    </pfx2:Product>
                                </xsl:for-each>
                            </pfx2:AddProductList>
                        </xsl:if>
                        <xsl:if test="count($rootItem/ListOfChildItem/ChildItem[ Action='Modified' and ProductCatalogId!=('1113') and ProductCatalogId!=('1103')  and ProductCatalogId!='3001'  and (not(ComponentType ='GROUP_CHILD' ) or (ComponentType = 'GROUP_CHILD' and ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Percentage' and PreviousValue !=Value]/Value >0))])>0&#xA;or&#xA;(&#xA;&#x9;count($rootItem/ListOfChildItem/ChildItem[ Action=('New','Deleted') and ProductCatalogId=(tib:tokenize($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/HDPassportCompatible, ','))])>0&#xA;&#x9;and&#xA;&#x9;exists($rootItem/ListOfChildItem/ChildItem[ Action='Existing' and ProductCatalogId='17006'])&#xA;)">
                            <pfx2:ModifyProductList>
                                <xsl:if test="count($rootItem/ListOfChildItem/ChildItem[ Action=('New','Deleted') and ProductCatalogId=(tib:tokenize($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/HDPassportCompatible, ','))])>0&#xA;&#x9;and&#xA;&#x9;exists($rootItem/ListOfChildItem/ChildItem[ Action='Existing' and ProductCatalogId='17006'])">
                                    <pfx2:Product>
                                        <xsl:variable name="Product" select="$rootItem/ListOfChildItem/ChildItem[ Action='Existing' and ProductCatalogId='17006']"/>
                                        <pfx2:ActionReason>
                                            <xsl:value-of select="$rootItem/ActionReason"/>
                                        </pfx2:ActionReason>
                                        <pfx2:ActionType>
                                            <xsl:value-of select="$rootItem/ActionType"/>
                                        </pfx2:ActionType>
                                        <pfx2:ProductDuration>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Product/EndDate)">
                                                <pfx2:EndDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Product/EndDate)"/>
                                                </pfx2:EndDate>
                                            </xsl:if>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Product/StartDate)">
                                                <pfx2:StartDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Product/StartDate)"/>
                                                </pfx2:StartDate>
                                            </xsl:if>
                                            <xsl:choose>
                                                <!--Back Dated Orders-->
                                                <xsl:when test="$rootItem[ActionReason = '350' and ActionType = '134']/ListOfChildItem/ChildItem[Action='New']/ProductClass='TARIFF PLAN CLASS'">
                                                    <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ActionReason = '350' and $rootItem/ActionType = '134']/ListOfChildItem/ChildItem[Action='New' and ProductClass='TARIFF PLAN CLASS']/DueDate)">
                                                        <pfx2:ModifyDate>
                                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[ActionReason = '350' and $rootItem/ActionType = '134']/ListOfChildItem/ChildItem[Action='New' and ProductClass='TARIFF PLAN CLASS']/DueDate)"/>
                                                        </pfx2:ModifyDate>
                                                    </xsl:if>
                                                </xsl:when>
                                                <xsl:when test="string-length($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value)>0">
                                                    <pfx2:ModifyDate>
                                                        <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]/Value"/>
                                                    </pfx2:ModifyDate>
                                                </xsl:when>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Product/ModifyDate)">
                                                    <pfx2:ModifyDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Product/ModifyDate)"/>
                                                    </pfx2:ModifyDate>
                                                </xsl:when>
                                            </xsl:choose>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$Product/EBUProductCategory]/Attribute">
                                                <xsl:variable name="_attributeName" select="."/>
                                                <xsl:variable name="_attribute" select="$Product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                <xsl:choose>
                                                    <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <pfx2:Value>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                            </pfx2:Value>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="$_attribute/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$_attribute/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="$_attribute/PreviousValue"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="$Product/ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="$Product/IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="$Product/IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <pfx2:ExternalBillingAccountId>
                                                <xsl:value-of select="$rootItem/BillAcctCode"/>
                                            </pfx2:ExternalBillingAccountId>
                                            <pfx2:MSISDN>
                                                <xsl:value-of select="$rootItem/MSISDN"/>
                                            </pfx2:MSISDN>
                                            <pfx2:ListAttributes>
                                                <pfx2:Atribute>
                                                    <pfx2:Name>
                                                        <xsl:value-of select="'Segment'"/>
                                                    </pfx2:Name>
                                                    <pfx2:Value>
                                                        <xsl:value-of select="$Segment"/>
                                                    </pfx2:Value>
                                                </pfx2:Atribute>
                                                <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[ Action=('New','Deleted') and ProductCatalogId=('1302','1303','1304','1305','1306','1307','52028','52029','52030','1318','1319','1504','1503','1501','1417','1483','1486','1502','1415','1361','1484','1416','1485','1360','1487','1362','1363','1359','1418','1409','1405','1407','1406','1408','1401','1400','1403','1402','1404','1494','1495','1493','1492','1481','1480','1482','52053','52051','52052','52006','52050','1603','1604','1605','1606','1607','1608','1610','1611','1612','1613','1614','1530','1531','1532','1617','1618','1619','1620')]/ListOfChildItemAttribute/ChildItemAttribute">
                                                    <xsl:choose>
                                                        <xsl:when test="$rootItem/ListOfChildItem/ChildItem/ProductClass = 'GROUP_CHILD_CLASS'&#xA;and&#xA;current()/Name = 'Discount End Date'&#xA;and&#xA;tib:validate-dateTime('dd/MM/yyyy', current()/Value)">
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="tib:parse-dateTime('dd/MM/yyyy', current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="current()/Name"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="current()/Name"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="current()/Value"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                                <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[ Action='Existing' and ProductCatalogId='17006']/ListOfChildItemAttribute/ChildItemAttribute">
                                                    <xsl:choose>
                                                        <xsl:when test="$rootItem/ListOfChildItem/ChildItem/ProductClass = 'GROUP_CHILD_CLASS'&#xA;and&#xA;current()/Name = 'Discount End Date'&#xA;and&#xA;tib:validate-dateTime('dd/MM/yyyy', current()/Value)">
                                                            <pfx2:Atribute>
                                                                <xsl:if test="current()/Name">
                                                                    <pfx2:Name>
                                                                        <xsl:value-of select="current()/Name"/>
                                                                    </pfx2:Name>
                                                                </xsl:if>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="tib:parse-dateTime('dd/MM/yyyy', current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="current()/Name"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <pfx2:Atribute>
                                                                <pfx2:Name>
                                                                    <xsl:value-of select="current()/Name"/>
                                                                </pfx2:Name>
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="current()/Value"/>
                                                                </pfx2:Value>
                                                            </pfx2:Atribute>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:for-each>
                                            </pfx2:ListAttributes>
                                        </pfx2:ProductCustomerData>
                                    </pfx2:Product>
                                </xsl:if>
                                <xsl:for-each select="$rootItem/ListOfChildItem/ChildItem[Action='Modified' and not(ProductCatalogId=('1113','1103','3001'))  and (not(ComponentType ='GROUP_CHILD')  or (ComponentType = 'GROUP_CHILD' and ListOfChildItemAttribute/ChildItemAttribute[Name = 'Discount Percentage' and PreviousValue>0 and PreviousValue !=Value]/Value > 0))]">
                                    <pfx2:Product>
                                        <xsl:variable name="_product" select="."/>
                                        <xsl:if test="$rootItem/ActionReason">
                                            <pfx2:ActionReason>
                                                <xsl:value-of select="$rootItem/ActionReason"/>
                                            </pfx2:ActionReason>
                                        </xsl:if>
                                        <xsl:if test="$rootItem/ActionType">
                                            <pfx2:ActionType>
                                                <xsl:value-of select="$rootItem/ActionType"/>
                                            </pfx2:ActionType>
                                        </xsl:if>
                                        <pfx2:ProductDuration>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                                    <pfx2:EndDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                                    </pfx2:EndDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)">
                                                    <pfx2:StartDate>
                                                        <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/StartDate)"/>
                                                    </pfx2:StartDate>
                                                </xsl:when>
                                            </xsl:choose>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/ModifyDate)">
                                                <pfx2:ModifyDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/ModifyDate)"/>
                                                </pfx2:ModifyDate>
                                            </xsl:if>
                                        </pfx2:ProductDuration>
                                        <pfx2:ListAttributes>
                                            <pfx2:Atribute>
                                                <pfx2:Name>
                                                    <xsl:value-of select="'Segment'"/>
                                                </pfx2:Name>
                                                <pfx2:Value>
                                                    <xsl:value-of select="$Segment"/>
                                                </pfx2:Value>
                                            </pfx2:Atribute>
                                            <xsl:for-each select="$GetAttributesByProductCategory/Output/ProductCategory[Name=$_product/EBUProductCategory]/Attribute">
                                                <xsl:variable name="_attributeName" select="."/>
                                                <xsl:variable name="_attribute" select="$_product/ListOfChildItemAttribute/ChildItemAttribute[Name=$_attributeName][1]"/>
                                                <xsl:choose>
                                                    <xsl:when test="contains($_attribute/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$_attribute/Value )">
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <pfx2:Value>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/Value)"/>
                                                            </pfx2:Value>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="eai:parseDateBySource('Siebel',$_attribute/PreviousValue)"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="$_attribute/Name"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="$_attribute/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="$_attribute/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                            <pfx2:OldValue>
                                                                <xsl:value-of select="$_attribute/PreviousValue"/>
                                                            </pfx2:OldValue>
                                                        </pfx2:Atribute>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:for-each>
                                        </pfx2:ListAttributes>
                                        <pfx2:ProductId>
                                            <pfx2:Id>
                                                <xsl:value-of select="current()/ProductCatalogId"/>
                                            </pfx2:Id>
                                            <xsl:if test="current()/IntegrationId">
                                                <pfx2:InstanceId>
                                                    <xsl:value-of select="current()/IntegrationId"/>
                                                </pfx2:InstanceId>
                                            </xsl:if>
                                        </pfx2:ProductId>
                                        <pfx2:ProductCustomerData>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ExternalBillingAccountId>
                                                        <xsl:value-of select="$rootItem/BillAcctCode"/>
                                                    </pfx2:ExternalBillingAccountId>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="current()/ProductCatalogId = ($_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Constants/ProductCatalogId/MTT_Account)">
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name='Billing Account']/Value"/>
                                                    </pfx2:MSISDN>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:MSISDN>
                                                        <xsl:value-of select="$rootItem/MSISDN"/>
                                                    </pfx2:MSISDN>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:choose>
                                                <xsl:when test="ComponentSubType='DUAL SIM'">
                                                    <pfx2:ListAttributes>
                                                        <pfx2:Atribute>
                                                            <pfx2:Name>
                                                                <xsl:value-of select="'COUPLED_MSISDN'"/>
                                                            </pfx2:Name>
                                                            <xsl:if test="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Coupled MSISDN']/Value">
                                                                <pfx2:Value>
                                                                    <xsl:value-of select="current()/ListOfChildItemAttribute/ChildItemAttribute[Name = 'Coupled MSISDN']/Value"/>
                                                                </pfx2:Value>
                                                            </xsl:if>
                                                        </pfx2:Atribute>
                                                    </pfx2:ListAttributes>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <pfx2:ListAttributes>
                                                        <xsl:for-each select="current()/ListOfChildItemAttribute/ChildItemAttribute">
                                                            <xsl:choose>
                                                                <xsl:when test="$rootItem/ListOfChildItem/ChildItem/ProductClass = 'GROUP_CHILD_CLASS'&#xA;and&#xA;current()/Name = 'Discount End Date'&#xA;and&#xA;tib:validate-dateTime('dd/MM/yyyy', current()/Value)">
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="tib:parse-dateTime('dd/MM/yyyy', current()/Value)"/>
                                                                        </pfx2:Value>
                                                                    </pfx2:Atribute>
                                                                </xsl:when>
                                                                <xsl:when test="contains(current()/Name, &quot;Date&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/Value )">
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <pfx2:Value>
                                                                            <xsl:value-of select="eai:parseDateBySource('Siebel',current()/Value)"/>
                                                                        </pfx2:Value>
                                                                    </pfx2:Atribute>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <pfx2:Atribute>
                                                                        <xsl:if test="current()/Name">
                                                                            <pfx2:Name>
                                                                                <xsl:value-of select="current()/Name"/>
                                                                            </pfx2:Name>
                                                                        </xsl:if>
                                                                        <xsl:if test="current()/Value">
                                                                            <pfx2:Value>
                                                                                <xsl:value-of select="current()/Value"/>
                                                                            </pfx2:Value>
                                                                        </xsl:if>
                                                                        <xsl:if test="string-length(current()/PreviousValue) > 0">
                                                                            <xsl:if test="current()/PreviousValue">
                                                                                <pfx2:OldValue>
                                                                                    <xsl:value-of select="current()/PreviousValue"/>
                                                                                </pfx2:OldValue>
                                                                            </xsl:if>
                                                                        </xsl:if>
                                                                    </pfx2:Atribute>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:for-each>
                                                    </pfx2:ListAttributes>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </pfx2:ProductCustomerData>
                                    </pfx2:Product>
                                </xsl:for-each>
                            </pfx2:ModifyProductList>
                        </xsl:if>
                    </pfx2:Request>
                </xsl:otherwise>
            </xsl:choose>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>133</pd:x>
        <pd:y>61</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>false</validateOutput>
            <term ref="pfx6:OSMOrder"/>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Start/Input/pfx:RequestEAI/pfx:Body/*" element="ns:Request"/>
        </pd:coercions>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:XMLMessage/*[1]"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Fail-Order-Component">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>639</pd:x>
        <pd:y>264</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/OrderComponent/OrderComponentResponse.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <ns12:Request>
                    <ns12:OcDetails>
                        <ns12:Id>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </ns12:Id>
                        <ns12:Name>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                        </ns12:Name>
                        <ns12:Scenario>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario"/>
                        </ns12:Scenario>
                        <ns12:OrderId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </ns12:OrderId>
                        <ns12:CorrelationID>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:CorrelationID"/>
                        </ns12:CorrelationID>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Cartridge">
                            <ns12:Cartridge>
                                <ns12:Name>
                                    <xsl:value-of select="ns:Name"/>
                                </ns12:Name>
                                <ns12:Version>
                                    <xsl:value-of select="ns:Version"/>
                                </ns12:Version>
                                <ns12:Source>
                                    <xsl:value-of select="ns:Source"/>
                                </ns12:Source>
                            </ns12:Cartridge>
                        </xsl:for-each>
                    </ns12:OcDetails>
                    <ns12:ServiceReply>
                        <xsl:copy-of select="$GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Header"/>
                        <pfx8:Body>
                            <ns33:TelcoOperationResponse>
                                <Id>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                                </Id>
                                <Name>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                                </Name>
                                <OrderId>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                                </OrderId>
                                <StatusCode>
                                    <xsl:value-of select="$GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Header/ns4:ResponseCode"/>
                                </StatusCode>
                                <StatusMessage>
                                    <xsl:value-of select="tib:left(concat($GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Header/ns4:ResponseMsg, ': ', $GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Header/ns4:ErrorDescription), 1000)"/>
                                </StatusMessage>
                            </ns33:TelcoOperationResponse>
                        </pfx8:Body>
                    </ns12:ServiceReply>
                </ns12:Request>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetPenaltyType">
        <pd:type>com.tibco.plugin.jms.JMSQueueRequestReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueRequestReplyActivity</pd:resourceType>
        <pd:x>396</pd:x>
        <pd:y>262</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>VFTR.ProvisioningManagement.ServiceCatalog.PTSM.Business.R.Request.CalculatePenaltyType_v1</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx4:ServiceRequest"/>
            <OutDataxsdString ref="pfx8:ServiceReply"/>
        </config>
        <pd:inputBindings>
            <ns2:ActivityInput>
                <JMSExpiration>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestJMSMsgExpiration"/>
                </JMSExpiration>
                <requestTimeout>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestTimeout"/>
                </requestTimeout>
                <Body>
                    <pfx4:ServiceRequest>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx4:Header>
                                <ns3:RequestId>
                                    <xsl:value-of select="ns3:RequestId"/>
                                </ns3:RequestId>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/Reply/Now"/>
                                </ns3:ReplyExpected>
                                <ns3:QoS>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/QOS/Reliable"/>
                                </ns3:QoS>
                                <ns3:CorrelationId>
                                    <xsl:value-of select="ns3:CorrelationId"/>
                                </ns3:CorrelationId>
                                <ns3:Priority>
                                    <xsl:value-of select="ns3:Priority"/>
                                </ns3:Priority>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <ns3:Password>
                                            <xsl:value-of select="ns3:Password"/>
                                        </ns3:Password>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <ns3:ProxySystem>
                                    <xsl:value-of select="ns3:ProxySystem"/>
                                </ns3:ProxySystem>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx4:Header>
                        </xsl:for-each>
                        <pfx4:Body>
                            <ns32:Request>
                                <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="ChildItem" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[Action=('Deleted','Suspend') &#xA;and ComponentGroup='CAMP'&#xA;and ComponentType!='HANDSET'&#xA;and not(ProductCatalogId = ('5000','5005','11001','60007')) &#xA;]&#xA;&#xA;"/>
                                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                                    <ns32:ExternalId>
                                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                                    </ns32:ExternalId>
                                </xsl:if>
                                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                                    <ns32:ExternalComponentId>
                                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                                    </ns32:ExternalComponentId>
                                </xsl:if>
                                <xsl:if test="$ChildItem/BillAcctCode">
                                    <ns32:BillingAccount>
                                        <xsl:value-of select="$ChildItem/BillAcctCode"/>
                                    </ns32:BillingAccount>
                                </xsl:if>
                                <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem[ListOfChildItem/ChildItem[ComponentGroup='CAMP' and Action='Deleted']]/ServiceId">
                                    <ns32:MSISDN>
                                        <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem[ListOfChildItem/ChildItem[ComponentGroup='CAMP' and Action='Deleted']]/ServiceId"/>
                                    </ns32:MSISDN>
                                </xsl:if>
                                <xsl:for-each select="$ChildItem">
                                    <ns32:Campaign>
                                        <ns32:CampaignCode>
                                            <xsl:value-of select="IntegrationId"/>
                                        </ns32:CampaignCode>
                                        <ns32:CampaignReasonCode>
                                            <xsl:value-of select="ProductCatalogId"/>
                                        </ns32:CampaignReasonCode>
                                        <ns32:MethodType>
                                            <xsl:value-of select="'0'"/>
                                        </ns32:MethodType>
                                    </ns32:Campaign>
                                </xsl:for-each>
                            </ns32:Request>
                        </pfx4:Body>
                    </pfx4:ServiceRequest>
                </Body>
            </ns2:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetAttributesByProductCategory">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>398</pd:x>
        <pd:y>60</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/ProductManagement/GetAttributesByProductCategory.process</processName>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Parse-XML/OSMOrder/XMLMessage/*" element="pfx3:Order"/>
        </pd:coercions>
        <pd:inputBindings>
            <Input>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/EBUProductCategory">
                    <ProductCategory>
                        <xsl:value-of select="."/>
                    </ProductCategory>
                </xsl:for-each>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem/EBUProductCategory">
                    <ProductCategory>
                        <xsl:value-of select="."/>
                    </ProductCategory>
                </xsl:for-each>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetGlobalData">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>244</pd:x>
        <pd:y>60</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/TO2FGlobalData/GetGlobalData.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                    <OrderId>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                    </OrderId>
                </xsl:if>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS Queue Sender</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse XML</pd:from>
        <pd:to>GetGlobalData</pd:to>
        <pd:xpathDescription/>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPenaltyType</pd:from>
        <pd:to>Fail-Order-Component</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Fail-Order-Component</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetAttributesByProductCategory</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetPenaltyType</pd:from>
        <pd:to>GetAttributesByProductCategory</pd:to>
        <pd:xpathDescription>Success</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>($GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Header/ns4:ResponseCode = $_globalVariables/ns1:GlobalVariables/ErrorCodes/Success
and
count($Parse-XML/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[Action='New'])&gt;0)
or
($GetPenaltyType/ns2:ActivityOutput/Body/pfx8:ServiceReply/pfx8:Header/ns4:ResponseCode = $_globalVariables/ns1:GlobalVariables/ErrorCodes/Success
and
count($Parse-XML/OSMOrder/XMLMessage/*/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[Action='New'])=0)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetGlobalData</pd:from>
        <pd:to>GetPenaltyType</pd:to>
        <pd:xpathDescription>No Penalty in Global Data</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>count($GetGlobalData/Output/ListOfGlobalData/GlobalData[contains(Key,'Amount_')])=0
and
$Parse-XML/OSMOrder/CategoryAction=('ACT_FRO','CLO_FRO','LIM_FRO','ACT_CAN','ACT_TER','CLO_CAN','CLO_FRO_LSB','LIM_CAN','MOD_OPT','MOD_PLIST')
and
(
count($Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[not(ProductCatalogId = ('5000','5005','11001','60007')) and not(ComponentType='HANDSET') and Action=('Deleted','Suspend') and ComponentGroup='CAMP']) &gt; 0
or
count($Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[not(ProductCatalogId = ('5000','5005','11001','60007')) and Action=('Deleted','Suspend') and ComponentGroup='CAMP']) &gt; 0
)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetGlobalData</pd:from>
        <pd:to>GetAttributesByProductCategory</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>