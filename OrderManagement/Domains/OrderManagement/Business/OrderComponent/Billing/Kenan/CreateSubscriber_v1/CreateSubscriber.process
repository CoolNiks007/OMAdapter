<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" xmlns:ns32="urn:com:metasolv:oms:xmlapi:1" xmlns:ns12="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentResponseInput/v1" xmlns:ns5="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberInquiries/GetTaxesAndFees/v1" xmlns:pfx="http://vodafone.com.tr/EAI/Common/RequestEAI" xmlns:ns2="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns4="http://vodafone.com.tr/EAI/Common/ResponseCodes" xmlns:ns3="http://vodafone.com.tr/EAI/Common/Header" xmlns:pfx5="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx4="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx3="http://vodafone.com.tr/ServiceCatalog/Business/Billing/CreateSubscriber/v1" xmlns:pfx2="http://vodafone.com.tr/EAI/Common/ResponseEAI" xmlns:pfx9="http://vodafone.com.tr/ServiceCatalog/ServiceReply" xmlns:pfx8="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd" xmlns:pfx7="http://www.tibco.com/schemas/OrderManagement/Domains/OrderManagement/BusinessResources/Schemas/Schema.xsd" xmlns:pfx6="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberManagement/CreateSubscriber/v1">
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/RequestEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/RequestEAI.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/ResponseEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/ResponseEAI.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OrderComponent/OrderComponentRequestInput.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/Billing/CreateCustomer/v1" schemaLocation="/Domains/ServiceCatalog/Business/Billing/CreateCustomer_v1/Schemas/CreateCustomer.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/Billing/CreateSubscriber/v1" schemaLocation="/Domains/ServiceCatalog/Business/Billing/CreateSubscriber_v1/Schemas/CreateSubscriber.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberManagement/CreateSubscriber/v1" schemaLocation="/Domains/ServiceCatalog/Business/SubscriberManagement/CreateSubscriber_v1/Schemas/CreateSubscriber.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceRequest.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceReply" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceReply.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberInquiries/GetTaxesAndFees/v1" schemaLocation="/Domains/ServiceCatalog/Business/SubscriberInquiries/GetTaxesAndFees_v1/Schemas/GetTaxesAndFees.xsd"/>
    <pd:name>Domains/OrderManagement/Business/OrderComponent/Billing/Kenan/CreateSubscriber_v1/CreateSubscriber.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="Input">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:RequestEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>33</pd:startX>
    <pd:startY>77</pd:startY>
    <pd:returnBindings>
        <Output>
            <pfx2:ResponseEAI>
                <pfx2:Header>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ancestor-or-self::*/namespace::node()"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/@*"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/node()"/>
                </pfx2:Header>
                <pfx2:ResponseCodes>
                    <ns4:ResponseCode>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ErrorCodes/Success"/>
                    </ns4:ResponseCode>
                </pfx2:ResponseCodes>
            </pfx2:ResponseEAI>
        </Output>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="Output">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx2:ResponseEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>797</pd:endX>
    <pd:endY>239</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1407237293059</pd:targetNamespace>
    <pd:activity name="JMS Queue Requestor">
        <pd:type>com.tibco.plugin.jms.JMSQueueRequestReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueRequestReplyActivity</pd:resourceType>
        <pd:x>335</pd:x>
        <pd:y>83</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>%%Domains/OrderManagement/OrderComponent/Constants/AuxQueues/GetTaxesAndFees%%</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx5:ServiceRequest"/>
            <OutDataxsdString ref="pfx9:ServiceReply"/>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Parse-XML/OSMOrder/XMLMessage/*" element="pfx4:Order"/>
        </pd:coercions>
        <pd:inputBindings>
            <xsl:variable name="RootItem" select="$Parse-XML/OSMOrder/XMLMessage/Order[1]/ListOfRootItem/RootItem[1]"/>
            <ns2:ActivityInput>
                <JMSExpiration>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestJMSMsgExpiration"/>
                </JMSExpiration>
                <requestTimeout>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/OCSyncRequestTimeout"/>
                </requestTimeout>
                <Body>
                    <pfx5:ServiceRequest>
                        <xsl:for-each select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx5:Header>
                                <xsl:if test="ns3:RequestId">
                                    <ns3:RequestId>
                                        <xsl:value-of select="ns3:RequestId"/>
                                    </ns3:RequestId>
                                </xsl:if>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/Reply/Now"/>
                                </ns3:ReplyExpected>
                                <ns3:QoS>
                                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Constants/QOS/Reliable"/>
                                </ns3:QoS>
                                <xsl:if test="ns3:Schedule">
                                    <ns3:Schedule>
                                        <xsl:value-of select="ns3:Schedule"/>
                                    </ns3:Schedule>
                                </xsl:if>
                                <xsl:if test="ns3:CorrelationId">
                                    <ns3:CorrelationId>
                                        <xsl:value-of select="ns3:CorrelationId"/>
                                    </ns3:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns3:Priority">
                                    <ns3:Priority>
                                        <xsl:value-of select="ns3:Priority"/>
                                    </ns3:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <xsl:if test="ns3:Password">
                                            <ns3:Password>
                                                <xsl:value-of select="ns3:Password"/>
                                            </ns3:Password>
                                        </xsl:if>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns3:ProxySystem">
                                    <ns3:ProxySystem>
                                        <xsl:value-of select="ns3:ProxySystem"/>
                                    </ns3:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns3:ForceSimulate">
                                    <ns3:ForceSimulate>
                                        <xsl:value-of select="ns3:ForceSimulate"/>
                                    </ns3:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx5:Header>
                        </xsl:for-each>
                        <pfx5:Body>
                            <ns5:Request>
                                <xsl:choose>
                                    <xsl:when test="$RootItem/ActionSubReason = 'MNPPortIN'">
                                        <ns5:CategoryAction>
                                            <xsl:value-of select="'PORTIN_ACT'"/>
                                        </ns5:CategoryAction>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:if test="$Parse-XML/OSMOrder/CategoryAction">
                                            <ns5:CategoryAction>
                                                <xsl:value-of select="$Parse-XML/OSMOrder/CategoryAction"/>
                                            </ns5:CategoryAction>
                                        </xsl:if>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="$RootItem/ActionSubReason = 'MNPPortIN' and string-length($RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='PortINAcctPayType']/Value)>0">
                                        <ns5:AccountPayType>
                                            <xsl:value-of select="$RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='PortINAcctPayType']/Value"/>
                                        </ns5:AccountPayType>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <ns5:AccountPayType>
                                            <xsl:value-of select="$RootItem/AccountPayType"/>
                                        </ns5:AccountPayType>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:if test="count($RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='TaxType']/Value)>0">
                                    <xsl:if test="$RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='TaxType']/Value">
                                        <ns5:TaxType>
                                            <xsl:value-of select="$RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='TaxType']/Value"/>
                                        </ns5:TaxType>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="$RootItem/ActionReason">
                                    <ns5:ActionReason>
                                        <xsl:value-of select="$RootItem/ActionReason"/>
                                    </ns5:ActionReason>
                                </xsl:if>
                                <xsl:if test="$Parse-XML/OSMOrder/XMLMessage/Order[1]/ListOfBillingAccount/BillingAccount[BillAcctCode = $RootItem/BillAcctCode]/BillAcctTaxType">
                                    <ns5:VIPCode>
                                        <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order[1]/ListOfBillingAccount/BillingAccount[BillAcctCode = $RootItem/BillAcctCode]/BillAcctTaxType"/>
                                    </ns5:VIPCode>
                                </xsl:if>
                                <xsl:choose>
                                    <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order[1]/OrderSourceSystem)='kenan'">
                                        <ns5:StartDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order[1]/OrderDueDate)"/>
                                        </ns5:StartDate>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <ns5:StartDate>
                                            <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootItem/StartDate)"/>
                                        </ns5:StartDate>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="string-length($RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='Donor Operator']/Value)>0">
                                        <ns5:MNP>
                                            <xsl:value-of select="true()"/>
                                        </ns5:MNP>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <ns5:MNP>
                                            <xsl:value-of select="false()"/>
                                        </ns5:MNP>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="$Parse-XML/OSMOrder/XMLMessage/Order[1]/ListOfCustomerAccount/CustomerAccount[CustAcctCode = $RootItem/CustAcctCode]/CustAcctType='101'">
                                        <ns5:Segment>
                                            <xsl:value-of select="'EBU'"/>
                                        </ns5:Segment>
                                    </xsl:when>
                                    <xsl:when test="$Parse-XML/OSMOrder/XMLMessage/Order[1]/ListOfCustomerAccount/CustomerAccount[CustAcctCode = $RootItem/CustAcctCode]/CustAcctType='102'">
                                        <ns5:Segment>
                                            <xsl:value-of select="'CBU'"/>
                                        </ns5:Segment>
                                    </xsl:when>
                                    <xsl:otherwise/>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="$Parse-XML/OSMOrder/XMLMessage/Order[1]/ListOfBillingAccount/BillingAccount[BillAcctCode = $RootItem/BillAcctCode]/BillAcctDunningExemptFlag = 'Y'">
                                        <ns5:DunningExemptFlag>
                                            <xsl:value-of select="true()"/>
                                        </ns5:DunningExemptFlag>
                                    </xsl:when>
                                    <xsl:when test="$Parse-XML/OSMOrder/XMLMessage/Order[1]/ListOfBillingAccount/BillingAccount[BillAcctCode = $RootItem/BillAcctCode]/BillAcctDunningExemptFlag = 'N'">
                                        <ns5:DunningExemptFlag>
                                            <xsl:value-of select="false()"/>
                                        </ns5:DunningExemptFlag>
                                    </xsl:when>
                                    <xsl:otherwise/>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="$Parse-XML/OSMOrder/XMLMessage/Order[1]/ListOfBillingAccount/BillingAccount[BillAcctCode = $RootItem/BillAcctCode]/BillAcctFraudFlag = 'Y'">
                                        <ns5:FraudFlag>
                                            <xsl:value-of select="true()"/>
                                        </ns5:FraudFlag>
                                    </xsl:when>
                                    <xsl:when test="$Parse-XML/OSMOrder/XMLMessage/Order[1]/ListOfBillingAccount/BillingAccount[BillAcctCode = $RootItem/BillAcctCode]/BillAcctFraudFlag = 'N'">
                                        <ns5:FraudFlag>
                                            <xsl:value-of select="false()"/>
                                        </ns5:FraudFlag>
                                    </xsl:when>
                                    <xsl:otherwise/>
                                </xsl:choose>
                                <ns5:OldSubscriber>
                                    <xsl:if test="string-length($RootItem/VFTRCBUStatusControlDate)>0">
                                        <xsl:choose>
                                            <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order[1]/OrderSourceSystem)='kenan'">
                                                <ns5:SuspensionDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootItem/VFTRCBUStatusControlDate)"/>
                                                </ns5:SuspensionDate>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <ns5:SuspensionDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootItem/VFTRCBUStatusControlDate)"/>
                                                </ns5:SuspensionDate>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:if>
                                </ns5:OldSubscriber>
                            </ns5:Request>
                        </pfx5:Body>
                    </pfx5:ServiceRequest>
                </Body>
            </ns2:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="JMS Queue Sender">
        <pd:type>com.tibco.plugin.jms.JMSQueueSendActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueSendActivity</pd:resourceType>
        <pd:x>793</pd:x>
        <pd:y>73</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx5:ServiceRequest"/>
        </config>
        <pd:inputBindings>
            <ns2:ActivityInput>
                <destinationQueue>
                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:ServiceCatalogQueue"/>
                </destinationQueue>
                <replyToQueue>
                    <xsl:value-of select="tib:concat-sequence-format(($_globalVariables/ns1:GlobalVariables/Constants/Company,$_globalVariables/ns1:GlobalVariables/Constants/ProjectName,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/Name,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Name,$_globalVariables/ns1:GlobalVariables/Constants/Layer/Business,$_globalVariables/ns1:GlobalVariables/Constants/QOS/Guarantee,$_globalVariables/ns1:GlobalVariables/Constants/RequestType/Reply),&quot;.&quot;)"/>
                </replyToQueue>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Priority">
                    <JMSPriority>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Priority"/>
                    </JMSPriority>
                </xsl:if>
                <Body>
                    <pfx5:ServiceRequest>
                        <xsl:for-each select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx5:Header>
                                <xsl:if test="ns3:RequestId">
                                    <ns3:RequestId>
                                        <xsl:value-of select="ns3:RequestId"/>
                                    </ns3:RequestId>
                                </xsl:if>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="ns3:ReplyExpected"/>
                                </ns3:ReplyExpected>
                                <xsl:if test="ns3:QoS">
                                    <ns3:QoS>
                                        <xsl:value-of select="ns3:QoS"/>
                                    </ns3:QoS>
                                </xsl:if>
                                <xsl:if test="ns3:Schedule">
                                    <ns3:Schedule>
                                        <xsl:value-of select="ns3:Schedule"/>
                                    </ns3:Schedule>
                                </xsl:if>
                                <xsl:if test="ns3:CorrelationId">
                                    <ns3:CorrelationId>
                                        <xsl:value-of select="ns3:CorrelationId"/>
                                    </ns3:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns3:Priority">
                                    <ns3:Priority>
                                        <xsl:value-of select="ns3:Priority"/>
                                    </ns3:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <xsl:if test="ns3:Password">
                                            <ns3:Password>
                                                <xsl:value-of select="ns3:Password"/>
                                            </ns3:Password>
                                        </xsl:if>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns3:ProxySystem">
                                    <ns3:ProxySystem>
                                        <xsl:value-of select="ns3:ProxySystem"/>
                                    </ns3:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns3:ForceSimulate">
                                    <ns3:ForceSimulate>
                                        <xsl:value-of select="ns3:ForceSimulate"/>
                                    </ns3:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx5:Header>
                        </xsl:for-each>
                        <pfx5:Body>
                            <xsl:copy-of select="$Map-Data/pfx6:Request"/>
                        </pfx5:Body>
                    </pfx5:ServiceRequest>
                </Body>
            </ns2:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>619</pd:x>
        <pd:y>74</pd:y>
        <config>
            <element ref="pfx6:Request"/>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Body/*" element="ns5:Response"/>
            <pd:coercion xpath="$Parse-XML/OSMOrder/XMLMessage/*" element="pfx4:Order"/>
        </pd:coercions>
        <pd:inputBindings>
            <xsl:variable name="RootItem" select="if($Parse-XML/OSMOrder/CategoryAction =('FRO_CLO', 'FRO_LIM'))&#xA;then $Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[Action = ('Suspend','Resume')]&#xA;else $Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem[Action = ('New','Resume')]"/>
            <pfx6:Request>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                    <pfx6:ExternalId>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                    </pfx6:ExternalId>
                </xsl:if>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id">
                    <pfx6:ExternalComponentId>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                    </pfx6:ExternalComponentId>
                </xsl:if>
                <pfx6:BillingAccountId>
                    <xsl:value-of select="$RootItem/BillAcctCode"/>
                </pfx6:BillingAccountId>
                <xsl:choose>
                    <xsl:when test="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ActionSubReason = 'MNPPortIN'">
                        <pfx6:CategoryAction>
                            <xsl:value-of select="'PORTIN_ACT'"/>
                        </pfx6:CategoryAction>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:if test="$Parse-XML/OSMOrder/CategoryAction">
                            <pfx6:CategoryAction>
                                <xsl:value-of select="$Parse-XML/OSMOrder/CategoryAction"/>
                            </pfx6:CategoryAction>
                        </xsl:if>
                    </xsl:otherwise>
                </xsl:choose>
                <pfx6:CustomerId>
                    <xsl:value-of select="$RootItem/CustAcctCode"/>
                </pfx6:CustomerId>
                <pfx6:SubscriberActivationData>
                    <xsl:choose>
                        <xsl:when test="$RootItem/ActionSubReason = 'MNPPortIN'">
                            <pfx6:ServiceStatus>
                                <xsl:value-of select="'226'"/>
                            </pfx6:ServiceStatus>
                        </xsl:when>
                        <xsl:otherwise>
                            <pfx6:ServiceStatus>
                                <xsl:value-of select="$RootItem/ActionReason"/>
                            </pfx6:ServiceStatus>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="lower-case($Parse-XML/OSMOrder/XMLMessage/Order[1]/OrderSourceSystem)='kenan'">
                            <pfx6:StartDate>
                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/OSMOrder/XMLMessage/Order[1]/OrderDueDate)"/>
                            </pfx6:StartDate>
                        </xsl:when>
                        <xsl:when test="$RootItem/Action='Resume' or $RootItem/ActionType = '137' or $Parse-XML/OSMOrder/CategoryAction =('FRO_CLO', 'FRO_LIM')">
                            <pfx6:StartDate>
                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootItem/DueDate)"/>
                            </pfx6:StartDate>
                        </xsl:when>
                        <xsl:when test="exists($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key =$Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ComponentGroup = 'TARIFF']/IntegrationId]/Value)">
                            <pfx6:StartDate>
                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key = $Parse-XML/OSMOrder/XMLMessage/Order/ListOfRootItem/RootItem/ListOfChildItem/ChildItem[ComponentGroup = 'TARIFF']/IntegrationId]/Value"/>
                            </pfx6:StartDate>
                        </xsl:when>
                        <xsl:when test="exists($GetGlobalData/Output/ListOfGlobalData/GlobalData[Key = $_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]//Value)">
                            <pfx6:StartDate>
                                <xsl:value-of select="$GetGlobalData/Output/ListOfGlobalData/GlobalData[Key = $_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/GlobalDataNames/ProvisioningDateTime]//Value"/>
                            </pfx6:StartDate>
                        </xsl:when>
                        <xsl:otherwise>
                            <pfx6:StartDate>
                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootItem/StartDate)"/>
                            </pfx6:StartDate>
                        </xsl:otherwise>
                    </xsl:choose>
                    <pfx6:ListOfAttributes>
                        <xsl:if test="string-length($RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='Donor Operator']/Value)>0">
                            <pfx6:Attribute>
                                <pfx6:Name>
                                    <xsl:value-of select="'DonorOperator'"/>
                                </pfx6:Name>
                                <pfx6:Value>
                                    <xsl:value-of select="$RootItem/ListOfRootItemAttribute/RootItemAttribute[Name='Donor Operator']/Value"/>
                                </pfx6:Value>
                            </pfx6:Attribute>
                        </xsl:if>
                    </pfx6:ListOfAttributes>
                    <xsl:variable name="var" select="$RootItem/CustAcctCode "/>
                    <pfx6:SubscriberType>
                        <xsl:value-of select="$Parse-XML/OSMOrder/XMLMessage/Order/ListOfCustomerAccount/CustomerAccount[$var = CustAcctCode]/CustAcctType"/>
                    </pfx6:SubscriberType>
                </pfx6:SubscriberActivationData>
                <xsl:if test="string-length($RootItem/IMSI)>0">
                    <pfx6:SubscriberIds>
                        <pfx6:IMSI>
                            <xsl:value-of select="$RootItem/IMSI"/>
                        </pfx6:IMSI>
                    </pfx6:SubscriberIds>
                </xsl:if>
                <xsl:if test="string-length($RootItem/MSISDN)>0">
                    <pfx6:SubscriberIds>
                        <pfx6:MSISDN>
                            <xsl:value-of select="$RootItem/MSISDN"/>
                        </pfx6:MSISDN>
                    </pfx6:SubscriberIds>
                </xsl:if>
                <pfx6:SubscriberIds>
                    <pfx6:SubscriberId>
                        <xsl:value-of select="$RootItem/IntegrationId"/>
                    </pfx6:SubscriberId>
                </pfx6:SubscriberIds>
                <xsl:if test="$JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Header/ns4:ResponseCode=$_globalVariables/ns1:GlobalVariables/ErrorCodes/Success">
                    <pfx6:SubscriberFeesTaxes>
                        <pfx6:ListOfAttributes>
                            <xsl:if test="$RootItem/ActionSubReason = 'MNPPortIN'">
                                <pfx6:Attribute>
                                    <pfx6:Name>
                                        <xsl:value-of select="'MNP_TYPE'"/>
                                    </pfx6:Name>
                                    <xsl:choose>
                                        <xsl:when test="contains($RootItem/AccountPayType, 'PrePaid')">
                                            <pfx6:Value>
                                                <xsl:value-of select="'MNP_PREPAID'"/>
                                            </pfx6:Value>
                                        </xsl:when>
                                        <xsl:when test="contains($RootItem/AccountPayType, 'PostPaid')">
                                            <pfx6:Value>
                                                <xsl:value-of select="'MNP_POSTPAID'"/>
                                            </pfx6:Value>
                                        </xsl:when>
                                        <xsl:otherwise/>
                                    </xsl:choose>
                                </pfx6:Attribute>
                            </xsl:if>
                        </pfx6:ListOfAttributes>
                        <xsl:if test="exists($JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Body/ns5:Response/ns5:LicenseFee)">
                            <xsl:for-each select="$JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Body/ns5:Response/ns5:LicenseFee">
                                <pfx6:LicenseFee>
                                    <xsl:value-of select="."/>
                                </pfx6:LicenseFee>
                            </xsl:for-each>
                        </xsl:if>
                        <xsl:if test="exists($JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Body/ns5:Response/ns5:SpecialCommunicationTax)">
                            <xsl:choose>
                                <xsl:when test="contains($RootItem[CustAcctType='102' and ActionSubReason='MNPPortIN']/ListOfChildItem/ChildItem[ComponentGroup='TARIFF']/ComponentSubType, 'M2M')"/>
                                <xsl:otherwise>
                                    <xsl:for-each select="$JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Body/ns5:Response/ns5:SpecialCommunicationTax">
                                        <pfx6:SpecialCommunicationTax>
                                            <xsl:value-of select="."/>
                                        </pfx6:SpecialCommunicationTax>
                                    </xsl:for-each>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:if>
                        <xsl:if test="exists($JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Body/ns5:Response/ns5:UsageFee)>0">
                            <xsl:for-each select="$JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Body/ns5:Response/ns5:UsageFee">
                                <pfx6:UsageFee>
                                    <xsl:value-of select="."/>
                                </pfx6:UsageFee>
                            </xsl:for-each>
                        </xsl:if>
                    </pfx6:SubscriberFeesTaxes>
                </xsl:if>
            </pfx6:Request>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>196</pd:x>
        <pd:y>75</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>false</validateOutput>
            <term ref="pfx8:OSMOrder"/>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Start/Input/pfx:RequestEAI/pfx:Body/*" element="ns:Request"/>
        </pd:coercions>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:XMLMessage/*[1]"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Fail Order Component">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>339</pd:x>
        <pd:y>247</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/OrderComponent/OrderComponentResponse.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <ns12:Request>
                    <ns12:OcDetails>
                        <ns12:Id>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                        </ns12:Id>
                        <ns12:Name>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                        </ns12:Name>
                        <ns12:Scenario>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Scenario"/>
                        </ns12:Scenario>
                        <ns12:OrderId>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                        </ns12:OrderId>
                        <ns12:CorrelationID>
                            <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:CorrelationID"/>
                        </ns12:CorrelationID>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Cartridge">
                            <ns12:Cartridge>
                                <ns12:Name>
                                    <xsl:value-of select="ns:Name"/>
                                </ns12:Name>
                                <ns12:Version>
                                    <xsl:value-of select="ns:Version"/>
                                </ns12:Version>
                                <ns12:Source>
                                    <xsl:value-of select="ns:Source"/>
                                </ns12:Source>
                            </ns12:Cartridge>
                        </xsl:for-each>
                    </ns12:OcDetails>
                    <ns12:ServiceReply>
                        <pfx9:Header>
                            <ns4:ResponseCode>
                                <xsl:value-of select="$JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Header/ns4:ResponseCode"/>
                            </ns4:ResponseCode>
                        </pfx9:Header>
                        <pfx9:Body>
                            <ns32:TelcoOperationResponse>
                                <Id>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Id"/>
                                </Id>
                                <Name>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:Name"/>
                                </Name>
                                <OrderId>
                                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                                </OrderId>
                                <StatusCode>
                                    <xsl:value-of select="$JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Header/ns4:ResponseCode"/>
                                </StatusCode>
                                <StatusMessage>
                                    <xsl:value-of select="$JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Header/ns4:ResponseMsg"/>
                                </StatusMessage>
                            </ns32:TelcoOperationResponse>
                        </pfx9:Body>
                    </ns12:ServiceReply>
                </ns12:Request>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetGlobalData">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>487</pd:x>
        <pd:y>74</pd:y>
        <config>
            <processName>/Domains/OrderManagement/BusinessResources/Processes/TO2FGlobalData/GetGlobalData.process</processName>
        </config>
        <pd:inputBindings>
            <Input>
                <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId">
                    <OrderId>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:OrderId"/>
                    </OrderId>
                </xsl:if>
            </Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS Queue Sender</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse XML</pd:from>
        <pd:to>JMS Queue Requestor</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS Queue Requestor</pd:from>
        <pd:to>GetGlobalData</pd:to>
        <pd:xpathDescription>Success</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Header/ns4:ResponseCode=$_globalVariables/ns1:GlobalVariables/ErrorCodes/Success
or
$JMS-Queue-Requestor/ns2:ActivityOutput/Body/pfx9:ServiceReply/pfx9:Header/ns4:ResponseCode=$_globalVariables/ns1:GlobalVariables/ErrorCodes/NoActionToPerform</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS Queue Requestor</pd:from>
        <pd:to>Fail Order Component</pd:to>
        <pd:xpathDescription>Otherwise</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Fail Order Component</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetGlobalData</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>