<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:ns="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" xmlns:pfx10="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd" xmlns:pfx41="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberManagement/CreateSubscriberInfo/v1" xmlns:pfx5="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:pfx31="http://vodafone.com.tr/ServiceCatalog/Business/Billing/CreateSubscriberInfo/v1" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx4="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" xmlns:pfx3="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" xmlns:pfx2="http://vodafone.com.tr/EAI/Common/ResponseEAI" xmlns:pfx9="http://vodafone.com.tr/ServiceCatalog/ServiceReply" xmlns:pfx8="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberManagement/CreateSubscriberInfoWA/v1" xmlns:pfx7="http://vodafone.com.tr/ServiceCatalog/Business/CustomerManagement/ModifyPrimaryOfferWA/v1" xmlns:pfx6="http://vodafone.com.tr/ServiceCatalog/Business/CustomerManagement/ModifyPrimaryOffer/v1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns32="http://vodafone.com.tr/ServiceCatalog/Business/SubscriberInquiries/GetCUGMembers/v1" xmlns:ns33="urn:com:metasolv:oms:xmlapi:1" xmlns:ns5="http://vodafone.com.tr/ServiceCatalog/Business/CustomerInquiries/GetCustomerData/v1" xmlns:ns12="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentResponseInput/v1" xmlns:pfx="http://vodafone.com.tr/EAI/Common/RequestEAI" xmlns:eai="java://com.telco.eai.EAIFunctions" xmlns:pfx71="http://www.tibco.com/schemas/OrderManagement/Domains/OrderManagement/BusinessResources/Schemas/Schema.xsd" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns2="http://vodafone.com.tr/EAI/Common/ResponseCodes" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns3="http://vodafone.com.tr/EAI/Common/Header" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/RequestEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/RequestEAI.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/ResponseEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/ResponseEAI.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OrderComponent/OrderComponentRequestInput.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceRequest.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/CustomerManagement/ModifyPrimaryOffer/v1" schemaLocation="/Domains/ServiceCatalog/Business/CustomerManagement/ModifyPrimaryOffer_v1/Schemas/ModifyPrimaryOffer.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/CustomerManagement/ModifyPrimaryOfferWA/v1" schemaLocation="/Domains/ServiceCatalog/Business/CustomerManagement/ModifyPrimaryOfferWA_v1/Schemas/ModifyPrimaryOfferWA.xsd"/>
    <pd:name>Domains/OrderManagement/Business/OrderComponent/Billing/CCS/ModifyPrimaryOffer_v1/ModifyPrimaryOffer.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="Input">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:RequestEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>71</pd:startX>
    <pd:startY>77</pd:startY>
    <pd:returnBindings>
        <Output>
            <pfx2:ResponseEAI>
                <pfx2:Header>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ancestor-or-self::*/namespace::node()"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/@*"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/node()"/>
                </pfx2:Header>
                <pfx2:ResponseCodes>
                    <ns2:ResponseCode>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ErrorCodes/Success"/>
                    </ns2:ResponseCode>
                </pfx2:ResponseCodes>
            </pfx2:ResponseEAI>
        </Output>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="Output">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx2:ResponseEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>614</pd:endX>
    <pd:endY>77</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://vodafone.com.tr/1414142534734</pd:targetNamespace>
    <pd:activity name="JMS Queue Sender">
        <pd:type>com.tibco.plugin.jms.JMSQueueSendActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueSendActivity</pd:resourceType>
        <pd:x>476</pd:x>
        <pd:y>77</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx3:ServiceRequest"/>
        </config>
        <pd:inputBindings>
            <pfx5:ActivityInput>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:ServiceCatalogQueue">
                    <destinationQueue>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:ServiceCatalogQueue"/>
                    </destinationQueue>
                </xsl:if>
                <replyToQueue>
                    <xsl:value-of select="tib:concat-sequence-format(($_globalVariables/ns1:GlobalVariables/Constants/Company,$_globalVariables/ns1:GlobalVariables/Constants/ProjectName,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/Name,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Name,$_globalVariables/ns1:GlobalVariables/Constants/Layer/Business,$_globalVariables/ns1:GlobalVariables/Constants/QOS/Guarantee,$_globalVariables/ns1:GlobalVariables/Constants/RequestType/Reply),&quot;.&quot;)"/>
                </replyToQueue>
                <JMSPriority>
                    <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ns3:Priority"/>
                </JMSPriority>
                <Body>
                    <pfx3:ServiceRequest>
                        <xsl:for-each select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx3:Header>
                                <xsl:if test="ns3:RequestId">
                                    <ns3:RequestId>
                                        <xsl:value-of select="ns3:RequestId"/>
                                    </ns3:RequestId>
                                </xsl:if>
                                <ns3:SourceSystem>
                                    <xsl:value-of select="ns3:SourceSystem"/>
                                </ns3:SourceSystem>
                                <ns3:ReplyExpected>
                                    <xsl:value-of select="ns3:ReplyExpected"/>
                                </ns3:ReplyExpected>
                                <xsl:if test="ns3:QoS">
                                    <ns3:QoS>
                                        <xsl:value-of select="ns3:QoS"/>
                                    </ns3:QoS>
                                </xsl:if>
                                <xsl:if test="ns3:Schedule">
                                    <ns3:Schedule>
                                        <xsl:value-of select="ns3:Schedule"/>
                                    </ns3:Schedule>
                                </xsl:if>
                                <xsl:if test="ns3:CorrelationId">
                                    <ns3:CorrelationId>
                                        <xsl:value-of select="ns3:CorrelationId"/>
                                    </ns3:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns3:Priority">
                                    <ns3:Priority>
                                        <xsl:value-of select="ns3:Priority"/>
                                    </ns3:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns3:Credentials">
                                    <ns3:Credentials>
                                        <ns3:ApplicationId>
                                            <xsl:value-of select="ns3:ApplicationId"/>
                                        </ns3:ApplicationId>
                                        <ns3:User>
                                            <xsl:value-of select="ns3:User"/>
                                        </ns3:User>
                                        <xsl:if test="ns3:Password">
                                            <ns3:Password>
                                                <xsl:value-of select="ns3:Password"/>
                                            </ns3:Password>
                                        </xsl:if>
                                    </ns3:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns3:ProxySystem">
                                    <ns3:ProxySystem>
                                        <xsl:value-of select="ns3:ProxySystem"/>
                                    </ns3:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns3:ForceSimulate">
                                    <ns3:ForceSimulate>
                                        <xsl:value-of select="ns3:ForceSimulate"/>
                                    </ns3:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns3:Attributes">
                                    <ns3:Attributes>
                                        <xsl:for-each select="ns3:Attribute">
                                            <ns3:Attribute>
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:Name"/>
                                                </ns3:Name>
                                                <ns3:Value>
                                                    <xsl:value-of select="ns3:Value"/>
                                                </ns3:Value>
                                            </ns3:Attribute>
                                        </xsl:for-each>
                                    </ns3:Attributes>
                                </xsl:for-each>
                            </pfx3:Header>
                        </xsl:for-each>
                        <pfx3:Body>
                            <xsl:copy-of select="$Map-Data/pfx7:ModifyPrimaryOfferWARequest/pfx7:Request"/>
                        </pfx3:Body>
                    </pfx3:ServiceRequest>
                </Body>
            </pfx5:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>326</pd:x>
        <pd:y>77</pd:y>
        <config>
            <element ref="pfx7:ModifyPrimaryOfferWARequest"/>
        </config>
        <pd:inputBindings>
            <pfx7:ModifyPrimaryOfferWARequest>
                <xsl:variable name="RootContainer" select="$Parse-XML/Order/ListOfRootItem/RootItem[ComponentGroup='CAMP CONTAINER']"/>
                <xsl:variable name="RootMobileLine" select="$Parse-XML/Order/ListOfRootItem/RootItem[ComponentSubType='MOBILE']"/>
                <xsl:variable name="RootCampaignOld" select="$Parse-XML/Order/ListOfRootItem/RootItem[ComponentGroup='CAMP PROMO' and Action = &quot;Deleted&quot;  and not(ComponentType = &quot;PERMANENCY&quot;)] "/>
                <xsl:variable name="RootCampaignNew" select="$Parse-XML/Order/ListOfRootItem/RootItem[ComponentGroup='CAMP PROMO' and Action != &quot;Existing&quot; and Action != &quot;Deleted&quot;  and not(ComponentType = &quot;PERMANENCY&quot;)] "/>
                <pfx7:Request>
                    <xsl:variable name="_isFDO" select="(($Parse-XML/Order/OrderFutureDatedFlag = 'Y' and $Parse-XML/Order/CutOffDateFlag = 'Y') or $Parse-XML/Order/ListOfRootItem/RootItem/ActionType = &quot;134&quot;) and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/Order/OrderDueDate)"/>
                    <pfx7:SubscriberNo>
                        <xsl:value-of select="$RootMobileLine/MSISDN"/>
                    </pfx7:SubscriberNo>
                    <pfx7:NewProductId>
                        <xsl:value-of select="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action = &quot;New&quot;]/ProductCatalogId"/>
                    </pfx7:NewProductId>
                    <xsl:if test="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action = &quot;New&quot;]/IntegrationId">
                        <pfx7:NewOfferOrderKey>
                            <xsl:value-of select="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action = &quot;New&quot;]/IntegrationId"/>
                        </pfx7:NewOfferOrderKey>
                    </xsl:if>
                    <pfx7:OldProductId>
                        <xsl:value-of select="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action = &quot;Deleted&quot;]/ProductCatalogId"/>
                    </pfx7:OldProductId>
                    <xsl:if test="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action = &quot;Deleted&quot;]/IntegrationId">
                        <pfx7:OldOfferOrderKey>
                            <xsl:value-of select="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action = &quot;Deleted&quot;]/IntegrationId"/>
                        </pfx7:OldOfferOrderKey>
                    </xsl:if>
                    <xsl:choose>
                        <xsl:when test="{--only if FDO (to Cut Off Date) or backdated order---}&#xA;$_isFDO=true()">
                            <pfx7:DueDate>
                                <xsl:value-of select="eai:parseDateBySource(&quot;Siebel&quot;,$Parse-XML/Order/OrderDueDate)"/>
                            </pfx7:DueDate>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/Order/PriceDate)">
                            <pfx7:ReferenceDate>
                                <xsl:value-of select="eai:parseDateBySource(&quot;Siebel&quot;,$Parse-XML/Order/PriceDate)"/>
                            </pfx7:ReferenceDate>
                        </xsl:when>
                        <xsl:when test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action = &quot;New&quot;]/StartDate)">
                            <pfx7:ReferenceDate>
                                <xsl:value-of select="eai:parseDateBySource(&quot;Siebel&quot;,$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action = &quot;New&quot;]/StartDate)"/>
                            </pfx7:ReferenceDate>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:for-each select="$RootMobileLine[1]/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action = &quot;New&quot; and string-length(VFTRCBUDiscountType) >0][1]">
                        <pfx7:Discount>
                            <xsl:if test="ProductCatalogId">
                                <pfx7:TargetProductId>
                                    <xsl:value-of select="ProductCatalogId"/>
                                </pfx7:TargetProductId>
                            </xsl:if>
                            <pfx7:Discount>
                                <xsl:if test="VFTRCBUDiscountType">
                                    <pfx7:DiscountType>
                                        <xsl:value-of select="VFTRCBUDiscountType"/>
                                    </pfx7:DiscountType>
                                </xsl:if>
                                <xsl:if test="ProductCatalogId">
                                    <pfx7:TargetProductId>
                                        <xsl:value-of select="ProductCatalogId"/>
                                    </pfx7:TargetProductId>
                                </xsl:if>
                                <xsl:if test="VFTRCBUDiscountType='0'">
                                    <xsl:if test="VFTRCBUDiscountAmount">
                                        <pfx7:Permillage>
                                            <xsl:value-of select="VFTRCBUDiscountAmount"/>
                                        </pfx7:Permillage>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="VFTRCBUDiscountType='1'">
                                    <xsl:if test="VFTRCBUDiscountAmount">
                                        <pfx7:Amount>
                                            <xsl:value-of select="VFTRCBUDiscountAmount"/>
                                        </pfx7:Amount>
                                    </xsl:if>
                                </xsl:if>
                            </pfx7:Discount>
                            <xsl:if test="VFTRCBUDiscountDuration">
                                <pfx7:NumberOfCycle>
                                    <xsl:value-of select="VFTRCBUDiscountDuration"/>
                                </pfx7:NumberOfCycle>
                            </xsl:if>
                            <xsl:choose>
                                <xsl:when test="($Parse-XML/Order/OrderFutureDatedFlag = 'Y' or $Parse-XML/Order/ListOfRootItem/RootItem/ActionType = &quot;134&quot; )&#xA; and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/Order[1]/ListOfRootItem/RootItem[1]/DueDate)">
                                    <pfx7:ValidMode>
                                        <pfx7:Mode>
                                            <xsl:value-of select="'4050003'"/>
                                        </pfx7:Mode>
                                        <xsl:if test="$Parse-XML/Order/OrderFutureDatedFlag = 'Y' and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/Order[1]/ListOfRootItem/RootItem[1]/DueDate)">
                                            <pfx7:EffectiveDate>
                                                <xsl:value-of select="eai:parseDateBySource(&quot;Siebel&quot;,$Parse-XML/Order[1]/ListOfRootItem/RootItem[1]/DueDate)"/>
                                            </pfx7:EffectiveDate>
                                        </xsl:if>
                                        <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                            <pfx7:ExpireDate>
                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                            </pfx7:ExpireDate>
                                        </xsl:if>
                                    </pfx7:ValidMode>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx7:ValidMode>
                                        <pfx7:Mode>
                                            <xsl:value-of select="'4050000'"/>
                                        </pfx7:Mode>
                                        <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)">
                                            <pfx7:ExpireDate>
                                                <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,current()/EndDate)"/>
                                            </pfx7:ExpireDate>
                                        </xsl:if>
                                    </pfx7:ValidMode>
                                </xsl:otherwise>
                            </xsl:choose>
                        </pfx7:Discount>
                    </xsl:for-each>
                    <xsl:choose>
                        <xsl:when test="$RootCampaignNew/Action = &quot;New&quot;&#xA;and&#xA;$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and AgreementNum = $RootCampaignNew/AgreementNum and AgreementNum!='0'  and string-length(AgreementNum)>0]/Action =&quot;New&quot;">
                            <pfx7:Commitment>
                                <xsl:if test="$RootCampaignNew/ProductCatalogId">
                                    <pfx7:CampaignOfferId>
                                        <xsl:value-of select="$RootCampaignNew/ProductCatalogId"/>
                                    </pfx7:CampaignOfferId>
                                </xsl:if>
                                <xsl:if test="$RootCampaignNew/AgreementNum">
                                    <pfx7:InstanceId>
                                        <xsl:value-of select="$RootCampaignNew/AgreementNum"/>
                                    </pfx7:InstanceId>
                                </xsl:if>
                                <pfx7:CampaignOfferOrderKey>
                                    <xsl:value-of select="$RootCampaignNew/IntegrationId"/>
                                </pfx7:CampaignOfferOrderKey>
                                <xsl:if test="not($RootCampaignOld/ComponentType = &quot;DISCOUNT&quot;) &#xA;and &#xA;not($RootCampaignOld/ComponentType = &quot;HANDSET PROMO&quot; and ($RootCampaignOld/ApplyPenalty = &quot;Y&quot; or not($RootCampaignNew/ComponentType = &quot;HANDSET PROMO&quot; and $RootCampaignNew/Action = &quot;New&quot;)))">
                                    <!--Do not send if BreakCommitment is generated-->
                                    <xsl:if test="$RootCampaignOld/AgreementNum">
                                        <pfx7:PreviousInstanceId>
                                            <xsl:value-of select="$RootCampaignOld/AgreementNum"/>
                                        </pfx7:PreviousInstanceId>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $RootCampaignNew/EndDate)">
                                    <pfx7:EndDate>
                                        <xsl:value-of select="eai:parseDateBySource(&quot;Siebel&quot;,$RootCampaignNew/EndDate)"/>
                                    </pfx7:EndDate>
                                </xsl:if>
                                <xsl:if test="$_isFDO=true() and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $Parse-XML/Order/OrderCreationDate)">
                                    <pfx7:RequestTime>
                                        <xsl:value-of select="eai:parseDateBySource(&quot;Siebel&quot;,$Parse-XML/Order/OrderCreationDate)"/>
                                    </pfx7:RequestTime>
                                </xsl:if>
                                <pfx7:TargetOffer>
                                    <pfx7:TargetOfferId>
                                        <xsl:value-of select="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action = (&quot;New&quot;)]/ProductCatalogId"/>
                                    </pfx7:TargetOfferId>
                                    <pfx7:IsPrimaryOffer>
                                        <xsl:value-of select="true()"/>
                                    </pfx7:IsPrimaryOffer>
                                </pfx7:TargetOffer>
                                <xsl:for-each-group select="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup !=&quot;TARIFF&quot; and Action = ('Modified') and AgreementNum = $RootCampaignNew/AgreementNum and AgreementNum!='0'  and string-length(AgreementNum)>0]" group-by="ProductCatalogId">
                                    <pfx7:TargetOffer>
                                        <pfx7:TargetOfferId>
                                            <xsl:value-of select="ProductCatalogId"/>
                                        </pfx7:TargetOfferId>
                                    </pfx7:TargetOffer>
                                </xsl:for-each-group>
                                <xsl:for-each select="$RootCampaignNew[ComponentType = 'HANDSET PROMO'][1]">
                                    <xsl:variable name="_handsetPromo" select="."/>
                                    <pfx7:Handset>
                                        <xsl:choose>
                                            <xsl:when test="string-length($RootContainer/ListOfChildItem/ChildItem[ComponentType = 'HANDSET' and Action='New']/ProductCatalogId)>0">
                                                <xsl:if test="$RootContainer/ListOfChildItem/ChildItem[ComponentType = 'HANDSET' and Action='New']/ProductCatalogId">
                                                    <pfx7:HandsetType>
                                                        <xsl:value-of select="$RootContainer/ListOfChildItem/ChildItem[ComponentType = 'HANDSET' and Action='New']/ProductCatalogId"/>
                                                    </pfx7:HandsetType>
                                                </xsl:if>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:if test="$RootContainer/ListOfChildItem/ChildItem[ComponentType = 'HANDSET']/ProductCatalogId">
                                                    <pfx7:HandsetType>
                                                        <xsl:value-of select="$RootContainer/ListOfChildItem/ChildItem[ComponentType = 'HANDSET']/ProductCatalogId"/>
                                                    </pfx7:HandsetType>
                                                </xsl:if>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                        <xsl:if test="$_handsetPromo/ListOfKeyFeatureSimple/KeyFeatureSimple[Feature = 'Credit Card Instalments']/FeatureValue">
                                            <pfx7:AdvancedPaidPeriod>
                                                <xsl:value-of select="$_handsetPromo/ListOfKeyFeatureSimple/KeyFeatureSimple[Feature = 'Credit Card Instalments']/FeatureValue"/>
                                            </pfx7:AdvancedPaidPeriod>
                                        </xsl:if>
                                        <xsl:if test="string-length($_handsetPromo/ListOfKeyFeatureSimple/KeyFeatureSimple[Feature = 'Credit Card Instalments']/FeatureValue) >0">
                                            <pfx7:AdvancedPaidAmount>
                                                <xsl:value-of select="$_handsetPromo/MonthlyInstalments"/>
                                            </pfx7:AdvancedPaidAmount>
                                        </xsl:if>
                                        <xsl:choose>
                                            <xsl:when test="string-length($_handsetPromo/ListOfKeyFeatureSimple/KeyFeatureSimple[Feature = 'Credit Card Instalments']/FeatureValue)>0">
                                                <pfx7:InstallmentPeriod>
                                                    <xsl:value-of select="round($_handsetPromo/Duration - $_handsetPromo/ListOfKeyFeatureSimple/KeyFeatureSimple[Feature = 'Credit Card Instalments']/FeatureValue)"/>
                                                </pfx7:InstallmentPeriod>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx7:InstallmentPeriod>
                                                    <xsl:value-of select="$_handsetPromo/Duration"/>
                                                </pfx7:InstallmentPeriod>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                        <xsl:if test="$_handsetPromo/MonthlyInstalments">
                                            <pfx7:InstallmentAmount>
                                                <xsl:value-of select="$_handsetPromo/MonthlyInstalments"/>
                                            </pfx7:InstallmentAmount>
                                        </xsl:if>
                                        <xsl:if test="$_handsetPromo/SubsidyAmount">
                                            <pfx7:Subsidy>
                                                <xsl:value-of select="$_handsetPromo/SubsidyAmount"/>
                                            </pfx7:Subsidy>
                                        </xsl:if>
                                    </pfx7:Handset>
                                </xsl:for-each>
                                <!--SimpleProperty Added (CR51)-->
                                <pfx7:SimpleProperty>
                                    <pfx7:Id>
                                        <xsl:value-of select="'Campaignname'"/>
                                    </pfx7:Id>
                                    <pfx7:Value>
                                        <xsl:value-of select="$RootCampaignNew/ProductName"/>
                                    </pfx7:Value>
                                </pfx7:SimpleProperty>
                                <pfx7:SimpleProperty>
                                    <pfx7:Id>
                                        <xsl:value-of select="'Campaigncode'"/>
                                    </pfx7:Id>
                                    <pfx7:Value>
                                        <xsl:value-of select="$RootCampaignNew/ProductCatalogId"/>
                                    </pfx7:Value>
                                </pfx7:SimpleProperty>
                                <xsl:choose>
                                    <xsl:when test="($Parse-XML/Order/OrderFutureDatedFlag = 'Y' or $Parse-XML/Order/ListOfRootItem/RootItem/ActionType = &quot;134&quot; )&#xA; and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/Order/ListOfRootItem/RootItem[1]/DueDate)">
                                        <pfx7:ValidMode>
                                            <pfx7:Mode>
                                                <xsl:value-of select="'4050003'"/>
                                            </pfx7:Mode>
                                            <xsl:if test="$Parse-XML/Order/OrderFutureDatedFlag = 'Y' and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/Order/ListOfRootItem/RootItem[1]/DueDate)">
                                                <pfx7:EffectiveDate>
                                                    <xsl:value-of select="eai:parseDateBySource(&quot;Siebel&quot;,$Parse-XML/Order/ListOfRootItem/RootItem[1]/DueDate)"/>
                                                </pfx7:EffectiveDate>
                                            </xsl:if>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootCampaignNew/EndDate)">
                                                <pfx7:ExpireDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootCampaignNew/EndDate)"/>
                                                </pfx7:ExpireDate>
                                            </xsl:if>
                                        </pfx7:ValidMode>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx7:ValidMode>
                                            <pfx7:Mode>
                                                <xsl:value-of select="'4050000'"/>
                                            </pfx7:Mode>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootCampaignNew/EndDate)">
                                                <pfx7:ExpireDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootCampaignNew/EndDate)"/>
                                                </pfx7:ExpireDate>
                                            </xsl:if>
                                        </pfx7:ValidMode>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <pfx7:OperationType>
                                    <xsl:value-of select="0"/>
                                </pfx7:OperationType>
                            </pfx7:Commitment>
                        </xsl:when>
                        <xsl:when test="not(exists($RootCampaignNew))&#xA;and&#xA;$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and AgreementNum!='0'  and string-length(AgreementNum)>0]/Action =&quot;New&quot;&#xA;and&#xA;not($RootMobileLine/BPProductType = 'PERMANENCY')&#xA;and &#xA;not($Parse-XML/Order/ListOfRootItem/RootItem[Action='New' and ComponentType='PERMANENCY'])">
                            <pfx7:Commitment>
                                <pfx7:CampaignOfferId>
                                    <xsl:value-of select="$RootMobileLine/VFTRCBUBPPartNumber"/>
                                </pfx7:CampaignOfferId>
                                <pfx7:InstanceId>
                                    <xsl:value-of select="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup =&quot;TARIFF&quot; and Action = ('New') and AgreementNum !='0']/AgreementNum"/>
                                </pfx7:InstanceId>
                                <xsl:if test="$_isFDO=true() and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime, $Parse-XML/Order/OrderCreationDate)">
                                    <pfx7:RequestTime>
                                        <xsl:value-of select="eai:parseDateBySource(&quot;Siebel&quot;,$Parse-XML/Order/OrderCreationDate)"/>
                                    </pfx7:RequestTime>
                                </xsl:if>
                                <pfx7:TargetOffer>
                                    <pfx7:TargetOfferId>
                                        <xsl:value-of select="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action = (&quot;New&quot;)]/ProductCatalogId"/>
                                    </pfx7:TargetOfferId>
                                    <pfx7:IsPrimaryOffer>
                                        <xsl:value-of select="true()"/>
                                    </pfx7:IsPrimaryOffer>
                                </pfx7:TargetOffer>
                                <xsl:for-each-group select="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup !=&quot;TARIFF&quot; and Action = ('Modified') and AgreementNum!='0'  and string-length(AgreementNum)>0]" group-by="ProductCatalogId">
                                    <pfx7:TargetOffer>
                                        <pfx7:TargetOfferId>
                                            <xsl:value-of select="ProductCatalogId"/>
                                        </pfx7:TargetOfferId>
                                    </pfx7:TargetOffer>
                                </xsl:for-each-group>
                                <!--SimpleProperty Added (CR51)-->
                                <pfx7:SimpleProperty>
                                    <pfx7:Id>
                                        <xsl:value-of select="'Campaignname'"/>
                                    </pfx7:Id>
                                    <pfx7:Value>
                                        <xsl:value-of select="$RootMobileLine/ProdPromName"/>
                                    </pfx7:Value>
                                </pfx7:SimpleProperty>
                                <pfx7:SimpleProperty>
                                    <pfx7:Id>
                                        <xsl:value-of select="'Campaigncode'"/>
                                    </pfx7:Id>
                                    <pfx7:Value>
                                        <xsl:value-of select="$RootMobileLine/VFTRCBUBPPartNumber"/>
                                    </pfx7:Value>
                                </pfx7:SimpleProperty>
                                <xsl:choose>
                                    <xsl:when test="($Parse-XML/Order/OrderFutureDatedFlag = 'Y' or $Parse-XML/Order/ListOfRootItem/RootItem/ActionType = &quot;134&quot; )&#xA; and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/Order/ListOfRootItem/RootItem[1]/DueDate)">
                                        <pfx7:ValidMode>
                                            <pfx7:Mode>
                                                <xsl:value-of select="'4050003'"/>
                                            </pfx7:Mode>
                                            <xsl:if test="$Parse-XML/Order/OrderFutureDatedFlag = 'Y' and tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$Parse-XML/Order/ListOfRootItem/RootItem[1]/DueDate)">
                                                <pfx7:EffectiveDate>
                                                    <xsl:value-of select="eai:parseDateBySource(&quot;Siebel&quot;,$Parse-XML/Order/ListOfRootItem/RootItem[1]/DueDate)"/>
                                                </pfx7:EffectiveDate>
                                            </xsl:if>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootCampaignNew/EndDate)">
                                                <pfx7:ExpireDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootCampaignNew/EndDate)"/>
                                                </pfx7:ExpireDate>
                                            </xsl:if>
                                        </pfx7:ValidMode>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx7:ValidMode>
                                            <pfx7:Mode>
                                                <xsl:value-of select="'4050000'"/>
                                            </pfx7:Mode>
                                            <xsl:if test="tib:validate-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootCampaignNew/EndDate)">
                                                <pfx7:ExpireDate>
                                                    <xsl:value-of select="tib:parse-dateTime($_globalVariables/ns1:GlobalVariables/Constants/Formats/Siebel/DateTime,$RootCampaignNew/EndDate)"/>
                                                </pfx7:ExpireDate>
                                            </xsl:if>
                                        </pfx7:ValidMode>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:choose>
                                    <xsl:when test="$RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and AgreementNum!='0'  and Action =&quot;New&quot;]/AgreementNum = $RootMobileLine/ListOfChildItem/ChildItem[ComponentGroup = &quot;TARIFF&quot; and Action =&quot;Deleted&quot;]/AgreementNum">
                                        <!--Change PrimaryOffer within Contract-->
                                        <pfx7:OperationType>
                                            <xsl:value-of select="2"/>
                                        </pfx7:OperationType>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <!--Join in commitment-->
                                        <pfx7:OperationType>
                                            <xsl:value-of select="1"/>
                                        </pfx7:OperationType>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </pfx7:Commitment>
                        </xsl:when>
                        <xsl:otherwise/>
                    </xsl:choose>
                </pfx7:Request>
            </pfx7:ModifyPrimaryOfferWARequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>183</pd:x>
        <pd:y>77</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>false</validateOutput>
            <term>
                <xsd:element name="Order" type="pfx4:Order"/>
            </term>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Start/Input/pfx:RequestEAI/pfx:Body/*" element="ns:Request"/>
        </pd:coercions>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:XMLMessage/*[1]"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse XML</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS Queue Sender</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>