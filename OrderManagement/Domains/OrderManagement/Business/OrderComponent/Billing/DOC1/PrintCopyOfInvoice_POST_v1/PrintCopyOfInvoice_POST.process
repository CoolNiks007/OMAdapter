<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns2="http://vodafone.com.tr/EAI/Common/Header" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" xmlns:ns4="http://vodafone.com.tr/EAI/Common/ResponseCodes" xmlns:ns3="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:pfx5="http://vodafone.com.tr/EAI/Common/ResponseEAI" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx4="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd" xmlns:pfx2="http://vodafone.com.tr/ServiceCatalog/Business/Billing/SendBulkPrinting/v1" xmlns:pfx="http://vodafone.com.tr/EAI/Common/RequestEAI" xmlns:pfx6="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd">
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OSMOrder.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/OrderManagment/Business/OrderComponent/OrderComponentRequestInput/v1" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/OrderComponent/OrderComponentRequestInput.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/RequestEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/RequestEAI.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/Business/Billing/SendBulkPrinting/v1" schemaLocation="/Domains/ServiceCatalog/Business/Billing/SendBulkPrinting_v1/Schemas/SendBulkPrinting.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/ServiceCatalog/ServiceRequest" schemaLocation="/Domains/ServiceCatalog/BusinessResources/Schemas/ServiceRequest.xsd"/>
    <xsd:import namespace="http://vodafone.com.tr/EAI/Common/ResponseEAI" schemaLocation="/GlobalCommonResources/Schemas/Common/ResponseEAI.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd" schemaLocation="/Domains/OrderManagement/BusinessResources/Schemas/SiebelOrder.xsd"/>
    <pd:name>Domains/OrderManagement/Business/OrderComponent/Billing/DOC1/PrintCopyOfInvoice_POST_v1/PrintCopyOfInvoice_POST.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="Input">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx:RequestEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>151</pd:startX>
    <pd:startY>66</pd:startY>
    <pd:returnBindings>
        <Output>
            <pfx5:ResponseEAI>
                <pfx5:Header>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ancestor-or-self::*/namespace::node()"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/@*"/>
                    <xsl:copy-of select="$Start/Input/pfx:RequestEAI/pfx:Header/node()"/>
                </pfx5:Header>
                <pfx5:ResponseCodes>
                    <ns4:ResponseCode>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/ErrorCodes/Success"/>
                    </ns4:ResponseCode>
                </pfx5:ResponseCodes>
            </pfx5:ResponseEAI>
        </Output>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="Output">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx5:ResponseEAI"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>858</pd:endX>
    <pd:endY>66</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://vodafone.com.tr/1434639691839</pd:targetNamespace>
    <pd:activity name="Parse XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>338</pd:x>
        <pd:y>65</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>false</validateOutput>
            <term ref="pfx6:Order"/>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Start/Input/pfx:RequestEAI/pfx:Body/*" element="ns:Request"/>
        </pd:coercions>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:OrderComponentDetails/ns:XMLMessage/*[1]"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>507</pd:x>
        <pd:y>65</pd:y>
        <config>
            <element ref="pfx2:Request"/>
        </config>
        <pd:inputBindings>
            <pfx2:Request>
                <pfx2:InvoiceID>
                    <xsl:value-of select="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfInvoiceProfile/InvoiceProfile[1]/InvoiceProfileId"/>
                </pfx2:InvoiceID>
                <xsl:choose>
                    <xsl:when test="upper-case($Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfInvoiceProfile/InvoiceProfile[1]/DetailType)='DETAIL'">
                        <pfx2:RequestType>
                            <xsl:value-of select="'Detail'"/>
                        </pfx2:RequestType>
                    </xsl:when>
                    <xsl:when test="upper-case($Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfInvoiceProfile/InvoiceProfile[1]/DetailType)='SUMMARY'">
                        <pfx2:RequestType>
                            <xsl:value-of select="'Summary'"/>
                        </pfx2:RequestType>
                    </xsl:when>
                    <xsl:otherwise>
                        <pfx2:RequestType>
                            <xsl:value-of select="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfInvoiceProfile/InvoiceProfile[1]/DetailType"/>
                        </pfx2:RequestType>
                    </xsl:otherwise>
                </xsl:choose>
                <pfx2:IndexName>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Domains/Billing/DOC1/Defaults/IndexName"/>
                </pfx2:IndexName>
                <pfx2:PostName>
                    <xsl:value-of select="concat($Parse-XML/Order/ListOfOrderContact/OrderContact[1]/ContactFirstName, $Parse-XML/Order/ListOfOrderContact/OrderContact[1]/ContactLastname)"/>
                </pfx2:PostName>
                <pfx2:PostAddress1>
                    <xsl:value-of select="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressFullAddress"/>
                </pfx2:PostAddress1>
                <xsl:if test="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressName">
                    <pfx2:PostAddress2>
                        <xsl:value-of select="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressName"/>
                    </pfx2:PostAddress2>
                </xsl:if>
                <xsl:if test="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressNum">
                    <pfx2:PostAddress3>
                        <xsl:value-of select="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressNum"/>
                    </pfx2:PostAddress3>
                </xsl:if>
                <xsl:if test="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressState">
                    <pfx2:Province>
                        <xsl:value-of select="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressState"/>
                    </pfx2:Province>
                </xsl:if>
                <xsl:if test="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressCity">
                    <pfx2:PostCity>
                        <xsl:value-of select="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressCity"/>
                    </pfx2:PostCity>
                </xsl:if>
                <xsl:if test="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressCountry">
                    <pfx2:PostCountry>
                        <xsl:value-of select="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressCountry"/>
                    </pfx2:PostCountry>
                </xsl:if>
                <xsl:if test="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressZIP">
                    <pfx2:PostZipCode>
                        <xsl:value-of select="$Parse-XML/Order/ListOfBillingAccount/BillingAccount[1]/ListOfBillingAddress/BillingAddress[1]/AddressZIP"/>
                    </pfx2:PostZipCode>
                </xsl:if>
            </pfx2:Request>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="JMS Queue Sender">
        <pd:type>com.tibco.plugin.jms.JMSQueueSendActivity</pd:type>
        <pd:resourceType>ae.activities.JMSQueueSendActivity</pd:resourceType>
        <pd:x>675</pd:x>
        <pd:y>67</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/GlobalCommonResources/Connections/JMS/JMS EAI Connection.sharedjmscon</ConnectionReference>
            <InDataxsdString ref="pfx4:ServiceRequest"/>
        </config>
        <pd:inputBindings>
            <ns3:ActivityInput>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:ServiceCatalogQueue">
                    <destinationQueue>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Body/ns:Request/ns:ServiceCatalogQueue"/>
                    </destinationQueue>
                </xsl:if>
                <replyToQueue>
                    <xsl:value-of select="tib:concat-sequence-format(($_globalVariables/ns1:GlobalVariables/Constants/Company,$_globalVariables/ns1:GlobalVariables/Constants/ProjectName,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/Name,$_globalVariables/ns1:GlobalVariables/Domains/OrderManagement/OrderComponent/Name,$_globalVariables/ns1:GlobalVariables/Constants/Layer/Business,$_globalVariables/ns1:GlobalVariables/Constants/QOS/Guarantee,$_globalVariables/ns1:GlobalVariables/Constants/RequestType/Reply),&quot;.&quot;)"/>
                </replyToQueue>
                <xsl:if test="$Start/Input/pfx:RequestEAI/pfx:Header/ns2:Priority">
                    <JMSPriority>
                        <xsl:value-of select="$Start/Input/pfx:RequestEAI/pfx:Header/ns2:Priority"/>
                    </JMSPriority>
                </xsl:if>
                <Body>
                    <pfx4:ServiceRequest>
                        <xsl:for-each select="$Start/Input/pfx:RequestEAI/pfx:Header">
                            <pfx4:Header>
                                <xsl:if test="ns2:RequestId">
                                    <ns2:RequestId>
                                        <xsl:value-of select="ns2:RequestId"/>
                                    </ns2:RequestId>
                                </xsl:if>
                                <ns2:SourceSystem>
                                    <xsl:value-of select="ns2:SourceSystem"/>
                                </ns2:SourceSystem>
                                <ns2:ReplyExpected>
                                    <xsl:value-of select="ns2:ReplyExpected"/>
                                </ns2:ReplyExpected>
                                <xsl:if test="ns2:QoS">
                                    <ns2:QoS>
                                        <xsl:value-of select="ns2:QoS"/>
                                    </ns2:QoS>
                                </xsl:if>
                                <xsl:if test="ns2:Schedule">
                                    <ns2:Schedule>
                                        <xsl:value-of select="ns2:Schedule"/>
                                    </ns2:Schedule>
                                </xsl:if>
                                <xsl:if test="ns2:CorrelationId">
                                    <ns2:CorrelationId>
                                        <xsl:value-of select="ns2:CorrelationId"/>
                                    </ns2:CorrelationId>
                                </xsl:if>
                                <xsl:if test="ns2:Priority">
                                    <ns2:Priority>
                                        <xsl:value-of select="ns2:Priority"/>
                                    </ns2:Priority>
                                </xsl:if>
                                <xsl:for-each select="ns2:Credentials">
                                    <ns2:Credentials>
                                        <ns2:ApplicationId>
                                            <xsl:value-of select="ns2:ApplicationId"/>
                                        </ns2:ApplicationId>
                                        <ns2:User>
                                            <xsl:value-of select="ns2:User"/>
                                        </ns2:User>
                                        <xsl:if test="ns2:Password">
                                            <ns2:Password>
                                                <xsl:value-of select="ns2:Password"/>
                                            </ns2:Password>
                                        </xsl:if>
                                    </ns2:Credentials>
                                </xsl:for-each>
                                <xsl:if test="ns2:ProxySystem">
                                    <ns2:ProxySystem>
                                        <xsl:value-of select="ns2:ProxySystem"/>
                                    </ns2:ProxySystem>
                                </xsl:if>
                                <xsl:if test="ns2:ForceSimulate">
                                    <ns2:ForceSimulate>
                                        <xsl:value-of select="ns2:ForceSimulate"/>
                                    </ns2:ForceSimulate>
                                </xsl:if>
                                <xsl:for-each select="ns2:Attributes">
                                    <ns2:Attributes>
                                        <xsl:for-each select="ns2:Attribute">
                                            <ns2:Attribute>
                                                <ns2:Name>
                                                    <xsl:value-of select="ns2:Name"/>
                                                </ns2:Name>
                                                <ns2:Value>
                                                    <xsl:value-of select="ns2:Value"/>
                                                </ns2:Value>
                                            </ns2:Attribute>
                                        </xsl:for-each>
                                    </ns2:Attributes>
                                </xsl:for-each>
                            </pfx4:Header>
                        </xsl:for-each>
                        <pfx4:Body>
                            <xsl:copy-of select="$Map-Data/pfx2:Request"/>
                        </pfx4:Body>
                    </pfx4:ServiceRequest>
                </Body>
            </ns3:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Parse XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse XML</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>JMS Queue Sender</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS Queue Sender</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>